#!/bin/bash
set -e

#Escape code
esc=`echo -en "\033"`

# Set colors
cc_red="${esc}[0;31m"
cc_green="${esc}[0;32m"
cc_yellow="${esc}[0;33m"
cc_blue="${esc}[0;34m"
cc_normal=`echo -en "${esc}[m\017"`

NPROCS=$((`cat /proc/cpuinfo | grep processor | wc -l`))
NPROCS=$(( $NPROCS*2/3 ))
#########################################
#   PRINT HELP
#{{{
rm_ifexist() {
 if [ -f "$1" ] ; then
   rm -v "$1"
 fi
}

function print_help {
  #{{{
  echo -e "\n\n 
  -p [LINUX|BGL|BGP|BGQ|SMP]    default = LINUX  build to run on what platform
  -c [all|common|mdl|gsl|nti]   default = all    what components to build
  -r|--release                  (flag) to build in release mode [default: debug mode]
  -j <n>                        with <n> is number of processes for parallel build [default: 2/3 of total cores]
  -s|--singlethread             to build in single thread
  --mco                         <max-compute-order>
  --clean                       to clean everything
  --rebuild                     to clean and rebuild
  --loglevel [1|2]              determine the log-level
                                [by default: build with -g information, but not printing out any thing]
                                  log1 = print out DEBUG_HH and DEBUG_ASSERT
                                  log2 = print out ... during loops
  --regen                       regenerate gsl/Makefile  
  HETE ARCHITECTURE:
  -g|--gpu                      build with GPU extensions
  -a|--arma                     build with Armadillo extensions

  PREDEFINED TARGETS:
  --as-NTS                      build Neural Tissue Simulator (NTS)
  --as-NTS-NVU                  build NTS+NVU
  --as-NGS                      build Neuronal Graph Simulator (NGS)

Example:
1) build_script -p LINUX --as-NTS   :          builds NTS in a LINUX environment using MPI
2) build_script -p BGL --as-NGS	    :          builds NGS on Blue Gene/L
3) build_script -p BGP		    :          builds custom MGS domain on Blue Gene/P as specified in mgs.mdf
4) build_script -p BGQ		    :          builds both NTS and NGS on Blue Gene/Q if mgs.mdf include nts.mdf and ngs.mdf\n
\n
Extra Libraries:
  export SUITESPARSE=\`pwd\`/SuiteSparse/
  export LD_LIBRARY_PATH=\$LD_LIBRARY_PATH:\$SUITESPARSE/lib
  export PYTHON_INCLUDE_DIR=/usr/lib/python3.6

\n\n"; exit;
  #}}}
}

function print_do_preq {
   echo -e "${cc_red}Please run${cc_normal}: source set_env"
}

if [ "$1" == "--help" ] || [ $# == 0 ]; then
  print_help
fi
#}}}
#{{{
RunInstallFlex()
{
  #{{{
    Ask_InstallPath $1
    rm -rf flex-2.6.4
    rm -rf flex-2.6.4.tar.gz
    wget "https://github.com/westes/flex/releases/download/v2.6.4/flex-2.6.4.tar.gz"
    tar -xvf flex-2.6.4.tar.gz
    cd flex-2.6.4
    if [ "$flex_path" == '' ]; then
      ./configure
    else
      echo "./configure --prefix=$flex_path"
    fi
    make -j10
    sudo make install
    cd -
    rm -rf flex-2.6.4
    rm flex-2.6.4.tar.gz
    echo "please update:"
    echo "   PATH: $flex_path/bin"
    echo "   LD_LIBRARY_PATH, LD_RUN_PATH, and LIBRARY_PATH: $flex_path/lib" 
    echo "   CPATH, C_INCLUDE_PATH, CPLUS_INCLUDE_PATH, INCLUDE: $flex_path/include" 
    echo "   MANPATH: $flex_path/man"
    echo "and reload shell"
  #}}}
}
Ask_InstallPath()
{
  #{{{
  # print question
  DEFAULT_PATH="/usr/local/bin"
  read -p "Where do you want to install "$1"?(Press Enter for default (${DEFAULT_PATH}): " path
  path=${path:-${DEFAULT_PATH}}

  # check and act on given answer
  flex_path=$(eval echo $path)
  #}}}
}
Yes_No_InstallFlex()
{
  #{{{
  # print question
  echo -n "Do you want to install Flex 2.6.4?(yes(y)/no(n)): "

  # read answer
  read YnAnswer

  # all to lower case
  YnAnswer=$(echo $YnAnswer | awk '{print tolower($0)}')

  # check and act on given answer
  case $YnAnswer in
    "yes")  RunInstallFlex "Flex 2.6.4";;
    "y")  RunInstallFlex "Flex 2.6.4";;
    "no")  ;;
    "n")  ;;
    *)      echo "Please answer yes(y) or no(n)" ; Yes_No_InstallFlex;;
  esac
  #}}}
}
Yes_No_RebuildClean()
{
  #{{{
  # print question
  read -p "Do you want to continue with --rebuild --clean (yes(y)/no(n)) [enter = y]: " YnAnswer

  # read answer
  YnAnswer=${YnAnswer:-y}

  # all to lower case
  YnAnswer=$(echo $YnAnswer | awk '{print tolower($0)}')

  # check and act on given answer
  case $YnAnswer in
    "yes")  REBUILD="-rebuild"; CLEAN="-clean";;
    "y")  REBUILD="-rebuild"; CLEAN="-clean";;
    "no") exit ;;
    "n")  exit ;;
    *)    echo "Please answer yes(y) or no(n)" ; Yes_No_RebuildClean;;
  esac
  #}}}
}

function make_functor_mdf()
{
  #{{{
  cat functors_common.mdf > $1
  #cat functors_both.mdf >> $1
if [[ "$BUILD_TARGET" == "--as-NTS" ]] || [[ "$BUILD_TARGET" == "--as-NTS-NVU" ]] ; then
  cat functors_nts.mdf >> $1
fi
  #cat functors_mgs.mdf >> $1
  if [ -f colab_functors.mdf ]; then
    cat colab_functors.mdf >> $1
  else
    touch $1
  fi
  #}}}
}

function touch_mdf_upon_changing_target()
{
  #{{{
      if [ $PREV_TYPE != $TYPE ]; then
        if [[  $TYPE == *"NTS"* ]]; then
          touch nts.mdf
        fi
        if [[ $TYPE == *"NVU"* ]]; then
          touch NVU.mdf
        fi
        if [[ $TYPE == *"NGS"* ]]; then
          touch ngs.mdf
        fi
        if [[ $TYPE == *"MGS"* ]]; then
          touch mgs.mdf
        fi
      fi
      rm_ifexist Extensions.mk
  #}}}
}
#}}}

#########################################

##########################################
## Detect what need to be built
#{{{
WHAT_TO_BUILD="all"
PLATFORM="LINUX"
CLEAN=""
REBUILD=""
GSL_BUILD_MODE=""
RELEASE=""
GPU=""
ARMA=""
REGENMAKEFILE=""
MCO=""
COLAB=""
TARGET_MAKE=""
BUILD_TARGET=""
MGS_TARGET_FILENAME="mgs.mdf"
MDF_TARGET=${MGS_TARGET_FILENAME}
optspec=":c:p:sr-:j:g:a"
while getopts "$optspec" optchar; do
  case $optchar in
    p)
      echo "Platform: $OPTARG" >&2
      PLATFORM=$OPTARG
      ;;
    c)
      echo "Build: $OPTARG"
      WHAT_TO_BUILD=$OPTARG
      ;;
    j)
      echo "Num-processes: $OPTARG"
      NPROCS=$OPTARG
      ;;
    s)
      NPROCS=1
      ;;
    r) # release
      RELEASE="-release"
      GSL_BUILD_MODE="--release"
      ;;
    g) # GPU extensions
      GPU="--gpu"
      ;;
    a) # Armadillo extensions
      ARMA="--arma"
      ;;
    -)  #parse long-option
            case "${OPTARG}" in
                as-NTS)
                    BUILD_TARGET="--as-NTS"
                    MDF_TARGET="nts.mdf"
                    ;;
                as-NTS-NVU)
                    BUILD_TARGET="--as-NTS-NVU"
                    MDF_TARGET="ntsnvu.mdf"
                    EXTRA_LIBS+=" USE_SUITESPARSE=1"
                    ;;
                as-NGS)
                    BUILD_TARGET="--as-NGS"
                    MDF_TARGET="ngs.mdf"
                    ;;
                clean)
                    CLEAN="-clean"
                    ;;
                colab)
                    TARGET_MAKE="library"
                    #client="${!OPTIND}"
                    client="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
                    if [ -z $client ] || [ "${client:0:1}" == "-" ]; then
                      echo "Please select a value for --${OPTARG} option"
                      exit
                    else
                      echo "Build library for colaborator: " ${client}
                    fi
                    COLAB="--colab ${client}"
                    ;;
                rebuild)
                    REBUILD="-rebuild"
                    ;;
                regen)
                    REGENMAKEFILE="--regen"
                    echo "Regenerate gsl/Makefile"
                    ;;
                singlethread)
                    NPROCS=1
                    ;;
                mco)
                    MCO="-MCO"
                    ;;
		release) # release
                    RELEASE="-release"
                    GSL_BUILD_MODE="--release"
		    ;;
		gpu) # GPU extensions
                    GPU="--gpu"
		    ;;
		arma) # Armadillo extensions
                    ARMA="--arma"
		    ;;
                loglevel)
                    val="${!OPTIND}"
                    GSL_BUILD_MODE="--loglevel $val"
                    ;;
                someloglevel)
                    val="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
                    echo "parsing option: '--${OPTARG}', value: '${val}'" >&2;
                    ;;
                =*)
                    val=${OPTARG#*=}
                    opt=${OPTARG%=$val}
                    echo "parsing option: '--${opt}', value: '${val}'" >&2
                    ;;
                *)
                    if [ "$OPTERR" = 1 ] && [ "${optspec:0:1}" != ":" ]; then
                        echo "unknown option --${OPTARG}" >&2
                    fi
                    ;;
            esac;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
  esac
done
SUPPORTED_PLATFORMS="LINUX BGL BGP BGQ SMP"
[[ $SUPPORTED_PLATFORMS =~ (^|[[:space:]])"$PLATFORM"($|[[:space:]]) ]] && : || { echo "wrong-platform $PLATFORM"; print_help; exit; }

SUPPORTED_COMPONENTS="all common mdl gsl nti"
[[ $SUPPORTED_COMPONENTS =~ (^|[[:space:]])"$WHAT_TO_BUILD"($|[[:space:]]) ]] && : || { echo "wrong component $WHAT_TO_BUILD"; print_help; exit; }

#}}}
if [[ "$BUILD_TARGET" == "--as-NTS" ]] ; then
TYPE="NTS" 
elif [[ "$BUILD_TARGET" == "--as-NTS-NVU" ]] ; then
TYPE="NTSNVU"
elif [[ "$BUILD_TARGET" == "--as-NGS" ]] ; then
TYPE="NGS"  
else 
TYPE="MGS" 
fi

#{{{ pre-requisite
BASE_FOLDER=$NTSMGSROOT
if [ "$BASE_FOLDER" == "" ]; then
  print_do_preq
  exit 1
elif [ "$BASE_FOLDER" != $(pwd) ]; then
  print_do_preq
  exit 1
fi
cd $BASE_FOLDER/models
  touch ${MGS_TARGET_FILENAME}
  echo '// MDL files
#include "std/std_interfaces.mdl"
#include "Life/Life.mdl"
#include "Life/LifeDataCollectors.mdl"

// MDF files

  ' > ${MGS_TARGET_FILENAME}
if [ ! -f ${MDF_TARGET} ]; then 
  echo "ERROR: File ${MDF_TARGET} does not exist."
fi
cd -

SUPPORTED_COLAB_CLIENTS="njit ucnz"
for name in ${SUPPORTED_COLAB_CLIENTS}; do
  NTSMacros_File=$BASE_FOLDER/nti/include/NTSMacros_${name}.h
  if [ -f ${NTSMacros_File} ]; then rm ${NTSMacros_File}; fi
done
if [ ! -z $client ]; then
  cd ${BASE_FOLDER}/gsl
  if [ -f Makefile ]; then rm Makefile; fi
  cd -
fi

if [ "${client}" == "njit" ]; then 
  NTSMacros_File=$BASE_FOLDER/nti/include/NTSMacros_${client}.h
  echo "
  #define IDEA_CURRENTONCOMPT
  #define IDEA_ILEAK
  #define SIMULATE_VM
  #define SIMULATE_CACYTO
  " > ${NTSMacros_File}
fi
if [ "${client}" == "ucnz" ]; then 
  NTSMacros_File=$BASE_FOLDER/nti/include/NTSMacros_${client}.h
  echo "
  #define IDEA_CURRENTONCOMPT
  #define IDEA_ILEAK
  #define SIMULATE_VM
  #define SIMULATE_CACYTO
  " > ${NTSMacros_File}
fi

Model2Use=$BASE_FOLDER/nti/include/Model2Use.h
if [ ! -f "${Model2Use}"  ]; then
  touch ${Model2Use}
  echo "//Please consider to define the following option, with MODEL_TO_USE is required" > ${Model2Use} 
  echo "//IMPORTANT: any change is expected to have full rebuild" >> ${Model2Use}
  echo "//--------------------" >> ${Model2Use}
  echo "#define MODEL_TO_USE _MSN_2000_MAHON //with <value> is a macro defined in NTSMacros.h" >> ${Model2Use}
  echo "//#define MAX_COMPUTE_ORDER <value> (range: 0-7)" >> ${Model2Use}
  echo "//#define USE_DOUBLES   [to enable double-precision]" >> ${Model2Use} 
  echo "#define NVU_NTS_EXTENSION  //we need this to enable NTS to work with NVU" >> ${Model2Use}
  echo "#define SINGLE_JUNCTIONAL_CAPSULE_CAN_FORM_MULTIPLE_SYNAPSE ">> ${Model2Use} 
  echo "//#define WAIT_FOR_REST" >> ${Model2Use}
  echo "#ifdef WAIT_FOR_REST" >> ${Model2Use} 
  echo "#define NOGATING_TIME 20.0 //ms" >> ${Model2Use} 
  echo "#else " >> ${Model2Use} 
  echo "#define NOGATING_TIME 0.0 //ms" >> ${Model2Use} 
  echo "#endif" >> ${Model2Use} 
fi 

#}}}
########################################
### Check required tools ###
## 1. MPI library
## 2. Bison
## 3. Flex
## 4. Python
## 5. libgmp
## 6. CUDA [optional]
## 7. Armadillo [optional]
#{{{
if [ "$PLATFORM" == "LINUX" ]; then
  if which mpiexec | grep -q1 /\mpiexec; then
    echo mpi found...; else echo mpi not found!; exit; fi
fi

if which bison | grep -q1 /\bison; then
    echo bison found...; else echo bison not found!; exit; fi

VALID_BISON_VERSION=2.3
BISON_VERSION=`bison --version 2>&1 | awk 'NR==1{ gsub(/"/,""); print $NF }'`
echo version $BISON_VERSION...
read c_major c_minor c_rev<<EOF
 `echo ${VALID_BISON_VERSION} | tr "." " "`
EOF
if ! [[ "$c_rev" =~ [0-9]+$ ]]; then c_rev=0; fi
read n_major n_minor n_rev << EOF
`echo ${BISON_VERSION} | tr "." " "`
EOF
if ! [[ "$n_rev" =~ [0-9]+$ ]]; then n_rev=0; fi
if [ "$n_major" -lt "$c_major" ]; then
    echo bison version $VALID_BISON_VERSION or greater required!
    exit;
fi
if [ "$n_major" -eq "$c_major" ] && [ "$n_minor" -lt "$c_minor" ]; then
    echo bison version $VALID_BISON_VERSION or greater required!
    exit;
fi
if [ "$n_minor" -eq "$c_minor" ] &&  [ "$n_rev" -lt "$c_rev" ]; then
    echo bison version $VALID_BISON_VERSION or greater required!
    exit;
fi

if which flex | grep -q1 /\flex; then
  echo flex found...; else echo flex not found! please either install through your distributions package manager or from source; 
  exit; 
fi

VALID_FLEX_VERSION=2.6.4
#{{{
FLEX_VERSION=`flex --version 2>&1 | awk 'NR==1{ gsub(/"/,""); print $NF }'`
echo version $FLEX_VERSION...
read c_major c_minor c_rev << EOF
`echo ${VALID_FLEX_VERSION} | tr "." " "`
EOF
if ! [[ "$c_rev" =~ [0-9]+$ ]]; then c_rev=0; fi
read n_major n_minor n_rev << EOF
`echo ${FLEX_VERSION} | tr "." " "`
EOF
if ! [[ "$n_rev" =~ [0-9]+$ ]]; then n_rev=0; fi
FLEX_FAILED=0
if [ "$n_major" -ne "$c_major" ]; then
  FLEX_FAILED=1
  #  echo flex version $VALID_FLEX_VERSION required: flex.sourceforge.net!
  #  if [ "$PLATFORM" == "LINUX" ]; then
  #      exit;
  #  fi
fi
if [ "$n_major" -eq "$c_major" ] &&  [ "$n_minor" -ne "$c_minor" ]; then
  FLEX_FAILED=1
  #  echo flex version $VALID_FLEX_VERSION required: flex.sourceforge.net!
  #  if [ "$PLATFORM" == "LINUX" ]; then
  #      exit;
  #  fi
fi
if [ "$n_minor" -eq "$c_minor" ] &&  [ "$n_rev" -ne "$c_rev" ]; then
  FLEX_FAILED=1
  #  echo flex version $VALID_FLEX_VERSION required: flex.sourceforge.net!
  #  if [ "$PLATFORM" == "LINUX" ]; then
  #      exit;
  #  fi
fi
if [ $FLEX_FAILED -eq 1 ]; then
  echo flex version $VALID_FLEX_VERSION required: flex.sourceforge.net!
  Yes_No_InstallFlex
  if [ "$PLATFORM" == "LINUX" ]; then 
    exit;
  fi
fi
#}}}

if which python | grep -q1 /\python; then
  echo "python found..."; else echo "python not found! please either install through your distributions package manager or from source";
  exit;
fi

if ldconfig -p | grep libgmp; then
  echo "libgmp found..."; else "libgmp not found! please either install through your distributions package manager or from source (https://gmplib.org)";
  exit;
fi

if [ "$GPU" == "--gpu" ]; then
  if which nvidia-smi | grep -q1 /\nvidia-smi; then
    echo "CUDA probably found..."; else echo "CUDA potentially not found! (install from https://developer.nvidia.com/cuda-downloads)";
    exit
  fi
fi

if [ "$ARMA" == "--arma" ]; then
  if `ldconfig -p | grep -q armadillo`; then
    echo "Armadillo probably found..."; else echo "Armadillo potentially not found! (install from http://arma.sourceforge.net/download.html)";
    exit
  fi
fi
#}}}
#{{{ 
if [[ -z "${PYTHON_INCLUDE_DIR}" ]]; then
  echo "Please export PYTHON_INCLUDE_DIR=/path/to/Python.h"
  echo " e.g: export PYTHON_INCLUDE_DIR=/usr/include/python2.7/"
  exit 1
fi
if [ "$BUILD_TARGET" == "--as-NTS-NVU" ]; then
if [[ -z "${SUITESPARSE}" ]]; then
  echo "Please install the SuiteSparse libraries (www.suitesparse.com)"
  echo " ... then: export SUITESPARSE=/path/to/suitesparse_main_dir"
  exit 1
fi
fi
#}}}

########################################
### Check supporting files/settings ###
#{{{pre-configure and testing
if [ ! -f ".built" ] && [[ "$REBUILD" != "-rebuild" && "$CLEAN" != "-clean" ]]; then
  echo "First build. Auto run with --rebuild"
  REBUILD="-rebuild"
fi

if [  -f ".built"  ]; then
  line=$(head -n 1 ".built")
  if  [ "$BASE_FOLDER" != "$line" ]; then
    echo "Please run: source set_env"
    rm .built
    exit
  fi
  PREV_TYPE=$(sed '2q;d' ".built")
fi
if [ "$CLEAN" == "-clean" ] ; then
  rm_ifexist $BASE_FOLDER/.built
fi
if [ "$TYPE" != "$PREV_TYPE" ]; then
  #gawk -v type="$TYPE"  -v prev_type="$PREV_TYPE" 'NR==2 { sub(prev_type, type)}1' .built > .built_tmp && mv .built_tmp .built
  rm -f gsl/Makefile
  if [[ "$REBUILD" != "-rebuild" && "$CLEAN" != "-clean" ]]; then
    echo "You have switched the build from ${PREV_TYPE} to ${TYPE}. Build with --rebuild --clean"
    Yes_No_RebuildClean
  fi
fi
#}}}

################################################
### MDL code ###
#{{{
if [[ "mdl" =~ (^|[[:space:]])"$WHAT_TO_BUILD"($|[[:space:]]) ]] || [[ "all" =~ (^|[[:space:]])"$WHAT_TO_BUILD"($|[[:space:]]) ]] ; then
  echo "Start build MDL parser"
  cd $MDLROOT

  touch mdl.make.mark
  if [ "$CLEAN" == "-clean" ] || [ "$REBUILD" == "-rebuild" ]; then
    if [ "$CLEAN" == "-clean" ]; then
      make clean;
      echo "${cc_blue}Removed MDL code successfully.${cc_normal}"
    fi
    if [ "$REBUILD" == "-rebuild" ]; then
      make clean;
      make ${TARGET_MAKE} -j $NPROCS RELEASE="$RELEASE"
    fi
  else
    make ${TARGET_MAKE} -j $NPROCS RELEASE="$RELEASE"
  fi
  if [ "$CLEAN" != "-clean" ] || [ "$REBUILD" == "-rebuild" ]; then
    if [ "$TARGET_MAKE" != "" ]; then
      # we also want to build the executable
      make -j $NPROCS RELEASE="$RELEASE"
    fi
    if [ ! `ls $MDLROOT/bin/mdlparser 2>/dev/null` ]; then
      rm mdl.make.mark
      cd $BASE_FOLDER
      echo -e "${cc_red}Build MDL failed ! ${cc_normal}";
      exit;
    else
      echo  -e "${cc_blue} Build MDL successfully.${cc_normal}\n"
    fi
    rm -f mdl.make.mark
    cd $BASE_FOLDER
  fi
fi
#}}}

################################################
### COMMON code ###
#{{{
if [[ "common" =~ (^|[[:space:]])"$WHAT_TO_BUILD"($|[[:space:]]) ]] || [[ "all" =~ (^|[[:space:]])"$WHAT_TO_BUILD"($|[[:space:]]) ]] ; then
  echo "Start build COMMON"
  cd $BASE_FOLDER/common
  sed 's/FOR_BLUEGENE_L=1/FOR_BLUEGENE_L=0/g' Makefile > tmp.mk; mv tmp.mk Makefile;
  sed 's/FOR_BLUEGENE_P=1/FOR_BLUEGENE_P=0/g' Makefile > tmp.mk; mv tmp.mk Makefile;
  sed 's/FOR_BLUEGENE_Q=1/FOR_BLUEGENE_Q=0/g' Makefile > tmp.mk; mv tmp.mk Makefile;
  if [ "$PLATFORM" == "BGL" ]; then sed 's/FOR_BLUEGENE_L=0/FOR_BLUEGENE_L=1/g' Makefile > tmp.mk; mv tmp.mk Makefile;
  elif [ "$PLATFORM" == "BGP" ]; then sed 's/FOR_BLUEGENE_P=0/FOR_BLUEGENE_P=1/g' Makefile > tmp.mk; mv tmp.mk Makefile;
  elif [ "$PLATFORM" == "BGQ" ]; then sed 's/FOR_BLUEGENE_Q=0/FOR_BLUEGENE_Q=1/g' Makefile > tmp.mk; mv tmp.mk Makefile;
  fi
  if [ "$CLEAN" == "-clean" ] || [ "$REBUILD" == "-rebuild" ]; then
    if [ "$CLEAN" == "-clean" ] ; then
      make realclean RELEASE="$RELEASE" ${EXTRA_LIBS};
      echo "${cc_blue}Removed COMMON code successfully.${cc_normal}"
    fi
    if [ "$REBUILD" == "-rebuild" ] ; then
      make realclean RELEASE="$RELEASE" ${EXTRA_LIBS};
      make ${TARGET_MAKE} -j $NPROCS RELEASE="$RELEASE" ${EXTRA_LIBS}
    fi
  else
    make ${TARGET_MAKE} -j $NPROCS RELEASE="$RELEASE" ${EXTRA_LIBS}
  fi
  if [ "$CLEAN" != "-clean" ] || [ "$REBUILD" == "-rebuild" ]; then
    if [ "$TARGET_MAKE" != "" ]; then
      # we also want to build the executable
      make -j $NPROCS RELEASE="$RELEASE" ${EXTRA_LIBS}
    fi
    if [ $? -gt 0 ]; then
      cd $BASE_FOLDER
      echo -e "${cc_red}Build COMMON code failed ! ${cc_normal}";
      exit;
    else
      echo -e "${cc_blue}Build COMMON code successfully.${cc_normal}"
    fi
  fi
  cd $BASE_FOLDER
fi
#}}}

################################################
### NTI code ###
#{{{
if [[ "$BUILD_TARGET" == "--as-NTS" ]] || [[ "$BUILD_TARGET" == "--as-NTS-NVU" ]] ; then
if [[ "nti" =~ (^|[[:space:]])"$WHAT_TO_BUILD"($|[[:space:]]) ]] || [[ "all" =~ (^|[[:space:]])"$WHAT_TO_BUILD"($|[[:space:]]) ]] ; then
  cd $BASE_FOLDER/nti
  if [ -f .build_error ]; then rm .build_error; fi
  if [ "$MCO" == "-MCO" ]; then
    #TODO: Find out what is $3 here to replace it
    sed 's/#define MAX_COMPUTE_ORDER .*$/#define MAX_COMPUTE_ORDER '$3'/g' MaxComputeOrder.h > tmp.mco; mv tmp.mco MaxComputeOrder.h;
  fi
  sed 's/FOR_BLUEGENE_L=1/FOR_BLUEGENE_L=0/g' Makefile > tmp.mk; mv tmp.mk Makefile;
  sed 's/FOR_BLUEGENE_P=1/FOR_BLUEGENE_P=0/g' Makefile > tmp.mk; mv tmp.mk Makefile;
  sed 's/FOR_BLUEGENE_Q=1/FOR_BLUEGENE_Q=0/g' Makefile > tmp.mk; mv tmp.mk Makefile;
  if [ "$PLATFORM" == "BGL" ]; then sed 's/FOR_BLUEGENE_L=0/FOR_BLUEGENE_L=1/g' Makefile > tmp.mk; mv tmp.mk Makefile;
  elif [ "$PLATFORM" == "BGP" ]; then sed 's/FOR_BLUEGENE_P=0/FOR_BLUEGENE_P=1/g' Makefile > tmp.mk; mv tmp.mk Makefile;
  elif [ "$PLATFORM" == "BGQ" ]; then sed 's/FOR_BLUEGENE_Q=0/FOR_BLUEGENE_Q=1/g' Makefile > tmp.mk; mv tmp.mk Makefile;
  fi

  if [ "$CLEAN" == "-clean" ] || [ "$REBUILD" == "-rebuild" ]; then
    if [ "$CLEAN" == "-clean" ] ; then
      make realclean;
      echo -e "${cc_blue}Removed NTI code successfully.${cc_normal}"
    fi
    if [ "$REBUILD" == "-rebuild" ] || [ "$MCO" == "-MCO" ]; then
      make realclean RELEASE="$RELEASE";
      make ${TARGET_MAKE} -j $NPROCS RELEASE="$RELEASE"
    fi
  else
    make ${TARGET_MAKE} -j $NPROCS RELEASE="$RELEASE"
  fi
  if [ -f .build_error ]; then 
    cd $BASE_FOLDER
    exit ; 
  fi
  if [ "$CLEAN" != "-clean" ] || [ "$REBUILD" == "-rebuild" ]; then
    if [ "$TARGET_MAKE" != "" ]; then
      # we also want to build the executable
      make -j $NPROCS RELEASE="$RELEASE"
    fi
    BUILD_FAIL=0
    if [ "$RELEASE" == "-release" ]; then
      if [ ! `ls $LENSROOT/lib/libnti.a 2>/dev/null` ]; then
        BUILD_FAIL=1
      fi
    else
      if [ ! -f $LENSROOT/lib/libnti_db.a ]; then
        BUILD_FAIL=1
      fi
    fi
    if [ $BUILD_FAIL -eq 1 ]; then
      cd $BASE_FOLDER
      echo -e "${cc_red}Build NTI failed ! ${cc_normal}";
      exit;
    else
      echo -e "${cc_blue}Build NTI code successfully.${cc_normal}"
    fi
    cd $BASE_FOLDER
  fi
fi
fi
#}}}

##########################################
### GSL code ###
#{{{
EXTRA_ARGS="${COLAB} ${REGENMAKEFILE} ${BUILD_TARGET}"
if [[ "gsl" =~ (^|[[:space:]])"$WHAT_TO_BUILD"($|[[:space:]]) ]] ||  [[ "all" =~ (^|[[:space:]])"$WHAT_TO_BUILD"($|[[:space:]]) ]] ; then
  if [ "$REGENMAKEFILE" == "--regen" ] ; then
    cd $LENSROOT
    ./build_gsl -p $PLATFORM ${EXTRA_ARGS} --rebuild -j $NPROCS $GSL_BUILD_MODE $GPU  $ARMA 
    echo "Complete: regenerate gsl/Makefile"
    exit
  fi
  echo "Start build GSL"
  if [ "$CLEAN" == "-clean" ] || [ "$REBUILD" == "-rebuild" ]; then
    #{{{
    cd $LENSROOT
    chmod +x ./build_gsl
    if [ "$CLEAN" == "-clean" ] ; then
      #{{{
      ./build_gsl -p $PLATFORM ${EXTRA_ARGS} --clean
      rm_ifexist $BASE_FOLDER/models/Extensions.mk
      #rm_ifexist $BASE_FOLDER/models/all.mdf
      #rm_ifexist $BASE_FOLDER/models/all_test.mdf
      rm_ifexist $LENSROOT/extensions/functor/all.mdf
      rm_ifexist $LENSROOT/extensions/functor/all_test.mdf
      find . -iname "CG_*" | xargs -I{} rm {}
      find $BASE_FOLDER/models -iname "CG_*" | xargs -I{} rm {}
      find $BASE_FOLDER/models -iname ".*mdl" | xargs -I{} rm {}
      touch $BASE_FOLDER/models/${MDF_TARGET}
      #}}}
    fi
    cd -
    cd $BASE_FOLDER
    if [ "$REBUILD" == "-rebuild" ] ;then
      #{{{
      cd $LENSROOT/extensions/variable
      ./define variables.mdf $REBUILD
      cd $LENSROOT/extensions/struct
      ./define structs.mdf $REBUILD
      cd $LENSROOT/extensions/functor
      #rm_ifexist all.mdf
      JUST_CREATE=0
      if [ ! -f all.mdf ]; then
        JUST_CREATE=1
        make_functor_mdf all.mdf
      fi
      make_functor_mdf all_test.mdf
      if [ ! diff -q all_test.mdf all.mdf &>/dev/null ] || [ $JUST_CREATE -eq 1 ]; then
        mv all_test.mdf all.mdf
        ./define all.mdf $REBUILD
      fi
      rm_ifexist all_test.mdf
      #rm_ifexist all.mdf
      #cat nts.mdf >> all.mdf
      #cat mgs.mdf >> all.mdf
      cd $BASE_FOLDER/models
      touch_mdf_upon_changing_target
      #touch all.mdf
      #./define all.mdf $REBUILD
      touch ${MDF_TARGET}
      ./define ${MDF_TARGET} $REBUILD

      cp Extensions.mk $LENSROOT/
      cd $BASE_FOLDER
      #}}}
    fi
    cd -
    cd $LENSROOT
    if [ "$REBUILD" == "-rebuild" ] || [ "$MCO" == "-MCO" ]; then
      ./build_gsl -p $PLATFORM ${EXTRA_ARGS} --rebuild -j $NPROCS $GSL_BUILD_MODE $GPU  $ARMA
    fi
    cd -
    #}}}
  else
    #{{{
    cd $LENSROOT/extensions/variable
    ./define variables.mdf $REBUILD
    cd $LENSROOT/extensions/struct
    ./define structs.mdf $REBUILD
    cd $LENSROOT/extensions/functor
    make_functor_mdf all_test.mdf
    if ! diff -q all_test.mdf all.mdf &>/dev/null; then
      mv all_test.mdf all.mdf
      ./define all.mdf $REBUILD
    fi
    rm_ifexist all_test.mdf
    cd $BASE_FOLDER/models
    touch_mdf_upon_changing_target
    if [ ! -f Extensions.mk ]; then
      touch ${MDF_TARGET};
      ./define ${MDF_TARGET} -force
    else
      ./define ${MDF_TARGET} $REBUILD
    fi

    cp Extensions.mk $LENSROOT/
    cd $BASE_FOLDER
    # -s or -singlethread
    cd $LENSROOT
    ./build_gsl -p $PLATFORM -j $NPROCS $GSL_BUILD_MODE ${EXTRA_ARGS} $GPU  $ARMA
    cd -
    #}}}
  fi
  if { [ "$CLEAN" != "-clean"  ] || [ "$REBUILD" == "-rebuild"  ] ; } ; then
    if [ $? -eq 0 ] && [  `ls $LENSROOT/bin/gslparser` ]; then
      echo -e "\n\n\n${cc_blue}Congratulations! You have made ${TYPE} ...${cc_normal}

    To run the test NTS tissue simulation :

      1) type \"cd graphs/Compartmental\"/
      2) browse to http://neuromorpho.org/neuroMorpho/bylab.jsp
      3) click \"Markram,\" \"Select All,\" \"Get SWC files of selected neurons\"
      4) download and extract zipped .swc files to graphs/Compartmental/neurons/*.swc
      5) type \"mpiexec -n 2  ../../gsl/bin/gslparser Tissue1.gsl\"


    To run a test MGS simulation :

      1) type \"cd graphs/Life\"
      2) type \"mpiexec -n 1 ../../gsl/bin/gslparser -t 4 -f Life.gsl\"

    To run a test NGS simulation :

      1) type \"cd graphs/IAF\"
      2) type \"mpiexec -n 1 ../../gsl/bin/gslparser -t 4 -f leakyIAF.gsl -s \`date +%s\`\"
      3) type \"cd ../../postprocess/IAF/\"
      4) run the MATLAB script \"leakyIAF.m\"
      \n\n"
      if [ "$REBUILD" == "-rebuild" ] ;then
        cd $BASE_FOLDER
        touch .built && echo $BASE_FOLDER > .built
        echo $TYPE >> .built # 2nd-line
      fi
    fi
  fi
fi
#}}}
