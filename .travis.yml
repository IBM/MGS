dist: xenial

sudo: required

services:
  - docker

if: branch = for_nvu 

#language: cpp
language: generic 

compiler:
  #- gcc
  #- clang

env:
  global:
    - PYTHON_INCLUDE_DIR=/usr/include/python2.7/
    - CUDA=9.2.148-1
    - CUDA_SHORT=9.2
    - CUDA_APT=9-2
    - UBUNTU_VERSION=ubuntu1604
    - MPI_HOME=`pwd`/ompi
      #- if [ ! -d "${MPI_HOME}" ]; then sh ./get_ompi.sh; fi
    - PATH=${MPI_HOME}/bin:${PATH}
    - LD_LIBRARY_PATH=${MPI_HOME}/lib:${LD_LIBRARY_PATH}
    - LD_RUN_PATH=${MPI_HOME}/lib:${LD_RUN_PATH}
    - LIBRARY_PATH=${MPI_HOME}/lib:${LIBRARY_PATH}
    - CPATH=${MPI_HOME}/include:${CPATH}
    - C_INCLUDE_PATH=${MPI_HOME}/include:${C_INCLUDE_PATH}
    - INCLUDE_PATH=${MPI_HOME}/include:${INCLUDE_PATH}
    - CPLUS_INCLUDE_PATH=${MPI_HOME}/include:${CPLUS_INCLUDE_PATH}
    - BISON_HOME=`pwd`/bison
      #- if [ ! -d "${BISON_HOME}" ]; then sh ./get_bison.sh; fi
    - PATH=${BISON_HOME}/bin:${PATH}
    - LD_LIBRARY_PATH=${BISON_HOME}/lib:${LD_LIBRARY_PATH}
    - LD_RUN_PATH=${BISON_HOME}/lib:${LD_RUN_PATH}
    - LIBRARY_PATH=${BISON_HOME}/lib:${LIBRARY_PATH}
    - CPATH=${BISON_HOME}/include:${CPATH}
    - C_INCLUDE_PATH=${BISON_HOME}/include:${C_INCLUDE_PATH}
    - INCLUDE_PATH=${BISON_HOME}/include:${INCLUDE_PATH}
    - CPLUS_INCLUDE_PATH=${BISON_HOME}/include:${CPLUS_INCLUDE_PATH}
    - INCLUDE=${BISON_HOME}/include:${INCLUDE}
    - FLEX_HOME=`pwd`/flex
      #- if [ ! -d "${FLEX_HOME}" ]; then sh ./get_flex.sh; fi
    - PATH=${FLEX_HOME}/bin:${PATH}
    - LD_LIBRARY_PATH=${FLEX_HOME}/lib:${LD_LIBRARY_PATH}
    - LD_RUN_PATH=${FLEX_HOME}/lib:${LD_RUN_PATH}
    - LIBRARY_PATH=${FLEX_HOME}/lib:${LIBRARY_PATH}
    - CPATH=${FLEX_HOME}/include:${CPATH}
    - C_INCLUDE_PATH=${FLEX_HOME}/include:${C_INCLUDE_PATH}
    - INCLUDE_PATH=${FLEX_HOME}/include:${INCLUDE_PATH}
    - CPLUS_INCLUDE_PATH=${FLEX_HOME}/include:${CPLUS_INCLUDE_PATH}
    - INCLUDE=${FLEX_HOME}/include:${INCLUDE}
    #- secure: "jV9WdgzDemtQaw83SwFKbDfc1/5BPE4DGQGrrwHRIHCqw9NzCULGEi9CL41hWIBv9zHjX/zpAJzqKQUsZusEjsmud4pg5Gu6I2OA3KLFurG11+Bipcs9f4MUnLwa4dhIHrIColYy4ul4QYiCGUaNr12Idj+mELUzo79Sc3a/k3MOq+J01QvNKVrpUCn+MZMR1gHepZSMqxJw5/QE+6crN7WDOqv3D6ZlYQvha2ZDKzJjBQ9nVe4NNCrK8qrwWKkSwi8cPEPUCEQogn7AO4OO4M4crJ6PdhNo+I2N/u7PIgA9UoyV4gpJSJaHI3DSOuXMp4U48g9s2eccbuJGFF3deJ5SWUYm4Y2ZPfK/PN5+dYR7w3vgu8IUVW8A/ac+Bez0ABiuSVJDCqCwu2KtjD3sL910aHmfXsZS09Vhws+xLkWpSev7v1TKCPQdD2CbmnEIkJMQ7NJdRrpn79O/F0nzYmP4XylfG3M2AuHsmVF95ZtgAMkAir/0ou789xNIsknl79SyFQRgeLdBbsjVrDPfAliTmNOH1tLLX+n4ezy6sZQFSPXL+HoJ843sSv+1ZsFjBPc5I6h7qhXTpV26xl/Fuy9SNZFT+e5khd7N3QKD6YaYND/2mJ2LfH3FBtjRpl5FAAFIJRsgehX+3MREy3iYR3cx4jIyrmNQt1f2sOaDsA8="

addons:
  apt:
    sources:
    - ubuntu-toolchain-r-test
    - ppa:graphics-drivers/ppa
      #- llvm-toolchain-precise-3.8
    packages:
    - g++-6
    - ubuntu-drivers-common
    - libblas-dev 
    - libblas3
    - liblapack-dev
    - liblapack3
    - libopenblas-dev
    - libopenblas-base
    - gfortran
      #- nvidia-415
      #- clang-3.8
#install:
#- "[ $CXX = g++ ] && export CXX=g++-6 || true"
  ##- "[ $CXX = clang++ ] && export CXX=clang++-3.8 || true"

cache:
  directories:
  #- mpich
  - ompi
  - flex
  - bison
  #- suitesparse
    #- /usr/local/cuda-${CUDA_SHORT}

jobs:
  include:
    ############################
    #       Set up cache       #
    ############################
    - stage: precache
      script: true
      name: "Installing dependencies..."
      install:
        - CUDA_HOME=/usr/local/cuda-${CUDA_SHORT}
        - |
          if [ ! -d "${CUDA_HOME}" ]; then
          INSTALLER=cuda-repo-${UBUNTU_VERSION}_${CUDA}_amd64.deb
          wget http://developer.download.nvidia.com/compute/cuda/repos/${UBUNTU_VERSION}/x86_64/${INSTALLER}
          sudo dpkg -i ${INSTALLER}
          wget https://developer.download.nvidia.com/compute/cuda/repos/${UBUNTU_VERSION}/x86_64/7fa2af80.pub
          sudo apt-key add 7fa2af80.pub
          sudo apt update -qq
          sudo apt install -y cuda-core-${CUDA_APT} cuda-cudart-dev-${CUDA_APT} cuda-cufft-dev-${CUDA_APT}
          sudo apt clean
          fi
        - sudo ln -s ${CUDA_HOME} /usr/local/cuda
        - LD_LIBRARY_PATH=${CUDA_HOME}/lib64:${LD_LIBRARY_PATH}
        - PATH=${CUDA_HOME}/bin:${PATH}
        - sh ./get_ompi.sh > /dev/null
        - sh ./get_bison.sh > /dev/null
        - sh ./get_flex.sh > /dev/null
          #- go get github.com/golang/dep/cmd/dep
          #- dep ensure              # cache vendor
          #- make testdaemon-image   # cache images
          #- make web-deps           # cache node_modules
    - &shared 
      stage: MGS 
      before_install:
        - CUDA_HOME=/usr/local/cuda-${CUDA_SHORT}
        - |
          if [ ! -d "${CUDA_HOME}" ]; then
          INSTALLER=cuda-repo-${UBUNTU_VERSION}_${CUDA}_amd64.deb
          wget http://developer.download.nvidia.com/compute/cuda/repos/${UBUNTU_VERSION}/x86_64/${INSTALLER}
          sudo dpkg -i ${INSTALLER}
          wget https://developer.download.nvidia.com/compute/cuda/repos/${UBUNTU_VERSION}/x86_64/7fa2af80.pub
          sudo apt-key add 7fa2af80.pub
          sudo apt update -qq
          sudo apt install -y cuda-core-${CUDA_APT} cuda-cudart-dev-${CUDA_APT} cuda-cufft-dev-${CUDA_APT}
          sudo apt clean
          fi
        - sudo ln -s ${CUDA_HOME} /usr/local/cuda
        - LD_LIBRARY_PATH=${CUDA_HOME}/lib64:${LD_LIBRARY_PATH}
        - PATH=${CUDA_HOME}/bin:${PATH}
          #  - wget https://github.com/ninja-build/ninja/releases/download/v1.9.0/ninja-linux.zip
          #- unzip ninja-linux.zip
        - PATH=${PATH}:${PWD}
          #- ubuntu-drivers list
          #- sh ./get_cuda.sh
        - pip install --trusted-host pypi.python.org -r requirements.txt --user
        - |
          if [ "$BUILD_SYSTEM" == "--as-NTS-NVU" ]; then 
          export SUITESPARSE_HOME=`pwd`/suitesparse
          export SUITESPARSE=`pwd`/suitesparse
          export PATH=${SUITESPARSE_HOME}/bin:${PATH}
          export LD_LIBRARY_PATH=${SUITESPARSE_HOME}/lib:${LD_LIBRARY_PATH}
          export LD_RUN_PATH=${SUITESPARSE_HOME}/lib:${LD_RUN_PATH}
          export LIBRARY_PATH=${SUITESPARSE_HOME}/lib:${LIBRARY_PATH}
          export CPATH=${SUITESPARSE_HOME}/include:${CPATH}
          export C_INCLUDE_PATH=${SUITESPARSE_HOME}/include:${C_INCLUDE_PATH}
          export INCLUDE_PATH=${SUITESPARSE_HOME}/include:${INCLUDE_PATH}
          export CPLUS_INCLUDE_PATH=${SUITESPARSE_HOME}/include:${CPLUS_INCLUDE_PATH}
          export INCLUDE=${SUITESPARSE_HOME}/include:${INCLUDE}
          fi
        - echo "Testing Docker Hub credentials"
          #- docker login -e=$DOCKER_EMAIL -u=$DOCKER_USERNAME -p=$DOCKER_PASSWORD
        - echo "Docker Hub credentials are working"
          #- docker build -t build-springxd-base .
      script:
        - echo "$BUILD_SYSTEM"
        - source set_env
        - source set_env
        - ./build_script -p LINUX $BUILD_SYSTEM --rebuild > /dev/null
    - stage: MGS 
      <<: *test
      script:
        - echo "$BUILD_SYSTEM"
        - source set_env
        - source set_env
        - ./build_script -p LINUX $BUILD_SYSTEM --rebuild > /dev/null
          #script:
          #  - docker ps -a
          #      #if: branch = master
          #      if: branch = for_nvu 
          #      name: "Installing dependencies..."
          #      #script: npm install
          #      script: 
          #        - source set_env
          #        - source set_env
          #        - ./build_script -p LINUX --as-MGS --rebuild > /dev/null
          #    - stage: NGS 
          #      #if: branch = master
          #      if: branch = for_nvu 
          #      skip_cleanup: true
          #      name: "Building app..."
          #      #script: npm run-script build
          #      script: 
          #      - echo "NGS build TUAN"
          #        - source set_env
          #        - source set_env
          #        - ./build_script -p LINUX --as-MGS --rebuild > /dev/null
          #    - stage: NTS 
          #      #if: branch = master
          #      if: branch = for_nvu 
          #      #skip_cleanup: true
          #      #name: "Shipping..."
          #      #script: npm run-script deploy
          #      script: 
          #      - echo "NTS build TUAN"
          #        - source set_env
          #        - source set_env
          #        - ./build_script -p LINUX --as-MGS --rebuild > /dev/null
          #    - stage: NTSNVU 
          #      #if: branch = master
          #      if: branch = for_nvu 
          #      #skip_cleanup: true
          #      #name: "Shipping..."
          #      #script: npm run-script deploy
          #      script: 
          #      - echo "NTS-NVU build TUAN"
          #- sh ./get_suitesparse.sh 
          #        - source set_env
          #        - source set_env
          #        - ./build_script -p LINUX --as-MGS --rebuild > /dev/null
    - stage: deploy
      after_success:
        - echo "Test Success - Branch($TRAVIS_BRANCH) Pull Request($TRAVIS_PULL_REQUEST) Tag($TRAVIS_TAG)"
          #  - if [[ "$TRAVIS_BRANCH" == "master" ]]; then echo -e "Push Container to Docker Hub"; fi
          #  - docker login -e=$DOCKER_EMAIL -u=$DOCKER_USERNAME -p=$DOCKER_PASSWORD
          #  - export REPO=jayjohnson/springxd-base
          #  - export TAG=`if [ "$TRAVIS_BRANCH" == "master" ]; then echo "latest"; else echo $TRAVIS_BRANCH ; fi`
          #  - docker build -f Dockerfile -t $REPO:$COMMIT .
          #  - docker tag $REPO:$COMMIT $REPO:$TAG
          #  - docker tag $REPO:$COMMIT $REPO:travis-$TRAVIS_BUILD_NUMBER
              #  - docker push $REPO

#stages:
  #- precache 
  #- test
  #- compile
  #- deploy

#matrix:
  #include:
    #- name: MGS
      #env:
      #- CUDA=9.2.148-1
      #- CUDA_SHORT=9.2
      #- CUDA_APT=9-2
      #- UBUNTU_VERSION=ubuntu1604
      #- BUILD_SYSTEM=--as-MGS
    #- name: NGS
      #env:
      #- CUDA=9.2.148-1
      #- CUDA_SHORT=9.2
      #- CUDA_APT=9-2
      #- UBUNTU_VERSION=ubuntu1604
      #- BUILD_SYSTEM=--as-NGS
    #- name: NTS
      #env:
      #- CUDA=9.2.148-1
      #- CUDA_SHORT=9.2
      #- CUDA_APT=9-2
      #- UBUNTU_VERSION=ubuntu1604
      #- BUILD_SYSTEM=--as-NTS
    #- name: NTS-NVU
      #env:
      #- CUDA=9.2.148-1
      #- CUDA_SHORT=9.2
      #- CUDA_APT=9-2
      #- UBUNTU_VERSION=ubuntu1604
      #- BUILD_SYSTEM=--as-NTS-NVU
    #- name: CUDA 8
    #  env:
    #  - CUDA=8.0.61-1
    #  - CUDA_SHORT=8.0
    #  - CUDA_APT=8-0
    #  - UBUNTU_VERSION=ubuntu1604
    #  dist: xenial
    #- name: CUDA 9
    #  env:
    #  - CUDA=9.2.148-1
    #  - CUDA_SHORT=9.2
    #  - CUDA_APT=9-2
    #  - UBUNTU_VERSION=ubuntu1604
    #  dist: xenial
      #- name: CUDA 10
      #- env:
      #- - CUDA=10.1.105-1
      #- - CUDA_APT=10-1
      #- - CUDA_SHORT=10.1
      #- - UBUNTU_VERSION=ubuntu1804
      #- dist: bionic
