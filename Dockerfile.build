# 
# HPC Base image
# Contents:
#   Ubuntu 16.04
#   CUDA version 10.0
#   FFTW version 3.3.8
#   GNU compilers (upstream)
#   HDF5 version 1.10.4
#   Mellanox OFED version 3.4-1.0.0.0
#   OpenMPI version 3.1.2
#   Python 2 and 3 (upstream)
#   vim
#   cgdb 0.7.1 (cgdb-cuda)
#   diffutil 3.7
# 

FROM nvidia/cuda:10.0-devel-ubuntu16.04 AS devel-base

LABEL maintainer="tmhoangt@us.ibm.com"
# Python
RUN apt-get update -y && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        python \
        python3 && \
    rm -rf /var/lib/apt/lists/*

# GNU compiler
RUN apt-get update -y && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        g++ \
        gcc \
        gfortran && \
    rm -rf /var/lib/apt/lists/*

# Mellanox OFED 
RUN apt-get update -y && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        libnl-3-200 \
        libnl-route-3-200 \
        libnuma1 \
        wget && \
    rm -rf /var/lib/apt/lists/*
RUN mkdir -p /var/tmp && wget -q -nc --no-check-certificate -P /var/tmp http://content.mellanox.com/ofed/MLNX_OFED-3.4-1.0.0.0/MLNX_OFED_LINUX-3.4-1.0.0.0-ubuntu16.04-x86_64.tgz && \
    mkdir -p /var/tmp && tar -x -f /var/tmp/MLNX_OFED_LINUX-3.4-1.0.0.0-ubuntu16.04-x86_64.tgz -C /var/tmp -z && \
    dpkg --install /var/tmp/MLNX_OFED_LINUX-3.4-1.0.0.0-ubuntu16.04-x86_64/DEBS/libibverbs1_*_amd64.deb /var/tmp/MLNX_OFED_LINUX-3.4-1.0.0.0-ubuntu16.04-x86_64/DEBS/libibverbs-dev_*_amd64.deb /var/tmp/MLNX_OFED_LINUX-3.4-1.0.0.0-ubuntu16.04-x86_64/DEBS/ibverbs-utils_*_amd64.deb /var/tmp/MLNX_OFED_LINUX-3.4-1.0.0.0-ubuntu16.04-x86_64/DEBS/libibmad_*_amd64.deb /var/tmp/MLNX_OFED_LINUX-3.4-1.0.0.0-ubuntu16.04-x86_64/DEBS/libibmad-devel_*_amd64.deb /var/tmp/MLNX_OFED_LINUX-3.4-1.0.0.0-ubuntu16.04-x86_64/DEBS/libibumad_*_amd64.deb /var/tmp/MLNX_OFED_LINUX-3.4-1.0.0.0-ubuntu16.04-x86_64/DEBS/libibumad-devel_*_amd64.deb /var/tmp/MLNX_OFED_LINUX-3.4-1.0.0.0-ubuntu16.04-x86_64/DEBS/libmlx4-1_*_amd64.deb /var/tmp/MLNX_OFED_LINUX-3.4-1.0.0.0-ubuntu16.04-x86_64/DEBS/libmlx4-dev_*_amd64.deb /var/tmp/MLNX_OFED_LINUX-3.4-1.0.0.0-ubuntu16.04-x86_64/DEBS/libmlx5-1_*_amd64.deb /var/tmp/MLNX_OFED_LINUX-3.4-1.0.0.0-ubuntu16.04-x86_64/DEBS/libmlx5-dev_*_amd64.deb /var/tmp/MLNX_OFED_LINUX-3.4-1.0.0.0-ubuntu16.04-x86_64/DEBS/librdmacm-dev_*_amd64.deb /var/tmp/MLNX_OFED_LINUX-3.4-1.0.0.0-ubuntu16.04-x86_64/DEBS/librdmacm1_*_amd64.deb && \
    rm -rf /var/tmp/MLNX_OFED_LINUX-3.4-1.0.0.0-ubuntu16.04-x86_64.tgz /var/tmp/MLNX_OFED_LINUX-3.4-1.0.0.0-ubuntu16.04-x86_64

# OpenMPI version 3.1.2
RUN apt-get update -y && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        bzip2 \
        file \
        hwloc \
        libnuma-dev \
        make \
        openssh-client \
        perl \
        tar \
        wget && \
    rm -rf /var/lib/apt/lists/*
RUN mkdir -p /var/tmp && wget -q -nc --no-check-certificate -P /var/tmp https://www.open-mpi.org/software/ompi/v3.1/downloads/openmpi-3.1.2.tar.bz2 && \
    mkdir -p /var/tmp && tar -x -f /var/tmp/openmpi-3.1.2.tar.bz2 -C /var/tmp -j && \
    cd /var/tmp/openmpi-3.1.2 &&  CC=gcc CXX=g++ F77=gfortran F90=gfortran FC=gfortran ./configure --prefix=/usr/local/openmpi --disable-getpwuid --enable-orterun-prefix-by-default --with-cuda --with-verbs --enable-mpi-cxx && \
    make -j$(nproc) && \
    make -j$(nproc) install && \
    rm -rf /var/tmp/openmpi-3.1.2.tar.bz2 /var/tmp/openmpi-3.1.2
ENV LD_LIBRARY_PATH=/usr/local/openmpi/lib:$LD_LIBRARY_PATH \
    PATH=/usr/local/openmpi/bin:$PATH

# HDF5 version 1.10.4
RUN apt-get update -y && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        bzip2 \
        file \
        make \
        wget \
        zlib1g-dev && \
    rm -rf /var/lib/apt/lists/*
RUN mkdir -p /var/tmp && wget -q -nc --no-check-certificate -P /var/tmp http://www.hdfgroup.org/ftp/HDF5/releases/hdf5-1.10/hdf5-1.10.4/src/hdf5-1.10.4.tar.bz2 && \
    mkdir -p /var/tmp && tar -x -f /var/tmp/hdf5-1.10.4.tar.bz2 -C /var/tmp -j && \
    cd /var/tmp/hdf5-1.10.4 &&  CC=gcc CXX=g++ F77=gfortran F90=gfortran FC=gfortran ./configure --prefix=/usr/local/hdf5 --enable-cxx --enable-fortran && \
    make -j$(nproc) && \
    make -j$(nproc) install && \
    rm -rf /var/tmp/hdf5-1.10.4.tar.bz2 /var/tmp/hdf5-1.10.4
ENV HDF5_DIR=/usr/local/hdf5 \
    LD_LIBRARY_PATH=/usr/local/hdf5/lib:$LD_LIBRARY_PATH \
    PATH=/usr/local/hdf5/bin:$PATH

RUN apt-get update -y && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        build-essential \
        gawk \
        git \
        gzip \
        libssl-dev \
        libtool \
        lmod \
        make \
        libgmp3-dev \
        m4 \
        openssh-client \
        patch \
        python-pip \
        python-setuptools \
        rsh-client \
        tar \
        unzip \
        wget \
        xz-utils && \
    rm -rf /var/lib/apt/lists/*
RUN apt-get update -y && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        locate \
        apt-utils && \
    rm -rf /var/lib/apt/lists/*
RUN apt-get update -y && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        python-dev \
        python3-dev \
        curl \
        libpython2.7 && \
    rm -rf /var/lib/apt/lists/*

RUN apt-get purge -y python.* && \
    echo "deb http://ppa.launchpad.net/fkrull/deadsnakes/ubuntu xenial main" >> /etc/apt/sources.list && \
    echo "deb-src http://ppa.launchpad.net/fkrull/deadsnakes/ubuntu xenial main" >> /etc/apt/sources.list && \
    apt-key adv --keyserver keyserver.ubuntu.com --recv-keys FF3997E83CD969B409FB24BC5BB92C09DB82666C && \
    apt-get update && \
    apt-get install -y python3-pip python3.6 python3.6-dev && \
    pip3 install --upgrade pip && \
    ln -s /usr/bin/python3.6 /usr/bin/python && \
    rm -rf /var/lib/apt/lists/*

ENV MGSROOT=/mgs
ENV PACKAGES_DIR=/usr/local
ENV TRAVIS_BUILD_DIR=$PACKAGES_DIR 
ENV BISON_HOME=${TRAVIS_BUILD_DIR}/bison 
ENV PATH=${BISON_HOME}/bin:${PATH} \
    LD_LIBRARY_PATH=${BISON_HOME}/lib:${LD_LIBRARY_PATH} \
    LD_RUN_PATH=${BISON_HOME}/lib:${LD_RUN_PATH} \
    LIBRARY_PATH=${BISON_HOME}/lib:${LIBRARY_PATH} \
    CPATH=${BISON_HOME}/include:${CPATH}
ENV FLEX_HOME=${TRAVIS_BUILD_DIR}/flex 
ENV PATH=${FLEX_HOME}/bin:${PATH} \
    LD_LIBRARY_PATH=${FLEX_HOME}/lib:${LD_LIBRARY_PATH} \
    LD_RUN_PATH=${FLEX_HOME}/lib:${LD_RUN_PATH} \
    LIBRARY_PATH=${FLEX_HOME}/lib:${LIBRARY_PATH} \
    CPATH=${FLEX_HOME}/include:${CPATH} \
    C_INCLUDE_PATH=${FLEX_HOME}/include:${C_INCLUDE_PATH} \
    INCLUDE_PATH=${FLEX_HOME}/include:${INCLUDE_PATH} \
    CPLUS_INCLUDE_PATH=${FLEX_HOME}/include:${CPLUS_INCLUDE_PATH} \
    INCLUDE=${FLEX_HOME}/include:${INCLUDE}
ENV PYTHON_INCLUDE_DIR=/usr/include/python3.6m/

RUN mkdir /home/app
ADD ./get_bison.sh /home/packages/
ADD ./get_flex.sh /home/packages/
WORKDIR /home/packages
RUN /bin/bash -c "source  ./get_bison.sh"
RUN /bin/bash -c "source  ./get_flex.sh"

RUN gpg --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4
RUN curl -o /usr/local/bin/gosu -SL "https://github.com/tianon/gosu/releases/download/1.4/gosu-$(dpkg --print-architecture)" \
    && curl -o /usr/local/bin/gosu.asc -SL "https://github.com/tianon/gosu/releases/download/1.4/gosu-$(dpkg --print-architecture).asc" \
    && gpg --verify /usr/local/bin/gosu.asc \
    && rm /usr/local/bin/gosu.asc \
    && chmod +x /usr/local/bin/gosu

ENV CUDA_HOME /usr/local/cuda
ENV PATH=${CUDA_HOME}/bin:${PATH} \
    LD_LIBRARY_PATH=${CUDA_HOME}/lib64:${LD_LIBRARY_PATH} \
    LD_RUN_PATH=${CUDA_HOME}/lib64:${LD_RUN_PATH} \
    LIBRARY_PATH=${CUDA_HOME}/lib64:${LIBRARY_PATH} \
    CPATH=${CUDA_HOME}/include:${CPATH} \
    C_INCLUDE_PATH=${CUDA_HOME}/include \
    CPLUS_INCLUDE_PATH=${CUDA_HOME}/include \
    INCLUDE=${CUDA_HOME}/include 
RUN ln -s $CUDA_HOME/lib64/stubs/libcuda.so $CUDA_HOME/lib64/stubs/libcuda.so.1

ENV MPI_HOME /usr/local/openmpi
ENV PATH=${MPI_HOME}/bin:${PATH} \
     LD_LIBRARY_PATH=${MPI_HOME}/lib:${LD_LIBRARY_PATH} \
     LD_RUN_PATH=${MPI_HOME}/lib:${LD_RUN_PATH} \
     LIBRARY_PATH=${MPI_HOME}/lib:${LIBRARY_PATH} \
     CPATH=${MPI_HOME}/include:${CPATH} \
     C_INCLUDE_PATH=${MPI_HOME}/include:${C_INCLUDE_PATH} \
     INCLUDE_PATH=${MPI_HOME}/include:${INCLUDE_PATH} \
     CPLUS_INCLUDE_PATH=${MPI_HOME}/include:${CPLUS_INCLUDE_PATH}

RUN apt-get update -y && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        bc \
        libc-dbg \
        gdb \
        gdbserver \
        nvidia-cuda-gdb \
        libreadline6-dev \
        texinfo \
        libncurses5-dev \
        cgdb && \
    rm -rf /var/lib/apt/lists/*

RUN VER=0.7.1 && FILENAME=cgdb-$VER && DIRNAME=$FILENAME && \
        echo "folder = $DIRNAME" && \
       wget "https://cgdb.me/files/${FILENAME}.tar.gz" && \
       tar -xvf ${FILENAME}.tar.gz && cd ${DIRNAME} && \
       ./configure --prefix=$TRAVIS_BUILD_DIR/cgdb-cuda && \
       grep -rl "const GDB" lib/util/ | xargs sed -i 's/"gdb"/"cuda-gdb"/g' && \
       make -j10 && make install && make clean && \
       rm -rf ${DIRNAME} && \
        cd $TRAVIS_BUILD_DIR/cgdb-cuda/bin && mv cgdb cgdb-cuda 

RUN VER=3.7 && DIRNAME=diffutils-$VER && FILENAME=${DIRNAME}.tar.xz && \
       wget "https://ftp.gnu.org/gnu/diffutils/${FILENAME}" && \
       tar -xvf ${FILENAME} && cd ${DIRNAME} && \
       ./configure  && \
       make -j10 && make install && make clean && \
       rm -rf ${DIRNAME}
ENV CGDB_HOME /usr/local/cgdb-cuda
ENV PATH=${CGDB_HOME}/bin:${PATH} 

#cuda-gdb only works on python2.7
ENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/lib/x86_64-linux-gnu
RUN apt-get update -y && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        python2.7 \
        python2.7-dev && \
    rm -rf /var/lib/apt/lists/*

RUN apt-get update -y --fix-missing && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        software-properties-common && \
    apt-add-repository -y  ppa:jonathonf/vim &&  \
    apt-get update -y &&  \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        nmap \
        vim && \
    rm -rf /var/lib/apt/lists/*
#RUN INSTALLER=cuda-repo-${UBUNTU_VERSION}_${CUDA}_amd64.deb && \
    #wget http://developer.download.nvidia.com/compute/cuda/repos/${UBUNTU_VERSION}/x86_64/${INSTALLER}
          #sudo dpkg -i ${INSTALLER}
          #wget https://developer.download.nvidia.com/compute/cuda/repos/${UBUNTU_VERSION}/x86_64/7fa2af80.pub
          #sudo apt-key add 7fa2af80.pub
          #sudo apt update -qq
          #sudo apt install -y cuda-core-${CUDA_APT} cuda-cudart-dev-${CUDA_APT} cuda-cufft-dev-${CUDA_APT}
          #sudo apt clean
          #fi

COPY entrypoint.sh /usr/local/bin/entrypoint.sh
RUN chmod +x /usr/local/bin/entrypoint.sh

ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]

VOLUME /home/mgs
WORKDIR /home/mgs
#RUN useradd mgs 
#USER mgs

########################################
# Make build image
########################################
# FROM devel-base as devel
# 
# #RUN useradd mgs 
# #USER mgs
# ADD . $MGSROOT
# WORKDIR /mgs
# 
# ENV PYTHON_LIB=/usr/lib/python2.7/config-x86_64-linux-gnu/
# ENV LD_LIBRARY_PATH=${PYTHON_LIB}:$LD_LIBRARY_PATH \
#     LD_RUN_PATH=${PYTHON_LIB}:${LD_RUN_PATH} \
#     LIBRARY_PATH=${PYTHON_LIB}:${LIBRARY_PATH}
# 
# COPY --from=mgs_baseimage /mgs/gsl/obj /mgs/gsl/obj
# COPY --from=mgs_baseimage /mgs/common/obj /mgs/common/obj
# COPY --from=mgs_baseimage /mgs/nti/obj /mgs/nti/obj
# COPY --from=mgs_baseimage /mgs/nti/include/Model2Use.h /mgs/nti/include/
# COPY --from=mgs_baseimage /mgs/.built /mgs/
# #ENV GPU="--gpu"
# RUN /bin/bash -c  "source ./set_env && source ./set_env && ./build_script -p LINUX --release ${GPU} -c common"
# RUN /bin/bash -c  "source ./set_env && source ./set_env && ./build_script -p LINUX --release ${GPU} -c nti"
# RUN /bin/bash -c  "source ./set_env && source ./set_env && ./build_script -p LINUX --release ${GPU} -c gsl"
# #RUN /bin/bash -c  "source ./set_env && source ./set_env && ./build_script -p LINUX --release"
# #RUN cd /mgs; source ./set_env; source  ./get_bison.sh
# #RUN cd /mgs; source ./set_env; ./build_script -p LINUX
# #RUN ["/bin/bash", "-c", "echo hello all in one string"].
# #RUN echo "source ~/google-cloud-sdk/path.bash.inc" >> ~/.bashrc
# #RUN source ~/.bashrc

########################################
# Make runtime image
########################################
#FROM nvidia/cuda:9.0-runtime-ubuntu16.04
#FROM nvidia/cuda:10.0-runtime-ubuntu16.04
FROM nvidia/cuda:10.0-base-ubuntu18.04 AS runtime

# Python
RUN apt-get update -y && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    python \
    curl \
    python3 && \
    rm -rf /var/lib/apt/lists/*

# GNU compiler runtime
RUN apt-get update -y && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    libgfortran3 \
    libgomp1 && \
    rm -rf /var/lib/apt/lists/*

# Mellanox OFED version 3.4-1.0.0.0
RUN apt-get update -y && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    libnl-3-200 \
    libnl-route-3-200 \
    libnuma1 \
    wget && \
    rm -rf /var/lib/apt/lists/*
RUN mkdir -p /var/tmp && wget -q -nc --no-check-certificate -P /var/tmp http://content.mellanox.com/ofed/MLNX_OFED-3.4-1.0.0.0/MLNX_OFED_LINUX-3.4-1.0.0.0-ubuntu16.04-x86_64.tgz && \
    mkdir -p /var/tmp && tar -x -f /var/tmp/MLNX_OFED_LINUX-3.4-1.0.0.0-ubuntu16.04-x86_64.tgz -C /var/tmp -z && \
    dpkg --install /var/tmp/MLNX_OFED_LINUX-3.4-1.0.0.0-ubuntu16.04-x86_64/DEBS/libibverbs1_*_amd64.deb /var/tmp/MLNX_OFED_LINUX-3.4-1.0.0.0-ubuntu16.04-x86_64/DEBS/libibverbs-dev_*_amd64.deb /var/tmp/MLNX_OFED_LINUX-3.4-1.0.0.0-ubuntu16.04-x86_64/DEBS/ibverbs-utils_*_amd64.deb /var/tmp/MLNX_OFED_LINUX-3.4-1.0.0.0-ubuntu16.04-x86_64/DEBS/libibmad_*_amd64.deb /var/tmp/MLNX_OFED_LINUX-3.4-1.0.0.0-ubuntu16.04-x86_64/DEBS/libibmad-devel_*_amd64.deb /var/tmp/MLNX_OFED_LINUX-3.4-1.0.0.0-ubuntu16.04-x86_64/DEBS/libibumad_*_amd64.deb /var/tmp/MLNX_OFED_LINUX-3.4-1.0.0.0-ubuntu16.04-x86_64/DEBS/libibumad-devel_*_amd64.deb /var/tmp/MLNX_OFED_LINUX-3.4-1.0.0.0-ubuntu16.04-x86_64/DEBS/libmlx4-1_*_amd64.deb /var/tmp/MLNX_OFED_LINUX-3.4-1.0.0.0-ubuntu16.04-x86_64/DEBS/libmlx4-dev_*_amd64.deb /var/tmp/MLNX_OFED_LINUX-3.4-1.0.0.0-ubuntu16.04-x86_64/DEBS/libmlx5-1_*_amd64.deb /var/tmp/MLNX_OFED_LINUX-3.4-1.0.0.0-ubuntu16.04-x86_64/DEBS/libmlx5-dev_*_amd64.deb /var/tmp/MLNX_OFED_LINUX-3.4-1.0.0.0-ubuntu16.04-x86_64/DEBS/librdmacm-dev_*_amd64.deb /var/tmp/MLNX_OFED_LINUX-3.4-1.0.0.0-ubuntu16.04-x86_64/DEBS/librdmacm1_*_amd64.deb && \
    rm -rf /var/tmp/MLNX_OFED_LINUX-3.4-1.0.0.0-ubuntu16.04-x86_64.tgz /var/tmp/MLNX_OFED_LINUX-3.4-1.0.0.0-ubuntu16.04-x86_64

# OpenMPI
RUN apt-get update -y && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    hwloc \
    openssh-client && \
    rm -rf /var/lib/apt/lists/*
COPY --from=mgs_baseimage /usr/local/openmpi /usr/local/openmpi
ENV LD_LIBRARY_PATH=/usr/local/openmpi/lib:$LD_LIBRARY_PATH \
PATH=/usr/local/openmpi/bin:$PATH

# HDF5
# RUN apt-get update -y && \
# DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
# zlib1g && \
# rm -rf /var/lib/apt/lists/*
# COPY --from=mgs_baseimage /usr/local/hdf5 /usr/local/hdf5
# ENV HDF5_DIR=/usr/local/hdf5 \
# LD_LIBRARY_PATH=/usr/local/hdf5/lib:$LD_LIBRARY_PATH \
# PATH=/usr/local/hdf5/bin:$PATH

RUN for server in ha.pool.sks-keyservers.net \
              hkp://p80.pool.sks-keyservers.net:80 \
              keyserver.ubuntu.com \
              hkp://keyserver.ubuntu.com:80 \
              pgp.mit.edu; do \
    gpg --keyserver "$server" --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 && break || echo "Trying new server..."; done
RUN curl -o /usr/local/bin/gosu -SL "https://github.com/tianon/gosu/releases/download/1.7/gosu-$(dpkg --print-architecture)" \
    && curl -o /usr/local/bin/gosu.asc -SL "https://github.com/tianon/gosu/releases/download/1.7/gosu-$(dpkg --print-architecture).asc" \
    && gpg --verify /usr/local/bin/gosu.asc \
    && rm /usr/local/bin/gosu.asc \
    && chmod +x /usr/local/bin/gosu

# GNU compiler
RUN apt-get update -y && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        gcc  \
        zlib1g && \
    rm -rf /var/lib/apt/lists/*

ENV CUDA_HOME /usr/local/cuda
ENV PATH=${CUDA_HOME}/bin:${PATH} \
    LD_LIBRARY_PATH=${CUDA_HOME}/lib64:${LD_LIBRARY_PATH} \
    LD_RUN_PATH=${CUDA_HOME}/lib64:${LD_RUN_PATH} \
    LIBRARY_PATH=${CUDA_HOME}/lib64:${LIBRARY_PATH} \
    CPATH=${CUDA_HOME}/include:${CPATH} \
    C_INCLUDE_PATH=${CUDA_HOME}/include \
    CPLUS_INCLUDE_PATH=${CUDA_HOME}/include \
    INCLUDE=${CUDA_HOME}/include 

ENV MPI_HOME /usr/local/openmpi
ENV PATH=${MPI_HOME}/bin:${PATH} \
    LD_LIBRARY_PATH=${MPI_HOME}/lib:${LD_LIBRARY_PATH} \
    LD_RUN_PATH=${MPI_HOME}/lib:${LD_RUN_PATH} \
    LIBRARY_PATH=${MPI_HOME}/lib:${LIBRARY_PATH} \
    CPATH=${MPI_HOME}/include:${CPATH} \
    C_INCLUDE_PATH=${MPI_HOME}/include:${C_INCLUDE_PATH} \
    INCLUDE_PATH=${MPI_HOME}/include:${INCLUDE_PATH} \
    CPLUS_INCLUDE_PATH=${MPI_HOME}/include:${CPLUS_INCLUDE_PATH}

COPY --from=mgs_baseimage $CUDA_HOME/lib64/stubs/libcuda.so $CUDA_HOME/lib64/
RUN ln -s $CUDA_HOME/lib64/libcuda.so $CUDA_HOME/lib64/libcuda.so.1

ENV OMPI_MCA_btl_base_warn_component_unused 0 
ENV PATH=/mgs/:$PATH

COPY entrypoint.sh /usr/local/bin/entrypoint.sh
RUN chmod +x /usr/local/bin/entrypoint.sh
VOLUME /home/mgs
WORKDIR /home/mgs
# MGS binary
COPY ./gsl/bin/gslparser /mgs/
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]
#ENTRYPOINT ["/mgs/gsl/bin/gslparser"]
