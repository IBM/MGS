#!/bin/bash
## NOTE: This script is used to build GSL separately

#Escape code
esc=`echo -en "\033"`

# Set colors
#{{{
cc_red="${esc}[0;31m"
cc_green="${esc}[0;32m"
cc_yellow="${esc}[0;33m"
cc_blue="${esc}[0;34m"
cc_normal=`echo -en "${esc}[m\017"`
#}}}

function contains() {
  #{{{
  local n=$#
  local value=${!n}
  for ((i=1;i < $#;i++)) {
    if [ "${!i}" == "${value}"  ]; then
      echo "y"
      return 0
    fi

  }
  echo "n"
  return 1
  #}}}
}

function createMakeFile(){
  #{{{
    EXTRA_ARGS="${COLAB} ${BUILD_TARGET}"
    ## detect if -release is used for optimization and debugging options
    if [ "$RELEASE" == "-release" ]; then
      ## detect if building as NTS, MGS, or both
      ./configure.py --O3 $PLATFORM_OPTS ${EXTRA_ARGS}
    else
      ./configure.py --Og --debug ${DEBUGMACROS} $PLATFORM_OPTS ${EXTRA_ARGS}
    fi
  #}}}
}

SUPPORTED_PLATFORMS="LINUX BGL BGP BGQ SMP"

#########################################
#   PRINT HELP
#{{{
function print_help {
  echo "SYNTAX: $0 
  -p <$SUPPORTED_PLATFORMS>    [default: LINUX]
  [--clean | --rebuild | --regen]
  --regen               regenerate Makefile (gsl/Makefile)
  -j <n>                with <n> is num-processes [default: 2/3 total cores]
  -r|--release|<empty>  [default: (empty)]
  -d 1                  [default: debug_assert]
  -d 2                  [debug_hh] --> print debugs for Initialize() methods
  -d 3                  [debug_in_loops] --> print debugs inside Loops
  -d 4                  [debug_cpts] --> print compartmental information 

  --gpu                 build/configure with GPU extensions
  --arma                build/configure with Armadillo extensions

  --release:            to build in release mode [default: debug mode]
  --loglevel 1:         debug with debug_assert and debug_hh for initialize methods
  --loglevel 2:         debug with debug_assert and debug_hh and print out debug for loops

  PREDEFINED TARGETS:
  --as-Nts              build NTS
  --as-Nts-NVU          build NTS+NVU
  --as-IBEx             build IBEx

  --colab:              build/configure shared libraries for colaborator's use
  "
  echo "NOTE: [] (optional), <> (required)"
  echo "NOTE: choose one value inside < >"
  exit;
}

if [ "$1" == "--help" ] || [ "$1" == "-h" ] || [ "$1" == "" ]; then 
  print_help
fi
#}}}

##########################################
## Detect what options for compilation
#{{{
PLATFORM="LINUX"
CLEAN=""
REBUILD=""
GSL_BUILD_MODE=""
RELEASE=""
GPU=""
ARMA=""
BUILD_TARGET=""
COLAB=""
REGENMAKEFILE=""
DEBUGOPTS="1"
NPROCS=$((`cat /proc/cpuinfo | grep processor | wc -l`))
if [ "$#" -gt 2 ] ; then
	NPROCS=$3
fi

optspec=":d:p:sr-:j:"
while getopts "$optspec" optchar; do
  case $optchar in
    p)
      echo "Platform: $OPTARG" >&2
      PLATFORM=$OPTARG
      ;;
    j)
      echo "Num-processes: $OPTARG"
      NPROCS=$OPTARG
      ;;
    s)
      NPROCS=1
      ;;
    r) # release
      RELEASE="-release"
      ;;
    d) # log options
      DEBUGOPTS+=("$OPTARG")
      ;;
    -)  #parse long-option
      case "${OPTARG}" in
          clean)
              CLEAN="-clean"
              ;;
          rebuild)
              REBUILD="-rebuild"
              ;;
          regen)
              REGENMAKEFILE="-regen"
              ;;
          singlethread)
              NPROCS=1
              ;;
          release) # release
              RELEASE="-release"
              ;;
          gpu) # GPU extensions
              GPU="-gpu"
              ;;
          arma) # Armadillo extensions
              ARMA="-arma"
              ;;
          colab) # collaboration's use 
              COLAB="--colab"
              ;;
          loglevel=*)
            val=${OPTARG#*=}
            opt=${OPTARG%=$val}
            ;;
          loglevel)
            val="${!OPTIND}"
            GSL_BUILD_MODE="-log$val" 
            case $GSL_BUILD_MODE in 
              -log1 )
                DEBUGOPTS+=("1" "2")
                ;;
              -log2 )
                DEBUGOPTS+=("1" "2" "3")
                ;;
            esac
            ;;
          as-Nts)
            BUILD_TARGET="--as-Nts"
            ;;
          as-Nts-NVU)
            BUILD_TARGET="--as-Nts-NVU"
            EXTRA_LIBS+=" USE_SUITESPARSE=1"
            ;;
          as-IBEx)
            BUILD_TARGET="--as-IBEx"
            ;;
          as-Mgs) # as MGS
            BUILD_TARGET="-as-Mgs"
            ;;
          someloglevel)
            val="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
            echo "parsing option: '--${OPTARG}', value: '${val}'" >&2;
            ;;
          =*)
              val=${OPTARG#*=}
              opt=${OPTARG%=$val}
              echo "parsing option: '--${opt}', value: '${val}'" >&2
              ;;
          *)
              if [ "$OPTERR" = 1 ] && [ "${optspec:0:1}" != ":" ]; then
                  echo "unknown option --${OPTARG}" >&2
              fi
              ;;
      esac;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
    # TODO: remove?
#    :)
#      echo "Option -$OPTARG requires an argument." >&2
#      exit 1
#      ;;
  esac
done
[[ $SUPPORTED_PLATFORMS =~ (^|[[:space:]])"$PLATFORM"($|[[:space:]]) ]] && : || { echo "wrong-platform $PLATFORM"; print_help; exit; }

PLATFORM_OPTS="--domainLib  "
case $PLATFORM in
  LINUX )
    PLATFORM_OPTS+="--with-mpi --nowarning_dynamiccast"
    ;;
  SMP )
    PLATFORM_OPTS+=""
    ;;
  BGL )
    PLATFORM_OPTS+=" --blueGeneL "
    ;;
  BGP )
    PLATFORM_OPTS+=" --blueGeneP "
    ;;
  BGQ )
    PLATFORM_OPTS+=" --blueGeneQ "
    ;;
esac

if [ "$GPU" == "-gpu" ]; then
    PLATFORM_OPTS+=" --with-gpu "
fi

if [ "$ARMA" == "-arma" ]; then
    PLATFORM_OPTS+=" --with-arma "
fi

DEBUGMACROS="--debug_assert "
for val in "${DEBUGOPTS[@]}"; do
  case $val in 
    1)
      # do nothing as it is already added
      #i.e. DEBUGMACROS="--debug_assert"
      ;;
    2)
      DEBUGMACROS+=" --debug_hh"
      ;;
    3)
      DEBUGMACROS+=" --debug_in_loops"
      ;;
    4)
      DEBUGMACROS+=" --debug_cpts"
      ;;
  esac
done
#}}}

CONTINUE=1
if [ "$REGENMAKEFILE" == "-regen" ]; then 
  #{{{
  echo "Regen Makefile"
  if [ -f Makefile ]; then 
    rm Makefile
  fi
  # Generate Makefile and make!
  createMakeFile
  CONTINUE=0
  #}}}
fi 
if [ $CONTINUE == 1 ]; then
  if [ "$CLEAN" == "-clean" ] || \
    [ "$REBUILD" == "-rebuild" ]; then \
    if [ "$CLEAN" == "-clean" ] ; then
      #{{{
      echo "clean-up GSL"
      if [ -f Makefile ]; then 
        make clean ${EXTRA_LIBS}
        rm Makefile
      else
        echo -e "${cc_red}No Makefile to clean ! ${cc_normal}\n";
      fi
      #}}}
    fi
    if [ "$REBUILD" == "-rebuild" ]; then \
      #{{{
    echo "Rebuild GSL"
    if [ -f Makefile ]; then 
      rm Makefile
    fi
    # Generate Makefile and make!
    createMakeFile
    make clean ${EXTRA_LIBS}
    if [ "$COLAB" == "--colab" ]; then 
      make -j $NPROCS library ${EXTRA_LIBS}
    fi
    make -j $NPROCS ${EXTRA_LIBS};
    #}}}
  fi
else
  if [ ! -f Makefile ]; then
    createMakeFile
  fi
  if [ "$COLAB" == "--colab" ]; then 
    make -j $NPROCS library ${EXTRA_LIBS}
  fi
  if [ $? -gt 0 ]; then
    echo -e "${cc_red}Build GSL library failed ! ${cc_normal}\n";
    exit 1;
  fi
  make -j $NPROCS ${EXTRA_LIBS};
fi

if [ "$CLEAN" != "-clean" ] && { [ $? -gt 0 ] || [ ! `ls $LENSROOT/bin/gslparser` ];}; then 
  echo -e "${cc_red}Build GSL failed ! ${cc_normal}\n";
  exit 1;
elif [ "$CLEAN" == "-clean" ]; then 
  echo -e "\n\n\n${cc_blue}You have removed GSL successful.${cc_normal}\n";
  if [ "$REBUILD" == "-rebuild" ] && { [ `ls $LENSROOT/bin/gslparser` ];}; then 
    echo -e "\n\n\n${cc_blue}Build GSL successful.${cc_normal}\n";
  fi
else
  echo -e "\n\n\n${cc_blue}Build GSL successful.${cc_normal}\n";
fi
fi
