#!/bin/bash
## NOTE: This script is used to build GSL separately

#Escape code
esc=`echo -en "\033"`

# Set colors
cc_red="${esc}[0;31m"
cc_green="${esc}[0;32m"
cc_yellow="${esc}[0;33m"
cc_blue="${esc}[0;34m"
cc_normal=`echo -en "${esc}[m\017"`

function contains() {
local n=$#
local value=${!n}
for ((i=1;i < $#;i++)) {
	if [ "${!i}" == "${value}"  ]; then
		echo "y"
		return 0
	fi

}
echo "n"
return 1

}

function createMakeFile(){
      if [ "$GSL_BUILD_MODE" == "-release" ]; then 
        ## detect if -release is used
        ./configure.py --O3 $DEBUGMACROS $PLATFORM_OPTS
      else
        ./configure.py --O --debug $DEBUGMACROS $PLATFORM_OPTS
      fi
}

SUPPORTED_PLATFORMS="LINUX BGL BGP BGQ SMP"
#########################################
#   PRINT HELP
#{{{
function print_help {
	echo "SYNTAX: $0 
  -p <$SUPPORTED_PLATFORMS>    [default: LINUX]
  [--clean | --rebuild | --remake]
  -j <n>                  with <n> is num-processes [default: 2/3 total cores]
  --release | <empty>   [default: (empty)]
  -d 1                 [default: debug_assert]
  -d 2                 [debug_hh] --> print debugs for Initialize() methods
  -d 3                 [debug_in_loops] --> print debugs inside Loops
  -d 4                 [debug_cpts] --> print compartmental information 
     	--release: O3 with debug_assert
     	--loglevel 1: debug with debug_assert and debug_hh for initialize methods
     	--loglevel 2: debug with debug_assert and debug_hh and print out debug for loops
  "
	echo "NOTE: [] (optional), <> (required)"
	echo "NOTE: choose one value inside < >"
	exit;
}

if [ "$1" == "--help" ] || [ "$1" == "-h" ]; then 
  print_help
fi
#}}}

##########################################
## Detect what options for compilation
#{{{
PLATFORM="LINUX"
CLEAN=""
REBUILD=""
REMAKE=""
GSL_BUILD_MODE=""
DEBUGOPTS="1"
NPROCS=$((`cat /proc/cpuinfo | grep processor | wc -l`))
if [ "$#" -gt 2 ] ; then
	NPROCS=$3
fi

optspec=":d:p:sr-:j:"
while getopts "$optspec" optchar; do
  case $optchar in
    p)
      echo "Platform: $OPTARG" >&2
      PLATFORM=$OPTARG
      ;;
    j)
      echo "Num-processes: $OPTARG"
      NPROCS=$OPTARG
      ;;
    s)
      NPROCS=1
      ;;
    r) # release
      GSL_BUILD_MODE="-release"
      ;;
    d) # log options
      DEBUGOPTS+=("$OPTARG")
      ;;
    -)  #parse long-option
      case "${OPTARG}" in
          clean)
              CLEAN="-clean"
              ;;
          rebuild)
              REBUILD="-rebuild"
              ;;
          remake)
              REMAKE="-remake"
              ;;
          singlethread)
              NPROCS=1
              ;;
          release) # release
            GSL_BUILD_MODE="-release"
            ;;
          loglevel=*)
            val=${OPTARG#*=}
            opt=${OPTARG%=$val}
            ;;
          loglevel)
            val="${!OPTIND}"
            GSL_BUILD_MODE="-log$val" 
            case $GSL_BUILD_MODE in 
              -log1 )
                DEBUGOPTS+=("1" "2")
                ;;
              -log2 )
                DEBUGOPTS+=("1" "2" "3")
                ;;
            esac
            ;;
          someloglevel)
              val="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
              echo "parsing option: '--${OPTARG}', value: '${val}'" >&2;
              ;;
          =*)
              val=${OPTARG#*=}
              opt=${OPTARG%=$val}
              echo "parsing option: '--${opt}', value: '${val}'" >&2
              ;;
          *)
              if [ "$OPTERR" = 1 ] && [ "${optspec:0:1}" != ":" ]; then
                  echo "unknown option --${OPTARG}" >&2
              fi
              ;;
      esac;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
#    :)
#      echo "Option -$OPTARG requires an argument." >&2
#      exit 1
#      ;;
  esac
done
[[ $SUPPORTED_PLATFORMS =~ (^|[[:space:]])"$PLATFORM"($|[[:space:]]) ]] && : || { echo "wrong-platform $PLATFORM"; print_help; exit; }

PLATFORM_OPTS="--domainLib  "
case $PLATFORM in
  LINUX )
    PLATFORM_OPTS+="--with-mpi "
	#if [ "$GSL_BUILD_MODE" == "-release" ]; then 
     PLATFORM_OPTS+=" --nowarning_dynamiccast "
    #fi
    ;;
  SMP )
    PLATFORM_OPTS+=""
    ;;
  BGL )
    PLATFORM_OPTS+=" --blueGeneL "
    ;;
  BGP )
    PLATFORM_OPTS+=" --blueGeneP "
    ;;
  BGQ )
    PLATFORM_OPTS+=" --blueGeneQ "
    ;;
esac

DEBUGMACROS="--debug_assert "
for val in "${DEBUGOPTS[@]}"; do
  case $val in 
    1)
      # do nothing as it is already added
      #i.e. DEBUGMACROS="--debug_assert"
      ;;
    2)
      DEBUGMACROS+=" --debug_hh"
      ;;
    3)
      DEBUGMACROS+=" --debug_in_loops"
      ;;
    4)
      DEBUGMACROS+=" --debug_cpts"
      ;;
  esac
done
#}}}


if [ "$CLEAN" == "-clean" ] || \
   ( [ "$REBUILD" == "-rebuild" ] || \
   [ "$REMAKE" == "-remake"  \
   ] ) ; then 
  if [ "$CLEAN" == "-clean" ] ; then
    echo "clean-up GSL"
    make clean
    rm Makefile
  fi
  if [ "$REBUILD" == "-rebuild" ] || \
    [ "$REMAKE" == "-remake" ] ; then 
    if [ "$REMAKE" != "-remake" ]; then
      echo "Rebuild GSL"
      make clean
      make -j $NPROCS;
    else
      rm Makefile
      # Generate Makefile
      createMakeFile
      echo "${cc_green}Recreate the Makefile only${cc_normal}"
    fi
  fi
else

  if [ ! -f Makefile ]; then
    createMakeFile
  fi
	make -j $NPROCS;
fi

if [ "$CLEAN" != "-clean" ] && { [ $? -gt 0 ] || [ ! `ls $LENSROOT/bin/gslparser` ];}; then 
  echo -e "${cc_red}Build GSL failed ! ${cc_normal}\n";
  exit; 
elif [ "$CLEAN" == "-clean" ]; then 
  echo -e "\n\n\n${cc_blue}You have removed GSL successful.${cc_normal}\n";
else
  echo -e "\n\n\n${cc_blue}Build GSL successful.${cc_normal}\n";
fi
