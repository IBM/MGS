/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/cvsroot/nts/gsl/framework/parser/flex/lex.yy.C.linux.i386,v 1.1.1.1 2013/02/22 16:34:55 simonw Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5



/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <iostream>
using namespace std;

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int LensLexer::yylex()


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 94
#define YY_END_OF_BUFFER 95
static yyconst short int yy_accept[459] =
    {   0,
        0,    0,   95,   93,   91,   90,   93,   93,   92,   93,
       80,   79,   54,   53,   87,   76,   93,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   93,   82,   82,   82,   82,   82,   93,
       91,   22,    0,   20,    0,   87,   75,    0,   89,   87,
       86,   86,   77,   21,   82,   83,   82,   82,   82,   82,
       82,   82,   82,   35,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   19,   82,   82,   82,   74,   82,
       82,   18,   81,    0,    0,   87,   55,   89,   86,   86,

        0,   86,   78,   84,   83,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   33,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,    1,   82,   82,   82,   88,   84,   85,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   39,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   65,   38,   82,   82,   82,   82,   82,   82,   82,
       82,   68,   82,   82,   82,   82,   82,    5,   82,   82,
        4,   82,   82,   82,   82,   82,   82,   82,   82,   82,

       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   57,   82,   82,   82,   82,   82,   82,   82,   82,
       67,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,    3,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   10,   82,
       36,   23,   37,   82,   82,   82,   82,   82,   82,   58,
       82,   82,   82,   82,   56,   52,   82,   82,   82,   82,
       82,    2,   66,   17,   82,   82,   82,   31,   82,   82,
       82,   64,   82,   82,   82,   27,   82,   82,   82,   82,

       82,   82,   82,   82,   82,   82,   82,   45,   82,   82,
       82,   44,   82,   82,   82,   61,   82,   82,   62,   24,
       82,   82,   82,   82,   82,   82,   82,   34,   50,   82,
       26,   82,   82,   82,   59,   82,   82,   82,   82,   82,
       82,   32,   48,   82,   82,   82,   82,   82,   82,   51,
       82,   40,   82,   41,   82,   28,   30,   82,   82,   82,
       43,   82,   12,   82,   82,   82,   82,   29,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   69,   25,   71,   16,   82,   82,   82,
       60,   82,   82,   82,   82,   82,   82,   82,   82,   72,

       82,   82,   82,   82,   49,    6,   82,   82,   82,   82,
       82,   82,   46,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   47,   82,   82,   63,   82,   82,   82,   70,
        7,    8,   82,   82,   82,   82,   82,   82,   82,   82,
        9,   82,   13,   82,   82,   11,   82,   42,   82,   82,
       82,   14,   15,   82,   82,   82,   73,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    1,    1,    7,    1,    1,
        1,    1,    8,    1,    9,   10,   11,   12,   13,   14,
       12,   12,   12,   12,   12,   12,   12,   15,    1,    1,
       16,   17,    1,    1,   18,   19,   20,   21,   22,   23,
       24,   19,   25,   19,   19,   26,   27,   28,   29,   30,
       19,   31,   32,   33,   19,   34,   19,   19,   19,   19,
        1,    1,    1,   35,   36,    1,   37,   38,   39,   40,

       41,   42,   43,   44,   45,   19,   19,   46,   47,   48,
       49,   50,   19,   51,   52,   53,   54,   55,   19,   56,
       57,   58,    1,   59,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[60] =
    {   0,
        1,    1,    2,    1,    2,    1,    1,    1,    1,    3,
        1,    4,    4,    4,    1,    1,    1,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    1,    5,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    1
    } ;

static yyconst short int yy_base[466] =
    {   0,
        0,    0,  960,  961,  957,  961,  942,    0,  961,  950,
       48,   51,  946,  961,   57,  940,  938,  917,   36,   37,
       40,   30,   38,   45,   50,   54,   56,   47,   60,   66,
       74,   67,   77,  917,   58,   52,   72,   83,   85,  892,
      948,  961,  944,  961,  122,  127,  961,  938,  133,  138,
      144,  153,  932,  961,  910,  909,  123,   87,   86,  133,
      136,  137,  141,  157,  107,   89,  145,  144,  152,  147,
      153,  154,  156,  158,  159,  167,  164,  168,  174,  178,
      177,  184,  181,  185,  961,  186,  188,  191,  908,  194,
      192,  961,  961,  236,  225,  241,  961,  247,  252,  258,

      261,  266,  961,  907,  906,  206,  245,  117,  211,  221,
      231,  247,  248,  249,  251,  254,  255,  258,  262,  264,
      265,  269,  273,  905,  240,  274,  275,  282,  204,  285,
      280,  283,  281,  284,  286,  287,  288,  302,  293,  304,
      307,  290,  308,  904,  296,  310,  314,  339,  903,    0,
      320,  318,  321,  322,  324,  345,  325,  326,  328,  348,
      327,  329,  358,  339,  337,  353,  351,  356,  357,  373,
      359,  902,  901,  363,  365,  371,  368,  375,  377,  374,
      379,  900,  381,  390,  382,  394,  392,  401,  396,  398,
      899,  400,  402,  403,  404,  406,  410,  413,  405,  414,

      417,  416,  424,  419,  425,  427,  429,  434,  433,  431,
      441,  898,  436,  443,  438,  445,  447,  449,  450,  448,
      897,  454,  452,  457,  459,  464,  465,  466,  470,  472,
      476,  478,  479,  480,  481,  487,  896,  483,  484,  488,
      492,  494,  491,  496,  497,  498,  499,  504,  509,  510,
      505,  514,  512,  526,  522,  524,  529,  521,  895,  532,
      894,  893,  544,  536,  535,  537,  538,  541,  542,  892,
      543,  549,  539,  553,  891,  890,  554,  555,  557,  560,
      563,  889,  888,  887,  562,  565,  564,  886,  567,  570,
      568,  885,  571,  582,  577,  884,  593,  586,  587,  588,

      590,  591,  594,  592,  597,  604,  596,  883,  610,  600,
      602,  882,  618,  614,  611,  881,  623,  622,  880,  879,
      624,  625,  626,  616,  635,  628,  633,  634,  878,  636,
      877,  637,  641,  642,  876,  644,  649,  646,  650,  647,
      656,  648,  662,  671,  661,  664,  678,  667,  669,  875,
      673,  874,  675,  873,  677,  872,  871,  681,  679,  683,
      870,  685,  869,  688,  686,  689,  690,  868,  692,  694,
      695,  696,  708,  703,  710,  701,  711,  716,  714,  715,
      717,  720,  721,  867,  866,  865,  736,  719,  724,  726,
      864,  727,  731,  751,  750,  739,  742,  744,  746,  863,

      747,  756,  740,  754,  862,  861,  759,  760,  761,  762,
      766,  767,  860,  768,  769,  770,  773,  772,  776,  800,
      779,  781,  859,  786,  783,  858,  787,  799,  801,  857,
      856,  855,  789,  793,  797,  803,  804,  807,  810,  812,
      841,  813,  838,  809,  815,  837,  816,  833,  817,  819,
      820,  380,  160,  827,  823,  822,   94,  961,  875,  878,
      879,  102,  881,  883,  885
    } ;

static yyconst short int yy_def[466] =
    {   0,
      458,    1,  458,  458,  458,  458,  458,  459,  458,  458,
      458,  458,  458,  458,  460,  458,  458,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  458,  461,  461,  461,  461,  461,  458,
      458,  458,  459,  458,  458,  458,  458,  458,  458,  460,
      462,  462,  458,  458,  461,  463,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  458,  461,  461,  461,  461,  461,
      461,  458,  458,  458,  458,  458,  458,  458,  462,  462,

      458,  462,  458,  464,  463,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  458,  464,  465,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,

      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,

      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,

      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,    0,  458,  458,
      458,  458,  458,  458,  458
    } ;

static yyconst short int yy_nxt[1021] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   15,   15,   16,   17,    4,   18,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,    4,   18,   18,   18,   18,
       18,   35,   18,   18,   36,   37,   18,   18,   38,   18,
       18,   39,   18,   18,   18,   18,   18,   18,   40,   45,
       45,   45,   46,   46,   46,   56,   49,   47,   50,   50,
       50,   56,   56,   56,   61,   56,   69,   58,   52,   60,
       56,   59,   56,   62,   57,   56,   65,   56,   63,   56,
       67,   56,   64,   56,   68,   56,   72,   52,   66,   87,

       71,   56,   56,   86,   70,  100,   75,   56,   73,   56,
       77,   74,   56,   84,   78,   81,   88,   82,   56,   76,
       56,  104,  104,   83,  104,  119,   79,   80,  108,  104,
       89,   49,  109,   94,   94,   94,   49,   90,   96,   96,
       96,   91,  104,   95,   98,   98,   98,   49,   95,   50,
       50,   50,  104,  154,   95,   99,   99,   99,  104,   52,
      101,  101,   95,  118,  102,  102,  102,   95,  104,  106,
      107,  104,  104,   95,  115,  110,  104,  113,   52,  104,
      104,  122,  104,  111,  112,  114,  123,  104,  104,  104,
      121,  104,  104,  104,  104,  104,  116,  120,  127,  104,

      128,  117,  104,  104,  129,  124,  126,  125,  130,  104,
      133,  131,  104,  104,  132,  138,  104,  134,  135,  104,
      104,  104,  136,  104,  137,  139,  104,  104,  140,  104,
      141,  175,  101,  101,  143,  142,  148,  148,  148,  104,
      144,  104,  145,  147,  146,   49,  104,   94,   94,   94,
       49,  155,   96,   96,   96,  151,  104,   95,   98,   98,
       98,  156,   95,   99,   99,   99,  104,  157,   95,   99,
       99,   99,  148,  148,  148,  104,   95,  102,  102,  102,
      104,   95,  104,  104,  104,  158,  104,   95,  160,  104,
      104,  171,  152,  104,  162,  159,  153,  104,  164,  104,

      104,  166,  168,  161,  104,  169,  165,  163,  104,  104,
      104,  174,  176,  170,  167,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  180,  104,  172,  173,  104,  185,
      179,  104,  183,  177,  189,  178,  182,  104,  186,  104,
      181,  184,  104,  104,  190,  104,  187,  188,  191,  104,
      148,  148,  148,  104,  192,  104,  104,  104,  196,  104,
      104,  104,  104,  104,  104,  194,  193,  206,  195,  200,
      203,  199,  104,  197,  104,  198,  201,  202,  204,  207,
      104,  205,  214,  104,  208,  209,  104,  210,  104,  212,
      213,  104,  104,  104,  104,  215,  216,  218,  104,  221,

      104,  217,  211,  104,  219,  220,  104,  224,  104,  104,
      104,  222,  104,  223,  104,  104,  104,  104,  225,  226,
      230,  235,  227,  229,  228,  104,  233,  104,  231,  104,
      232,  104,  236,  104,  234,  104,  104,  104,  104,  104,
      104,  104,  239,  240,  242,  104,  243,  238,  104,  104,
      237,  104,  104,  249,  104,  241,  245,  247,  244,  104,
      104,  246,  104,  250,  104,  255,  104,  251,  104,  104,
      252,  104,  248,  104,  257,  253,  104,  258,  104,  254,
      104,  256,  104,  104,  104,  104,  260,  104,  259,  104,
      265,  268,  104,  261,  104,  262,  264,  263,  267,  104,

      104,  104,  273,  269,  266,  104,  270,  104,  274,  272,
      271,  104,  275,  104,  104,  104,  104,  277,  104,  104,
      279,  280,  104,  104,  281,  282,  104,  104,  276,  104,
      283,  104,  104,  104,  104,  278,  285,  290,  287,  104,
      104,  289,  291,  284,  104,  104,  286,  104,  288,  104,
      299,  292,  294,  293,  297,  296,  104,  104,  295,  104,
      298,  104,  300,  301,  104,  302,  303,  104,  304,  305,
      104,  104,  104,  104,  104,  306,  104,  104,  104,  104,
      307,  311,  312,  313,  104,  310,  309,  308,  104,  104,
      104,  315,  104,  316,  317,  104,  314,  104,  104,  104,

      104,  320,  104,  104,  318,  104,  104,  319,  321,  323,
      327,  329,  104,  324,  322,  326,  325,  104,  330,  332,
      328,  104,  104,  104,  331,  104,  104,  104,  104,  104,
      336,  104,  104,  345,  334,  104,  333,  104,  338,  104,
      335,  340,  337,  339,  341,  104,  104,  346,  342,  104,
      343,  104,  344,  104,  349,  348,  347,  104,  104,  104,
      104,  104,  350,  104,  351,  352,  354,  355,  104,  104,
      104,  104,  104,  360,  353,  356,  104,  104,  358,  104,
      361,  104,  104,  104,  104,  104,  362,  359,  357,  364,
      366,  104,  369,  370,  371,  363,  104,  104,  367,  104,

      374,  372,  104,  365,  104,  377,  104,  373,  104,  376,
      104,  368,  104,  104,  104,  375,  104,  380,  104,  381,
      104,  104,  378,  104,  104,  104,  385,  104,  388,  104,
      104,  104,  382,  379,  389,  390,  104,  383,  104,  384,
      386,  393,  387,  104,  392,  104,  104,  397,  391,  104,
      104,  104,  104,  395,  104,  104,  104,  394,  403,  104,
      399,  104,  104,  398,  404,  402,  104,  396,  400,  401,
      409,  104,  410,  406,  104,  104,  405,  104,  407,  104,
      412,  104,  104,  408,  413,  104,  104,  415,  411,  104,
      414,  104,  416,  417,  104,  104,  104,  104,  418,  419,

      422,  104,  104,  104,  104,  104,  423,  104,  104,  421,
      420,  104,  431,  432,  104,  427,  104,  424,  104,  426,
      428,  104,  104,  436,  104,  425,  433,  430,  104,  429,
      435,  437,  104,  434,  104,  104,  104,  438,  104,  104,
      440,  439,  104,  441,  104,  104,  442,  104,  104,  449,
      104,  104,  104,  443,  104,  104,  454,  104,  104,  445,
      446,  444,  104,  450,  447,  448,  451,  452,  104,  453,
      456,  455,  104,  104,  457,   43,  104,   43,   43,   43,
       51,   51,   55,   55,  105,  105,  149,  149,  150,  150,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,

      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  150,  104,
      104,  150,  104,  104,  104,  104,  103,   97,   93,   41,
       92,   85,   56,   54,   53,   48,   44,   42,   41,  458,
        3,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,

      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458
    } ;

static yyconst short int yy_chk[1021] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,   11,
       11,   11,   12,   12,   12,   22,   15,   12,   15,   15,
       15,   19,   20,   23,   22,   21,   27,   20,   15,   21,
       24,   20,   28,   22,   19,   25,   25,   36,   23,   26,
       26,   27,   24,   35,   26,   29,   29,   15,   25,   36,

       28,   30,   32,   35,   27,  462,   30,   37,   29,   31,
       31,   29,   33,   33,   31,   32,   37,   32,   38,   30,
       39,   59,   58,   32,   66,   66,   31,   31,   58,  457,
       38,   45,   59,   45,   45,   45,   46,   39,   46,   46,
       46,   39,   65,   45,   49,   49,   49,   50,   46,   50,
       50,   50,  108,  108,   49,   51,   51,   51,   57,   50,
       52,   52,   45,   65,   52,   52,   52,   46,   60,   57,
       57,   61,   62,   49,   64,   60,   63,   63,   50,   68,
       67,   69,   70,   61,   62,   63,   70,   69,   71,   72,
       68,   73,   64,   74,   75,  453,   64,   67,   74,   77,

       75,   64,   76,   78,   75,   71,   73,   72,   75,   79,
       77,   75,   81,   80,   76,   80,   83,   78,   78,   82,
       84,   86,   79,   87,   79,   81,   88,   91,   82,   90,
       83,  129,   95,   95,   86,   84,   95,   95,   95,  129,
       87,  106,   88,   91,   90,   94,  109,   94,   94,   94,
       96,  109,   96,   96,   96,  106,  110,   94,   98,   98,
       98,  110,   96,   99,   99,   99,  111,  111,   98,  100,
      100,  100,  101,  101,  101,  125,   94,  102,  102,  102,
      107,   96,  112,  113,  114,  112,  115,   98,  114,  116,
      117,  125,  107,  118,  116,  113,  107,  119,  118,  120,

      121,  119,  121,  115,  122,  122,  118,  117,  123,  126,
      127,  128,  130,  123,  120,  131,  133,  128,  132,  134,
      130,  135,  136,  137,  134,  142,  126,  127,  139,  138,
      133,  145,  137,  131,  142,  132,  136,  138,  139,  140,
      135,  137,  141,  143,  143,  146,  140,  141,  145,  147,
      148,  148,  148,  152,  146,  151,  153,  154,  152,  155,
      157,  158,  161,  159,  162,  151,  147,  160,  151,  156,
      157,  155,  165,  153,  164,  154,  156,  156,  158,  161,
      156,  159,  166,  160,  162,  163,  167,  163,  166,  164,
      165,  168,  169,  163,  171,  167,  168,  170,  174,  171,

      175,  169,  163,  177,  170,  170,  176,  176,  170,  180,
      178,  174,  179,  175,  181,  452,  183,  185,  177,  178,
      183,  188,  179,  181,  180,  184,  186,  187,  184,  186,
      185,  189,  189,  190,  187,  192,  188,  193,  194,  195,
      199,  196,  193,  194,  196,  197,  197,  192,  198,  200,
      190,  202,  201,  203,  204,  195,  199,  201,  198,  203,
      205,  200,  206,  204,  207,  208,  210,  204,  209,  208,
      205,  213,  202,  215,  210,  206,  211,  211,  214,  207,
      216,  209,  217,  220,  218,  219,  214,  223,  213,  222,
      219,  223,  224,  215,  225,  216,  218,  217,  222,  226,

      227,  228,  228,  224,  220,  229,  225,  230,  229,  227,
      226,  231,  230,  232,  233,  234,  235,  232,  238,  239,
      234,  235,  236,  240,  236,  238,  243,  241,  231,  242,
      239,  244,  245,  246,  247,  233,  241,  246,  243,  248,
      251,  245,  246,  240,  249,  250,  242,  253,  244,  252,
      254,  247,  249,  248,  252,  251,  258,  255,  250,  256,
      253,  254,  255,  256,  257,  257,  258,  260,  260,  263,
      265,  264,  266,  267,  273,  264,  268,  269,  271,  263,
      264,  268,  269,  271,  272,  267,  266,  265,  274,  277,
      278,  273,  279,  274,  277,  280,  272,  285,  281,  287,

      286,  280,  289,  291,  278,  290,  293,  279,  281,  286,
      290,  293,  295,  286,  285,  289,  287,  294,  294,  297,
      291,  298,  299,  300,  295,  301,  302,  304,  297,  303,
      301,  307,  305,  311,  299,  310,  298,  311,  303,  306,
      300,  305,  302,  304,  306,  309,  315,  313,  307,  314,
      309,  324,  310,  313,  317,  315,  314,  318,  317,  321,
      322,  323,  318,  326,  321,  322,  324,  325,  327,  328,
      325,  330,  332,  332,  323,  326,  333,  334,  328,  336,
      333,  338,  340,  342,  337,  339,  334,  330,  327,  337,
      339,  341,  342,  343,  344,  336,  345,  343,  340,  346,

      347,  345,  348,  338,  349,  351,  344,  346,  351,  349,
      353,  341,  355,  347,  359,  348,  358,  358,  360,  359,
      362,  365,  353,  364,  366,  367,  365,  369,  369,  370,
      371,  372,  360,  355,  370,  371,  376,  362,  374,  364,
      366,  374,  367,  373,  373,  375,  377,  378,  372,  379,
      380,  378,  381,  376,  388,  382,  383,  375,  387,  389,
      380,  390,  392,  379,  388,  383,  393,  377,  381,  382,
      394,  387,  395,  390,  396,  403,  389,  397,  392,  398,
      397,  399,  401,  393,  398,  395,  394,  401,  396,  404,
      399,  402,  402,  403,  407,  408,  409,  410,  404,  407,

      410,  411,  412,  414,  415,  416,  411,  418,  417,  409,
      408,  419,  420,  420,  421,  416,  422,  412,  425,  415,
      417,  424,  427,  425,  433,  414,  421,  419,  434,  418,
      424,  427,  435,  422,  428,  420,  429,  428,  436,  437,
      433,  429,  438,  434,  444,  439,  435,  440,  442,  444,
      445,  447,  449,  436,  450,  451,  451,  456,  455,  438,
      439,  437,  454,  445,  440,  442,  447,  449,  448,  450,
      455,  454,  446,  443,  456,  459,  441,  459,  459,  459,
      460,  460,  461,  461,  463,  463,  464,  464,  465,  465,
      432,  431,  430,  426,  423,  413,  406,  405,  400,  391,

      386,  385,  384,  368,  363,  361,  357,  356,  354,  352,
      350,  335,  331,  329,  320,  319,  316,  312,  308,  296,
      292,  288,  284,  283,  282,  276,  275,  270,  262,  261,
      259,  237,  221,  212,  191,  182,  173,  172,  149,  144,
      124,  105,  104,   89,   56,   55,   53,   48,   43,   41,
       40,   34,   18,   17,   16,   13,   10,    7,    5,    3,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,

      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "framework/parser/flex/speclang.l"
#define INITIAL 0
/* Digits, letters and alphanums */
#line 11 "framework/parser/flex/speclang.l"
//#include <stdio.h>
//#include <stdlib.h>
#include <iostream>
//#include <sstream>
#include <fstream>
#include <string>
#include "LensLexer.h"
using namespace std;

#line 716 "lex.yy.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp = NULL, *yy_bp = NULL;
	register int yy_act;

#line 22 "framework/parser/flex/speclang.l"

#line 845 "lex.yy.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = &cin;

		if ( ! yyout )
			yyout = &cout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 459 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 961 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 23 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( LOCAL_INT );
                    }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 26 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( STRING );
                    }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 29 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( LOCAL_FLOAT );
                    }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 32 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( LIST );
                    }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 35 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( TYPE );
                    }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 38 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( REFPTGEN );
                    }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 41 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( SAMPFCTR1 );
                    }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 44 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( SAMPFCTR2 );
                    }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 47 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( SUBNODESETFCTR );
                    }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 50 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( LAYOUT );
                    }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 53 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( NODEINITIALIZER );
                    }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 56 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( INITNODES );
                    }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 59 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( EDGEINITIALIZER );
                    }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 62 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( INATTRINITIALIZER );
                    }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 65 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( NDPAIRLISTFUNCTOR);
                    }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 68 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( NDPAIRLIST);
                    }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 71 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( LOCAL_COMPLEX );
                    }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 74 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( EXP_OR );
                    }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 77 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( EXP_XOR );
                    }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 80 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( EXP_AND );
                    }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 83 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( EQUIVALENT );
                    }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 86 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( NOT_EQUIVALENT );
                    }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 89 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( MEMBER );
                    }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 92 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( TYPEDEF );
                    }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 95 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( INITIALIZE );
                    }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 98 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( FUNCTION );
                    }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 101 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( FUNCTOR );
                    }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 104 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( DIMENSION );
                    }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 107 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( NODEINDEX );
                    }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 110 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( EDGEINDEX );
                    }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 113 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( DEFAULT );
                    }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 116 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( NODEINIT );
                    }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 119 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( OUT );
                    }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 122 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( EDGEINIT );
                    }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 125 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( IN );
                    }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 128 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( MATRIX );
                    }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 131 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( NDPAIR );
                    }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 134 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( PSET );
                    }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 137 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( GRID );
                    }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 140 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( COMPOSITE );
                    }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 143 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( CONNECTOR );
                    }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 146 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( CONNECTIONSCRIPT );
                    }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 149 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( GRIDCOORD );
                    }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 152 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( REPNAME );
                    }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 155 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( NODESET );
                    }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 158 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( CONSTANTTYPE );
                    }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 161 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( VARIABLETYPE );
                    }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 164 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( NODETYPE );
                    }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 167 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( NODETYPESET );
                    }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 170 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( EDGETYPE );
                    }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 173 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( TOOLTYPE );
                    }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 176 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( STRUCT );
                    }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 179 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( SLASH );
                    }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 182 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( DOT );
                    }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 185 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( ELLIPSIS );
                    }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 188 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( STRIDE );
                    }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 191 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( LAYER );
                    }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 194 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( RETURN );
                    }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 197 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( INDEXSET );
                    }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 200 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( RELNODESET );
                    }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 203 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( SERVICE );
                    }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 206 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( TRIGGER );
                    }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 209 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( GRANULEMAPPER );
                    }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 212 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( EDGESET );
                    }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 215 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( PORT );
                    }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 218 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( SYSTEM );
                    }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 221 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( PAUSE );
                    }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 224 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( STOP );
                    }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 227 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( INITPHASES );
                    }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 230 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( RUNTIMEPHASES );
                    }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 233 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( LOADPHASES );
                    }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 236 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( FINALPHASES );
                    }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 239 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( SEPARATIONCONSTRAINT );
                    }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 242 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( ON );
                    }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 245 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( ARROW );
                    }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 248 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( COLON );
                    }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 251 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( DOUBLE_COLON );
                    }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 254 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( TRIPLE_COLON );
                    }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 257 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( MINUS );
                    }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 260 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return ( PLUS );
                    }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 263 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    yylval->P_string = new std::string(yytext); 
                    std::string::iterator b;
                    b = yylval->P_string->begin(); 
                    yylval->P_string->erase(b);
                    std::string::iterator e;
                    e = yylval->P_string->end(); 
                    yylval->P_string->erase(--e);
                    //cout << "yytext = " << *yylval->P_string << endl;
                    return ( STRING_LITERAL ); 
                    }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 274 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    yylval->P_string = new std::string (yytext); 
                    //cout << "yytext = " << yytext << endl; 
                    return(IDENTIFIER); 
                    }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 279 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    yylval->P_string = new std::string (yytext); 
                    //cout << "yytext = " << yytext << endl; 
                    return(IDENTIFIER); 
                    }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 284 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    yylval->P_string = new std::string (yytext); 
                    //cout << "yytext = " << yytext << endl; 
                    return(IDENTIFIER); 
                    }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 289 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    yylval->P_string = new std::string (yytext); 
                    //cout << "yytext = " << yytext << endl; 
                    return(IDENTIFIER); 
                    }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 294 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    yylval->P_string = new std::string (yytext);  
                    //cout << "yytext = " << yytext << endl;
                    return(IDENTIFIER); 
                    }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 299 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    yylval->V_int= atoi (yytext); 
                    //cout << "yytext = " << yytext << endl;
                    return(INT_CONSTANT); 
                    }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 304 "framework/parser/flex/speclang.l"
{ 
                    yylloc->first_line = lineCount;
                    yylval->V_double= atof (yytext); 
                    //cout << "yytext = " << yytext << endl;
                    return(FLOAT_CONSTANT); 
                    }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 310 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    yylval->V_double= atof (yytext);  
                    //cout << "yytext = " << yytext << endl;
                    return(FLOAT_CONSTANT); 
                    }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 315 "framework/parser/flex/speclang.l"
{ lineCount++; 
                    //cerr<< "\n\nFinished " <<currentFileName<<": "<< lineCount<<endl;
                    }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 318 "framework/parser/flex/speclang.l"
;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 319 "framework/parser/flex/speclang.l"
{ skip_proc(); 
                    }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 321 "framework/parser/flex/speclang.l"
{ yylloc->first_line = lineCount;
                    return (yytext[0]); 
                    }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 324 "framework/parser/flex/speclang.l"
ECHO;
	YY_BREAK
#line 1606 "lex.yy.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

yyFlexLexer::yyFlexLexer( istream* arg_yyin, ostream* arg_yyout )
	{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

	yy_current_buffer = 0;

#ifdef YY_USES_REJECT
	yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
	yy_state_buf = 0;
#endif
	}

yyFlexLexer::~yyFlexLexer()
	{
	delete yy_state_buf;
	yy_delete_buffer( yy_current_buffer );
	}

void yyFlexLexer::switch_streams( istream* new_in, ostream* new_out )
	{
	if ( new_in )
		{
		yy_delete_buffer( yy_current_buffer );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
		}

	if ( new_out )
		yyout = new_out;
	}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
	{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
	}

void yyFlexLexer::LexerOutput( const char* buf, int size )
	{
	(void) yyout->write( buf, size );
	}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 459 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 459 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 458);

	return yy_is_jam ? 0 : yy_current_state;
	}


void yyFlexLexer::yyunput( int c, register char* yy_bp )
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}


int yyFlexLexer::yyinput()
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}

void yyFlexLexer::yyrestart( istream* input_file )
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


void yyFlexLexer::yy_load_buffer_state()
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( istream* file, int size )
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, istream* file )

	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	b->yy_is_interactive = 0;
	}


void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state( int new_state )
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif


void yyFlexLexer::LexerError( yyconst char msg[] )
	{
	cerr << msg << '\n';
	exit( YY_EXIT_FAILURE );
	}


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 324 "framework/parser/flex/speclang.l"


int yywrap(void) {
 return 1;
}
