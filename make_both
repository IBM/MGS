#!/bin/bash
set -e

#Escape code
esc=`echo -en "\033"`

# Set colors
cc_red="${esc}[0;31m"
cc_green="${esc}[0;32m"
cc_yellow="${esc}[0;33m"
cc_blue="${esc}[0;34m"
cc_normal=`echo -en "${esc}[m\017"`

NPROCS=$((`cat /proc/cpuinfo | grep processor | wc -l`))
NPROCS=$(( $NPROCS*2/3 ))
#########################################
#   PRINT HELP
#{{{
rm_ifexist() {
 if [ -f "$1" ] ; then
   rm -v "$1"
 fi
}

function print_help {
	echo -e "\n\n${cc_blue}Make both NTS and MGS...${cc_normal} \n\nOption include : \n\n 
  -p [LINUX|BGL|BGP|BGQ]        default = LINUX  build to run on what platform
  -c [all|common|mdl|gsl|nti]   default = all    what components to build
  -r|--release                  to build in release mode [default: debug mode]
  -j <n>                        with <n> is number of processes [default: 2/3 of total cores]
  -s|--singlethread             to build in single thread
  --mco                         <max-compute-order>
  --clean                       to clean everything
  --rebuild                     to clean and rebuild
  --loglevel [1|2]              determine the log-level
                                [by default: build with -g information, but not printing out any thing]
                                  log1 = print out DEBUG_HH and DEBUG_ASSERT
                                  log2 = print out ... during loops
  HETE ARCHITECTURE:
  -g|--gpu                      build with GPU extensions
  -a|--arma                     build with Armadillo extensions

Example:
1) make_nts -p LINUX :          builds both NTS and MGS in a LINUX environment using MPI
2) make_nts -p BGL :            makes both NTS and MGS on Blue Gene/L
3) make_nts -p BGP :            makes both NTS and MGS on Blue Gene/P
4) make_nts -p BGQ :            make both NTS and MGS on Blue Gene/Q\n
\n
Extra Libraries:
  export SUITESPARSE=\`pwd\`/SuiteSparse/
  export LD_LIBRARY_PATH=\$LD_LIBRARY_PATH:\$SUITESPARSE/lib

\n\n"; exit;
}

if [ "$1" == "--help" ] || [ $# == 0 ]; then
  print_help
fi
#}}}
function make_functor_mdf()
{
  cat functors_common.mdf > $1
  #cat functors_both.mdf >> $1
  cat functors_nts.mdf >> $1
  #cat functors_mgs.mdf >> $1
  if [ -f colab_functors.mdf ]; then
    cat colab_functors.mdf >> $1
  else
    touch $1
  fi
}


TYPE="BOTH"  # NTS, MGS, BOTH
##########################################
## Detect what need to be built
#{{{
PLATFORM="LINUX"
WHAT_TO_BUILD="all"
CLEAN=""
REBUILD=""
MCO=""
RELEASE=""
GPU=""
ARMA=""
GSL_BUILD_MODE=""
optspec=":c:p:sr-:j:g:a"
while getopts "$optspec" optchar; do
  case $optchar in
    p)
      echo "Platform: $OPTARG" >&2
      PLATFORM=$OPTARG
      ;;
    c)
      echo "Build: $OPTARG"
      WHAT_TO_BUILD=$OPTARG
      ;;
    j)
      echo "Num-processes: $OPTARG"
      NPROCS=$OPTARG
      ;;
    s)
      NPROCS=1
      ;;
    r) # release
      RELEASE="-release"
      GSL_BUILD_MODE="--release"
      ;;
    g) # GPU extensions
      GPU="--gpu"
      ;;
    a) # Armadillo extensions
      ARMA="--arma"
      ;;
    -)  #parse long-option
            case "${OPTARG}" in
                clean)
                    CLEAN="-clean"
                    ;;
                rebuild)
                    REBUILD="-rebuild"
                    ;;
                singlethread)
                    NPROCS=1
                    ;;
                mco)
                    MCO="-MCO"
                    ;;
		release) # release
                    RELEASE="-release"
                    GSL_BUILD_MODE="--release"
		    ;;
		gpu) # GPU extensions
                    GPU="--gpu"
		    ;;
		arma) # Armadillo extensions
                    ARMA="--arma"
		    ;;
                loglevel)
                    val="${!OPTIND}"
                    GSL_BUILD_MODE="--loglevel $val"
                    ;;
                someloglevel)
                    val="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
                    echo "parsing option: '--${OPTARG}', value: '${val}'" >&2;
                    ;;
                =*)
                    val=${OPTARG#*=}
                    opt=${OPTARG%=$val}
                    echo "parsing option: '--${opt}', value: '${val}'" >&2
                    ;;
                *)
                    if [ "$OPTERR" = 1 ] && [ "${optspec:0:1}" != ":" ]; then
                        echo "unknown option --${OPTARG}" >&2
                    fi
                    ;;
            esac;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
  esac
done
SUPPORTED_PLATFORMS="LINUX BGL BGP BGQ SMP"
[[ $SUPPORTED_PLATFORMS =~ (^|[[:space:]])"$PLATFORM"($|[[:space:]]) ]] && : || { echo "wrong-platform $PLATFORM"; print_help; exit; }

SUPPORTED_COMPONENTS="all common mdl gsl nti"
[[ $SUPPORTED_COMPONENTS =~ (^|[[:space:]])"$WHAT_TO_BUILD"($|[[:space:]]) ]] && : || { echo "wrong component $WHAT_TO_BUILD"; print_help; exit; }

#}}}

########################################
### Check required tools ###
## 1. MPI library
## 2. Bison
## 3. Flex
## 4. Python
## 5. CUDA [optional]
## 6. Armadillo [optional]
#{{{
if [ "$PLATFORM" == "LINUX" ]; then
  if which mpiexec | grep -q1 /\mpiexec; then
    echo mpi found...; else echo mpi not found!; exit; fi
fi

if which bison | grep -q1 /\bison; then
    echo bison found...; else echo bison not found!; exit; fi

VALID_BISON_VERSION=2.3
BISON_VERSION=`bison --version 2>&1 | awk 'NR==1{ gsub(/"/,""); print $NF }'`
echo version $BISON_VERSION...
read c_major c_minor c_rev<<EOF
 `echo ${VALID_BISON_VERSION} | tr "." " "`
EOF
if ! [[ "$c_rev" =~ [0-9]+$ ]]; then c_rev=0; fi
read n_major n_minor n_rev << EOF
`echo ${BISON_VERSION} | tr "." " "`
EOF
if ! [[ "$n_rev" =~ [0-9]+$ ]]; then n_rev=0; fi
if [ "$n_major" -lt "$c_major" ]; then
    echo bison version $VALID_BISON_VERSION or greater required!
    exit;
fi
if [ "$n_major" -eq "$c_major" ] && [ "$n_minor" -lt "$c_minor" ]; then
    echo bison version $VALID_BISON_VERSION or greater required!
    exit;
fi
if [ "$n_minor" -eq "$c_minor" ] &&  [ "$n_rev" -lt "$c_rev" ]; then
    echo bison version $VALID_BISON_VERSION or greater required!
    exit;
fi

if which flex | grep -q1 /\flex; then
    echo flex found...; else echo flex not found!; exit; fi

VALID_FLEX_VERSION=2.5.4
FLEX_VERSION=`flex --version 2>&1 | awk 'NR==1{ gsub(/"/,""); print $NF }'`
echo version $FLEX_VERSION...
read c_major c_minor c_rev << EOF
`echo ${VALID_FLEX_VERSION} | tr "." " "`
EOF
if ! [[ "$c_rev" =~ [0-9]+$ ]]; then c_rev=0; fi
read n_major n_minor n_rev << EOF
`echo ${FLEX_VERSION} | tr "." " "`
EOF
if ! [[ "$n_rev" =~ [0-9]+$ ]]; then n_rev=0; fi
if [ "$n_major" -ne "$c_major" ]; then
    echo flex version $VALID_FLEX_VERSION required: flex.sourceforge.net!
    if [ "$PLATFORM" == "LINUX" ]; then
	exit;
    fi
fi
if [ "$n_major" -eq "$c_major" ] &&  [ "$n_minor" -ne "$c_minor" ]; then
    echo flex version $VALID_FLEX_VERSION required: flex.sourceforge.net!
    if [ "$PLATFORM" == "LINUX" ]; then
	exit;
    fi
fi
if [ "$n_minor" -eq "$c_minor" ] &&  [ "$n_rev" -ne "$c_rev" ]; then
    echo flex version $VALID_FLEX_VERSION required: flex.sourceforge.net!
    if [ "$PLATFORM" == "LINUX" ]; then
	exit;
    fi
fi

if which python | grep -q1 /\python; then
    echo python found...; else echo python not found!;
	exit;
fi

if [ "$GPU" == "--gpu" ]; then
    if which nvidia-smi | grep -q1 /\nvidia-smi; then
        echo CUDA probably found...; else echo CUDA potentially not found!;
                                          exit
    fi
fi

if [ "$ARMA" == "--arma" ]; then
    if `ldconfig -p | grep -q armadillo`; then
        echo Armadillo probably found...; else echo Armadillo potentially not found!;
                                          exit
    fi
fi
#}}}

if [ "$NTSMGSROOT" == "" ]; then
  echo "Please run: source setenv_both"
  exit
fi
if [ ! -f ".built" ] && [[ "$REBUILD" != "-rebuild" && "$CLEAN" != "-clean" ]]; then
  echo "First build. Please run with --rebuild"
  exit
fi

if [  -f ".built"  ]; then
  line=$(head -n 1 ".built")
  if  [ "$NTSMGSROOT" != "$line" ]; then
    echo "Please run: source setenv_both"
    rm .built
    exit
  fi
  PREV_TYPE=$(sed '2q;d' ".built")
fi
if [ "$CLEAN" == "-clean" ] ; then
  rm_ifexist $NTSMGSROOT/.built
fi
if [ "$REBUILD" == "-rebuild" ] ;then
  cd $NTSMGSROOT
  touch .built && echo $NTSMGSROOT > .built
  echo $TYPE >> .built # 2nd-line
fi
if [ "$TYPE" != "$PREV_TYPE" ]; then
  gawk -v type="$TYPE"  -v prev_type="$PREV_TYPE" 'NR==2 { sub(prev_type, type)}1' .built > .built_tmp && mv .built_tmp .built
  rm -f gsl/Makefile
fi
################################################
### MDL code ###
#{{{
if [[ "mdl" =~ (^|[[:space:]])"$WHAT_TO_BUILD"($|[[:space:]]) ]] || [[ "all" =~ (^|[[:space:]])"$WHAT_TO_BUILD"($|[[:space:]]) ]] ; then
  cd $MDLROOT

  touch mdl.make.mark
  if [ "$CLEAN" == "-clean" ] || [ "$REBUILD" == "-rebuild" ]; then
    if [ "$CLEAN" == "-clean" ]; then
      make clean;
      echo "${cc_blue}Removed MDL code successful.${cc_normal}"
    fi
    if [ "$REBUILD" == "-rebuild" ]; then
      make clean;
      make -j $NPROCS RELEASE="$RELEASE"
      if [ `ls $MDLROOT/bin/mdlparser` ]; then
        echo  -e "${cc_blue} Build MDL successful.${cc_normal}\n"
      fi
    fi
  else
    make -j $NPROCS RELEASE="$RELEASE"
    if [ `ls $MDLROOT/bin/mdlparser` ]; then
      echo  -e "${cc_blue} Build MDL successful.${cc_normal}\n"
    fi
  fi
  if [ "$CLEAN" != "-clean" ] ; then
    if [ $? -gt 0 ] || [ ! `ls $MDLROOT/bin/mdlparser` ]; then
      rm mdl.make.mark
      cd $NTSMGSROOT
      echo -e "${cc_red}Build MDL failed ! ${cc_normal}";
      exit;
    fi
    rm -f mdl.make.mark
    cd $NTSMGSROOT
  fi
fi
#}}}

################################################
### COMMON code ###
#{{{
if [[ "common" =~ (^|[[:space:]])"$WHAT_TO_BUILD"($|[[:space:]]) ]] || [[ "all" =~ (^|[[:space:]])"$WHAT_TO_BUILD"($|[[:space:]]) ]] ; then
  cd $NTSMGSROOT/common
  sed 's/FOR_BLUEGENE_L=1/FOR_BLUEGENE_L=0/g' Makefile > tmp.mk; mv tmp.mk Makefile;
  sed 's/FOR_BLUEGENE_P=1/FOR_BLUEGENE_P=0/g' Makefile > tmp.mk; mv tmp.mk Makefile;
  sed 's/FOR_BLUEGENE_Q=1/FOR_BLUEGENE_Q=0/g' Makefile > tmp.mk; mv tmp.mk Makefile;
  if [ "$PLATFORM" == "BGL" ]; then sed 's/FOR_BLUEGENE_L=0/FOR_BLUEGENE_L=1/g' Makefile > tmp.mk; mv tmp.mk Makefile;
  elif [ "$PLATFORM" == "BGP" ]; then sed 's/FOR_BLUEGENE_P=0/FOR_BLUEGENE_P=1/g' Makefile > tmp.mk; mv tmp.mk Makefile;
  elif [ "$PLATFORM" == "BGQ" ]; then sed 's/FOR_BLUEGENE_Q=0/FOR_BLUEGENE_Q=1/g' Makefile > tmp.mk; mv tmp.mk Makefile;
  fi
  if [ "$CLEAN" == "-clean" ] || [ "$REBUILD" == "-rebuild" ]; then
    if [ "$CLEAN" == "-clean" ] ; then
      make realclean;
      echo "${cc_blue}Removed COMMON code successful.${cc_normal}"
    fi
    if [ "$REBUILD" == "-rebuild" ] ; then
      make realclean;
      make -j $NPROCS RELEASE="$RELEASE"
      echo "${cc_blue}Build COMMON code successful.${cc_normal}"
    fi
  else
    make -j $NPROCS RELEASE="$RELEASE"
    echo "${cc_blue}Build COMMON code successful.${cc_normal}"
  fi
  cd $NTSMGSROOT
fi
#}}}

################################################
### NTI code ###
#{{{
if [[ "nti" =~ (^|[[:space:]])"$WHAT_TO_BUILD"($|[[:space:]]) ]] || [[ "all" =~ (^|[[:space:]])"$WHAT_TO_BUILD"($|[[:space:]]) ]] ; then
  cd $NTSMGSROOT/nti
  if [ -f .build_error ]; then rm .build_error; fi
  if [ "$MCO" == "-MCO" ]; then
    #TODO: Find out what is $3 here to replace it
    sed 's/#define MAX_COMPUTE_ORDER .*$/#define MAX_COMPUTE_ORDER '$3'/g' MaxComputeOrder.h > tmp.mco; mv tmp.mco MaxComputeOrder.h;
  fi
  sed 's/FOR_BLUEGENE_L=1/FOR_BLUEGENE_L=0/g' Makefile > tmp.mk; mv tmp.mk Makefile;
  sed 's/FOR_BLUEGENE_P=1/FOR_BLUEGENE_P=0/g' Makefile > tmp.mk; mv tmp.mk Makefile;
  sed 's/FOR_BLUEGENE_Q=1/FOR_BLUEGENE_Q=0/g' Makefile > tmp.mk; mv tmp.mk Makefile;
  if [ "$PLATFORM" == "BGL" ]; then sed 's/FOR_BLUEGENE_L=0/FOR_BLUEGENE_L=1/g' Makefile > tmp.mk; mv tmp.mk Makefile;
  elif [ "$PLATFORM" == "BGP" ]; then sed 's/FOR_BLUEGENE_P=0/FOR_BLUEGENE_P=1/g' Makefile > tmp.mk; mv tmp.mk Makefile;
  elif [ "$PLATFORM" == "BGQ" ]; then sed 's/FOR_BLUEGENE_Q=0/FOR_BLUEGENE_Q=1/g' Makefile > tmp.mk; mv tmp.mk Makefile;
  fi

  if [ "$CLEAN" == "-clean" ] || [ "$REBUILD" == "-rebuild" ]; then
    if [ "$CLEAN" == "-clean" ] ; then
      make realclean;
    fi
    if [ "$REBUILD" == "-rebuild" ] || [ "$MCO" == "-MCO" ]; then
      make realclean;
      if [ "$RELEASE" == "-release" ]; then
          make -j $NPROCS RELEASE="-release"
      else
          make -j $NPROCS RELEASE=""
      fi
    fi
  else
    if [ "$RELEASE" == "-release" ]; then
        make -j $NPROCS RELEASE="-release"
    else
        make -j $NPROCS RELEASE=""
    fi
  fi
  if [ -f .build_error ]; then exit ; fi
  if [ $? -gt 0 ] || [ ! `ls $LENSROOT/lib/libnti.a $LENSROOT/lib/libnti_db.a` ]; then
    cd $NTSMGSROOT
    echo -e "${cc_red}Build NTI failed ! ${cc_normal}";
    exit;
  fi
  cd $NTSMGSROOT
  echo "${cc_blue}Complete build NTI code${cc_normal}"
fi
#}}}

##########################################
### GSL code ###
#{{{
if [[ "gsl" =~ (^|[[:space:]])"$WHAT_TO_BUILD"($|[[:space:]]) ]] ||  [[ "all" =~ (^|[[:space:]])"$WHAT_TO_BUILD"($|[[:space:]]) ]] ; then
  if [ "$CLEAN" == "-clean" ] || [ "$REBUILD" == "-rebuild" ]; then
    #{{{
    cd $LENSROOT
    chmod +x ./build_gsl
    if [ "$CLEAN" == "-clean" ] ; then
      #{{{
      ./build_gsl -p $PLATFORM --clean --as-both-Nts-Mgs
      rm_ifexist $NTSMGSROOT/models/Extensions.mk
      #rm_ifexist $NTSMGSROOT/models/all.mdf
      #rm_ifexist $NTSMGSROOT/models/all_test.mdf
      rm_ifexist $LENSROOT/extensions/functor/all.mdf
      rm_ifexist $LENSROOT/extensions/functor/all_test.mdf
      find . -iname "CG_*" | xargs -I{} rm {}
      find $NTSMGSROOT/models -iname "CG_*" | xargs -I{} rm {}
      touch $NTSMGSROOT/models/all.mdf
      #}}}
    fi
    cd -
    cd $NTSMGSROOT
    if [ "$REBUILD" == "-rebuild" ] ;then
      #{{{
      cd $LENSROOT/extensions/variable
      ./define variables.mdf $REBUILD
      cd $LENSROOT/extensions/struct
      ./define structs.mdf $REBUILD
      cd $LENSROOT/extensions/functor
      #rm_ifexist all.mdf
      JUST_CREATE=0
      if [ ! -f all.mdf ]; then
        JUST_CREATE=1
        make_functor_mdf all.mdf
      fi
      make_functor_mdf all_test.mdf
      if [ ! diff -q all_test.mdf all.mdf &>/dev/null ] || [ $JUST_CREATE -eq 1 ]; then
        mv all_test.mdf all.mdf
        ./define all.mdf $REBUILD
      fi
      rm_ifexist all_test.mdf
      #rm_ifexist all.mdf
      #cat nts.mdf >> all.mdf
      #cat mgs.mdf >> all.mdf
      cd $NTSMGSROOT/models
      if [ $PREV_TYPE != $TYPE ]; then
        if [[ $TYPE == "BOTH" || $TYPE == "NTS" ]]; then
          touch nts.mdf
        fi
        if [[ $TYPE == "BOTH" || $TYPE == "MGS" ]]; then
          touch mgs.mdf
        fi
      fi
      touch all.mdf
      ./define all.mdf $REBUILD

      cp Extensions.mk $LENSROOT/
      cd $NTSMGSROOT
      #}}}
    fi
    cd -
    cd $LENSROOT
    if [ "$REBUILD" == "-rebuild" ] || [ "$MCO" == "-MCO" ]; then
      ./build_gsl -p $PLATFORM --rebuild -j $NPROCS $GSL_BUILD_MODE --as-both-Nts-Mgs $GPU  $ARMA
    fi
    cd -
    #}}}
  else
    #{{{
    cd $LENSROOT/extensions/variable
    ./define variables.mdf $REBUILD
    cd $LENSROOT/extensions/struct
    ./define structs.mdf $REBUILD
    cd $LENSROOT/extensions/functor
    make_functor_mdf all_test.mdf
    if ! diff -q all_test.mdf all.mdf &>/dev/null; then
      mv all_test.mdf all.mdf
      ./define all.mdf $REBUILD
    fi
    rm_ifexist all_test.mdf
    cd $NTSMGSROOT/models
    if [ $PREV_TYPE != $TYPE ]; then
      if [[ $TYPE == "BOTH" || $TYPE == "NTS" ]]; then
        touch nts.mdf
      fi
      if [[ $TYPE == "BOTH" || $TYPE == "MGS" ]]; then
        touch mgs.mdf
      fi
      rm Extensions.mk
    fi
    if [ ! -f Extensions.mk ]; then
      touch all.mdf;
      ./define all.mdf -force
    else
      ./define all.mdf $REBUILD
    fi

    cp Extensions.mk $LENSROOT/
    cd $NTSMGSROOT
    # -s or -singlethread
    cd $LENSROOT
    ./build_gsl -p $PLATFORM -j $NPROCS $GSL_BUILD_MODE --as-both-Nts-Mgs $GPU  $ARMA
    cd -
    #}}}
  fi
  if { [ "$CLEAN" != "-clean"  ] || [ "$REBUILD" == "-rebuild"  ] ; } ; then
    if [ $? -eq 0 ] && [  `ls $LENSROOT/bin/gslparser` ]; then
      echo -e "\n\n\n${cc_blue}Congratulations! You have made NTS and MGS...${cc_normal}

    To run the test NTS tissue simulation :

      1) type \"cd graphs/Compartmental\"/
      2) browse to http://neuromorpho.org/neuroMorpho/bylab.jsp
      3) click \"Markram,\" \"Select All,\" \"Get SWC files of selected neurons\"
      4) download and extract zipped .swc files to graphs/Compartmental/neurons/*.swc
      5) type \"mpiexec -n 2  ../../gsl/bin/gslparser Tissue1.gsl\"


    To run a test MGS simulation :

      1) type \"cd graphs/IAF\"
      2) type \"mpiexec -n 1 ../../gsl/bin/gslparser -t 4 -f leakyIAF.gsl -s \`date +%s\`\"
      3) type \"cd ../../postprocess/IAF/\"
      4) run the MATLAB script \"leakyIAF.m\"
      \n\n"
    fi
  fi
fi
#}}}

