// =================================================================
// Licensed Materials - Property of IBM
//
// "Restricted Materials of IBM"
//
// BCM-YKT-07-18-2017
//
// (C) Copyright IBM Corp. 2005-2017  All rights reserved
//
// US Government Users Restricted Rights -
// Use, duplication or disclosure restricted by
// GSA ADP Schedule Contract with IBM Corp.
//
// =================================================================

Functor Print;
Print print();

NodeInitializer Same(Pset); // Functor that just provide parameter set argument

NodeInitializer NodeDefault; // Functor that gives default parameter set for a node
NodeDefault nodeDef(); // instance

EdgeInitializer EdgeDefault; // Functor that gives default parameter set for an edge
EdgeDefault edgeDef();   // instance

Functor InAttrDefault; //  Functor that gives default in attribute Pset for a node
InAttrDefault inAttrDef();

InAttrInitializer NdplInAttrInit(NDPairListFunctor);

Functor OutAttrDefault; //  Functor that gives default out attribute Pset for a node
OutAttrDefault outAttrDef();

Layout UniformLayout(int); // Functor provides uniform density vector for grid layers
//UniformLayout uniform();

Layout OpenCircleLayout(int nPos); // Functor provides circle of 1 densities among zeroes for a unique
// number of positions on the circle


Functor Gaussian(float mean,float stddev); // provide float from distribution upon execute
Functor UniformDist(float min,float max); // provide float from distribution upon execute

// RangePassThru calls a functor and returns the float if it satisfies the predicate
Functor RangePassThru(float value1, string op1, Functor testvalue, string op2, float value3);

// BindNameFunctor takes a name and a functor returning a float value and returns a name value pair
NDPairListFunctor BindName
{
  Initialize(string name, Functor value); 
  Initialize(string name, float value); 
};

// BindBack takes a functor instance and other arguments in its constructor. It then post-pends the 
// other arguments to its execute arguments and calls execute on the input functor. It returns the 
// return values of the input functor
Functor BindBack(Functor inputFunctor, ...);

// NdplModifier gets a parameter set from a functor and modifies it using the name value pair list
// it returns the modified parameter set
Functor NdplModifier(Functor psetGenerator, list<NDPair> modifiers);

// NvplEdgeInit gets default edge init parameter set and modifies it using the name value pair list
// it returns the modified parameter set
EdgeInitializer NdplEdgeInit(NDPairListFunctor);

// NvplNodeInit gets default edge init parameter set and modifies it using the name value pair list
// it returns the modified parameter set
NodeInitializer NdplNodeInit(NDPairListFunctor);

// unique calls a sampling functor repeatedly until the two nodes are unique. It returns the unique nodes
SamplingFctr2 Unique(SamplingFctr2 sf);

// Multi purpose Connectors
Connector PolyConnectorFunctor();
PolyConnectorFunctor polyConnect();

Connector ConnectNodeSetsFunctor();
ConnectNodeSetsFunctor connectNodeSets();

SamplingFctr2 IsoSampler();
IsoSampler isoSampler();

Connector ServiceConnectorFunctor();
ServiceConnectorFunctor serviceConnect();

Functor GetNodeCoordFunctor();

// ManhatGokhanGokhan	+905327233474	+905327233474GokhanGokhan	+905327233474	+905327233474tanRing returns pairs of nodes according to a distribution described by the list<int>, where
// the position in the list corresponds to Manhattan distance on a grid and the number corresponds to the 
// number of samples taken from nodes at that distance, 
SamplingFctr1 ManhattanRing(list<int>);
SamplingFctr1 EachAvg(float avg);
SamplingFctr1 RadialHistoSampler(int nbrSamples, float radialScale, list<float> radialHistSampleFunction);
SamplingFctr1 RadialDensitySampler(int nbrSamples, float radialScale, list<float> radialDensitySampleFunction);
SamplingFctr1 RadialSampler(float radius, int borderTolerance);

SamplingFctr2 EachSrc(SamplingFctr1 sf1);
SamplingFctr2 EachDst(SamplingFctr1 sf1);

SamplingFctr2 EachDstPropSrc(SamplingFctr1 sf1);

// the following four functors modify a parameter set based on node coords gotten from the connection context

Functor SrcRefDistanceModifier(Functor PsetGenerator); // sets "distance" parameter
Functor DstRefDistanceModifier(Functor PsetGenerator); // sets "distance" parameter
Functor SrcRefGaussianWeightModifier(Functor PsetGenerator, float sigma, float max, int setDistance); // sets "weight" and if desired, "distance" parameter
Functor SrcRefDoGWeightModifier(Functor PsetGenerator, float sigma1, float max1, float sigma2, float max2, int setDistance); // sets "weight" and if desired, "distance" parameter
Functor DstRefGaussianWeightModifier(Functor PsetGenerator, float sigma, float max, int setDistance); // sets "weight" and if desired, "distance" parameter
Functor ReversedSrcRefGaussianWeightModifier(Functor PsetGenerator, float sigma, float max, int setDistance); // sets "weight" and if desired, "distance" parameter
Functor ReversedDstRefGaussianWeightModifier(Functor PsetGenerator, float sigma, float max, int setDistance); // sets "weight" and if desired, "distance" parameter
Functor SrcScaledGaussianWeightModifier(Functor PsetGenerator, float sigma, float max); // sets "weight" and if desired, "distance" parameter
Functor DstScaledGaussianWeightModifier(Functor PsetGenerator, float sigma, float max); // sets "weight" and if desired, "distance" parameter
Functor SrcScaledContractedGaussianWeightModifier(Functor PsetGenerator, float sigma, float max, float contract); // sets "weight" and if desired, "distance" parameter
Functor DstScaledContractedGaussianWeightModifier(Functor PsetGenerator, float sigma, float max, float contract); // sets "weight" and if desired, "distance" parameter
Functor SrcRefSumRsqrdInvWeightModifier(Functor PsetGenerator, int maxDim, int setDistance); // sets "weight" and if desired, "distance" parameter
Functor DstRefSumRsqrdInvWeightModifier(Functor PsetGenerator, int maxDim, int setDistance); // sets "weight" and if desired, "distance" parameter

Functor Exp(Functor);
Functor Log(Functor);
Functor Neg(Functor);
Functor Scale(Functor);
Functor Round(Functor);
Functor FloatArrayMaker(Functor, int);
Functor Threshold(Functor sample, float threshold);
Layout RandomDispersalLayout(int totalToDisperse);
Layout GradientLayout(int total, float slope, list<int> origin, int originDensity, list<int> gradientDimensions);
Layout NormalizedGradientLayout(int total, float slope, list<int> origin, list<int> gradientDimensions);
Functor UniformDiscreteDist(float n1, float n2);
Functor LoadSparseMatrix(string filename);
// TODO: duplicate?
//SamplingFctr2 IsoSampler();
//IsoSampler isoSampler();

// sum adds up the numbers and a list and returns the sum 
Functor Sum
{
 // handles ints and floats
 Function(list<int>); // returns
 Return(int);

 Function(list<float>); // returns
 Return(float);
};
Sum sum();

Trigger UnsignedTrigger(string description, Service svc, string operator, int criterion, int delay);
Trigger FloatTrigger(string description, Service svc, string operator, float criterion, int delay, string phaseName);
