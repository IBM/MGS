/*
 * Testing out plasticity different pre- and post-synaptic 
 * current injection
 */

#include "Topology.h"

#define MAX_COMPUTE_ORDER 0

#define _CCAT(x,y) x ## y 
#define CCAT(x,y) _CCAT(x,y)
#define _STR(x) #x 
#define STR(x) _STR(x)

#define CA_DCA 4.4        // 0.4 um^2/ms unbuffered
#define CA_BETA 0.002     // 0.05 dimensionless, Wagner and Keizer buffering constant
#define CA_CLEARANCE 1.1  // 1.1, 0.5 ms^-1
#define CA_BASELINE 0.1   // uM

Functor Print;
Print print();
  

Connector PolyConnectorFunctor();   
PolyConnectorFunctor polyConnect();

Connector ServiceConnectorFunctor();
ServiceConnectorFunctor serviceConnect();   

Layout TissueLayoutFunctor();
TissueLayoutFunctor tissueLayoutFunctor();    

NodeInitializer TissueNodeInitFunctor();
TissueNodeInitFunctor tissueNodeInitFunctor();

Connector TissueConnectorFunctor();
TissueConnectorFunctor tissueConnectorFunctor();

Functor TissueProbeFunctor();
TissueProbeFunctor tissueProbeFunctor();

Functor TissueFunctor(string commandLine, string commandLineModification, 
          string channelParamaterFile, string synapseParameteurFile,
          Functor, Functor, Functor, Functor, int compartmentSize);

TissueFunctor tissueFunctor("neurons.txt -u bt -o neurons_developed.txt -j 2 -q 51 -a 1.0 -p params/DevParams.par -x " STR(_X_) " -y " STR(_Y_) " -z " STR(_Z_) 
          " -e 0.001 -t 0.01 -m 0", " -p params/DetParams.par -m 0 -n cost-volume",
          "params/CptParams.par", "params/ChanParams.par", "params/SynParams.par",
          tissueLayoutFunctor, tissueNodeInitFunctor, tissueConnectorFunctor, tissueProbeFunctor);

GranuleMapper GridGranuleMapper(string description, list<int> dimensions, list<int> densityVector);
GridGranuleMapper tissueGM("Tissue Grid's GridGranuleMapper", { _X_ , _Y_ , _Z_ }, {1});
  
InitPhases = { initialize1, initialize2, initialize3, initialize4, initialize5, initialize6 };

RuntimePhases = {updateNMDADepPlasticity, solveChannels, predictJunction,
#if MAX_COMPUTE_ORDER>6
      forwardSolve7,
#endif
#if MAX_COMPUTE_ORDER>5  
      forwardSolve6,
#endif
#if MAX_COMPUTE_ORDER>4
      forwardSolve5,  
#endif
#if MAX_COMPUTE_ORDER>3
      forwardSolve4,
#endif
#if MAX_COMPUTE_ORDER>2
      forwardSolve3,
#endif
#if MAX_COMPUTE_ORDER>1
      forwardSolve2,
#endif
#if MAX_COMPUTE_ORDER>0 
      forwardSolve1,
#endif
      solve, 
#if MAX_COMPUTE_ORDER>0 
            backwardSolve1,
#endif
#if MAX_COMPUTE_ORDER>1
            backwardSolve2,
#endif  
#if MAX_COMPUTE_ORDER>2
            backwardSolve3,
#endif
#if MAX_COMPUTE_ORDER>3 
            backwardSolve4,
#endif
#if MAX_COMPUTE_ORDER>4
            backwardSolve5,
#endif
#if MAX_COMPUTE_ORDER>5
            backwardSolve6,
#endif
#if MAX_COMPUTE_ORDER>6
            backwardSolve7,
#endif
      correctJunction, finish };
FinalPhases = { finalize };

NodeType HodgkinHuxleyVoltage (<
      Ra=0.001,           // Gohm*um
      Na=64.5,            // mM
      K=553.2,            // mM 
      E_leak=-90.0        // mV
           >) { initializeVoltage->initialize2 };

NodeType CaConcentration (<
                        DCa=CA_DCA,                 // um^2/ms unbuffered
                        beta=CA_BETA,               // dimensionless, Wagner and Keizer buffering constant
                        CaBaseline=CA_BASELINE      // uM
           >) { initializeCaConcentration->initialize2, deriveParameters->initialize2 };


NodeType VoltageEndPoint { produceInitialState->initialize1,
#if MAX_COMPUTE_ORDER>0
        produceSolvedVoltage-> CCAT(backwardSolve,MAX_COMPUTE_ORDER),
#else
        produceSolvedVoltage->solve,
#endif
        produceFinishedVoltage->finish
      };

NodeType CaConcentrationEndPoint { produceInitialState->initialize1,
#if MAX_COMPUTE_ORDER>0
        produceSolvedCaConcentration-> CCAT(backwardSolve,MAX_COMPUTE_ORDER),
#else
        produceSolvedCaConcentration->solve,
#endif
        produceFinishedCaConcentration->finish
      };

#if MAX_COMPUTE_ORDER>0
NodeType BackwardSolvePoint0 { produceInitialState->initialize1,
        produceBackwardSolution->solve };
NodeType ForwardSolvePoint1 { produceInitialState->initialize1,
        produceInitialCoefficients->initialize2,
        produceForwardSolution->forwardSolve1 };
#endif

#if MAX_COMPUTE_ORDER>1
NodeType BackwardSolvePoint1 { produceInitialState->initialize1,
        produceBackwardSolution->backwardSolve1 };
NodeType ForwardSolvePoint2 { produceInitialState->initialize1,
        produceInitialCoefficients->initialize2,
        produceForwardSolution->forwardSolve2 };
#endif

#if MAX_COMPUTE_ORDER>2
NodeType BackwardSolvePoint2 { produceInitialState->initialize1,
        produceBackwardSolution->backwardSolve2 };
NodeType ForwardSolvePoint3 { produceInitialState->initialize1,
        produceInitialCoefficients->initialize2,
        produceForwardSolution->forwardSolve3 };
#endif
  
#if MAX_COMPUTE_ORDER>3

NodeType BackwardSolvePoint3 { produceInitialState->initialize1,
        produceBackwardSolution->backwardSolve3 };
NodeType ForwardSolvePoint4 { produceInitialState->initialize1,
        produceInitialCoefficients->initialize2,
        produceForwardSolution->forwardSolve4 };
#endif

#if MAX_COMPUTE_ORDER>4
NodeType BackwardSolvePoint4 { produceInitialState->initialize1,
        produceBackwardSolution->backwardSolve4 };
NodeType ForwardSolvePoint5 { produceInitialState->initialize1,
        produceInitialCoefficients->initialize2,
        produceForwardSolution->forwardSolve5 };
#endif

#if MAX_COMPUTE_ORDER>5
NodeType BackwardSolvePoint5 { produceInitialState->initialize1,
        produceBackwardSolution->backwardSolve5 };
NodeType ForwardSolvePoint6 { produceInitialState->initialize1,
          produceInitialCoefficients->initialize2,
        produceForwardSolution->forwardSolve6 };
#endif

#if MAX_COMPUTE_ORDER>6
NodeType BackwardSolvePoint6 { produceInitialState->initialize1,
        produceBackwardSolution->backwardSolve6 };
NodeType ForwardSolvePoint7 { produceInitialState->initialize1,
        produceInitialCoefficients->initialize2,
        produceForwardSolution->forwardSolve7 };
#endif

NodeType HodgkinHuxleyVoltageJunction (<
      Ra=0.001,       // Gohm*um
      Na=64.5,        // mM
      K=553.2,        // mM 
      E_leak=-90.0    // mV
        >) { initializeJunction->initialize2 };

NodeType CaConcentrationJunction (<
                        DCa=CA_DCA,                 // um^2/ms unbuffered
                        beta=CA_BETA,               // dimensionless, Wagner and Keizer buffering constant
                        CaBaseline=CA_BASELINE      // uM
        >) { deriveParameters->initialize2, initializeJunction->initialize2 };

NodeType VoltageJunctionPoint { produceInitialState->initialize1, produceVoltage->predictJunction };
NodeType CaConcentrationJunctionPoint { produceInitialState->initialize1, produceCaConcentration->predictJunction };

NodeType ChannelHayNat { computeE->initialize2, initialize->initialize3, update->solveChannels };
NodeType ChannelHayNap { computeE->initialize2, initialize->initialize3, update->solveChannels };
NodeType ChannelHayHCN (< E_h = {-45.0} >) { initialize->initialize3, update->solveChannels };
NodeType ChannelHayMK { computeE->initialize2, initialize->initialize3, update->solveChannels };
NodeType ChannelHayKp { computeE->initialize2, initialize->initialize3, update->solveChannels };
NodeType ChannelHayKt { computeE->initialize2, initialize->initialize3, update->solveChannels };
NodeType ChannelHayKv31 { computeE->initialize2, initialize->initialize3, update->solveChannels };
NodeType ChannelHayCaHVA { initialize->initialize3, update->solveChannels };
NodeType ChannelHayCaLVA { initialize->initialize3, update->solveChannels };
NodeType ChannelHaySK { computeE->initialize2, initialize->initialize3, update->solveChannels };

// NodeType CaConnexon { produceInitialState->initialize2, produceState->finish, computeState->solveChannels };
NodeType Connexon { produceInitialVoltage->initialize2, produceVoltage->finish, computeState->solveChannels };

NodeType AMPAReceptor (<
          E=0.0,        // mV
          alpha=0.05, // uM^-1 msec^-1
          beta=2.0,    // msec^1
          Tmax=180,     // 160-190 uM
          Vp=2.0,       // mV
          Kp=5.0        // mV
          >) { initializeAMPA->initialize3, updateAMPA->solveChannels };

// Graupner&Brunel cortical slices parameters

//%         lr.tau_ca lr.Cpre lr.Cpost lr.theta_d lr.theta_p lr.gamma_d lr.gamma_p lr.tau lr.w_th lr.delay

    //params = [22.69e-3 0.56*1.75 1.23 1 1.3 331.9  725.085  346.3615/10  0.5   4.6e-3]; %Speedup


NodeType NMDAReceptor (<
          E = 0.0,       // mV
          alpha=0.000512,  // uM^-1 msec^-1
          beta=0.053,     // msec^1
          Tmax=180,      // 160-190 uM
          Vp=2.0,        // mV
                            Kp=5.0,        // mV
          plasticityOn = 0,
                            plasticityStartAt = 0, //ms
                            plasticityStopAt = 100000, //ms
          theta_d = 1.0,
          theta_p = 1.3,
          gamma_d = 100, // 331.9,
          gamma_p = 125, // 725.085,
          tau = 34600.3615, //ms
                w_th = 0.5,
          deltaNMDAR = 0, // Turns on/off changes in NMDARs
          alphaBuffer = 0.0175,
          tauBuffer = 3000
 >) { initializeNMDA->initialize3, updateNMDA->solveChannels };
//           plasticityOn = 1, theta_d = 1.0, theta_p = 1.3, gamma_d = 241.356, gamma_p = 150.0, tau = 150000.0, w_th = 0.5 >) { initializeNMDA->initialize3, updateNMDA->solveChannels, updateNMDADepPlasticity->solveChannels };

NodeType GABAAReceptor (<
          E=-80.0,      // mV
          alpha=0.005,  // uM^-1 msec^-1
          beta=0.18,    // msec^1
          Tmax=185,     // 185 um
          Vp=2.0,       // mV
          Kp=5.0        // mV
          >) { initializeGABAA->initialize3, updateGABAA->solveChannels };

NodeType PreSynapticPoint { produceInitialState->initialize2, produceState->finish };

ConstantType ExtracellularMedium;
ExtracellularMedium extracellularMedium<  Na=500.0,  // uM or mM???
                                          K=17.0,    // uM or mM???
                                          T=281,     // degK
                                          Ca=750.0,  // uM
                                          Mg=1.0>;   // uM
ConstantType TimeStep;
TimeStep timeStep< deltaT=0.010 >; // msec

Trigger UnsignedTrigger(string description, Service svc, string operator, int criterion, int delay, string phaseName);
Trigger CompositeTrigger(string description, Trigger triggerA, int critA, string operator, Trigger triggerB, int critB, int delay, string phaseName);

UnsignedTrigger recOn("Iteration Trigger : !% 20", 
          ::Iteration, "!%", 20, 0, solveChannels ); //Record every ms

VariableType CurrentPulseGenerator { initialize->initialize1, update->solveChannels };
CurrentPulseGenerator synapseStimInj0<pattern="periodic", peak=0.1, duration=1, delay=200, period=600, last=3600, inc=0>;
CurrentPulseGenerator currentStimInj0<pattern="periodic", peak=2000, duration=3, period=620, delay=1785, last=3600, inc=0>; 
polyConnect(timeStep, currentStimInj0, <>, <>);
CurrentPulseGenerator currentStimInj1<pattern="periodic", peak=2000, duration=3, period=5000, delay=400, last=3600, inc=0>; 
polyConnect(timeStep, currentStimInj1, <>, <>);


VariableType VoltageDisplay{ initialize->initialize1 };
VoltageDisplay voltageDisplay<fileName="out/somaV.dat">;
voltageDisplay.dataCollection(<>) on recOn;

VariableType CalciumDisplay{ initialize->initialize4 };
CalciumDisplay calciumSomaDisplay<fileName="out/somaCa.dat">;
calciumSomaDisplay.dataCollection(<>) on recOn;

VoltageDisplay synapseVoltageDisplay0<fileName="out/synapseV0.dat">;
synapseVoltageDisplay0.dataCollection(<>) on recOn;
CalciumDisplay synapseCalciumDisplay0<fileName="out/synapseC0.dat">;
synapseCalciumDisplay0.dataCollection(<>) on recOn;

Struct TissueSite;

Grid Tissue
{
   Dimension( _X_ , _Y_ , _Z_ );

   Layer(branches, HodgkinHuxleyVoltage, tissueFunctor("Layout", <nodekind="CompartmentVariables[Voltage]">), <nodekind="CompartmentVariables[Voltage]">, tissueGM);
   Layer(branches_Ca, CaConcentration, tissueFunctor("Layout", <nodekind="CompartmentVariables[Calcium]">), <nodekind="CompartmentVariables[Calcium]">, tissueGM);
   Layer(endPoints, VoltageEndPoint, tissueFunctor("Layout", <nodekind="EndPoints[Voltage]">), <nodekind="EndPoints[Voltage]">, tissueGM);
   Layer(endPoints_Ca, CaConcentrationEndPoint, tissueFunctor("Layout", <nodekind="EndPoints[Calcium]">), <nodekind="EndPoints[Calcium]">, tissueGM);
#if MAX_COMPUTE_ORDER>0
   Layer(fwdSolvePoints1, ForwardSolvePoint1, tissueFunctor("Layout", <nodekind="ForwardSolvePoints[Voltage][1]">), <nodekind="ForwardSolvePoints[Voltage][1]">, tissueGM);
   Layer(fwdSolvePoints1_Ca, ForwardSolvePoint1, tissueFunctor("Layout", <nodekind="ForwardSolvePoints[Calcium][1]">), <nodekind="ForwardSolvePoints[Calcium][1]">, tissueGM);
   Layer(bwdSolvePoints0, BackwardSolvePoint0, tissueFunctor("Layout", <nodekind="BackwardSolvePoints[Voltage][0]">), <nodekind="BackwardSolvePoints[Voltage][0]">, tissueGM);
   Layer(bwdSolvePoints0_Ca, BackwardSolvePoint0, tissueFunctor("Layout", <nodekind="BackwardSolvePoints[Calcium][0]">), <nodekind="BackwardSolvePoints[Calcium][0]">, tissueGM);
#endif
#if MAX_COMPUTE_ORDER>1
   Layer(fwdSolvePoints2, ForwardSolvePoint2, tissueFunctor("Layout", <nodekind="ForwardSolvePoints[Voltage][2]">), <nodekind="ForwardSolvePoints[Voltage][2]">, tissueGM);
   Layer(fwdSolvePoints2_Ca, ForwardSolvePoint2, tissueFunctor("Layout", <nodekind="ForwardSolvePoints[Calcium][2]">), <nodekind="ForwardSolvePoints[Calcium][2]">, tissueGM);
   Layer(bwdSolvePoints1, BackwardSolvePoint1, tissueFunctor("Layout", <nodekind="BackwardSolvePoints[Voltage][1]">), <nodekind="BackwardSolvePoints[Voltage][1]">, tissueGM);
   Layer(bwdSolvePoints1_Ca, BackwardSolvePoint1, tissueFunctor("Layout", <nodekind="BackwardSolvePoints[Calcium][1]">), <nodekind="BackwardSolvePoints[Calcium][1]">, tissueGM);
#endif
#if MAX_COMPUTE_ORDER>2
   Layer(fwdSolvePoints3, ForwardSolvePoint3, tissueFunctor("Layout", <nodekind="ForwardSolvePoints[Voltage][3]">), <nodekind="ForwardSolvePoints[Voltage][3]">, tissueGM);
   Layer(fwdSolvePoints3_Ca, ForwardSolvePoint3, tissueFunctor("Layout", <nodekind="ForwardSolvePoints[Calcium][3]">), <nodekind="ForwardSolvePoints[Calcium][3]">, tissueGM);
   Layer(bwdSolvePoints2, BackwardSolvePoint2, tissueFunctor("Layout", <nodekind="BackwardSolvePoints[Voltage][2]">), <nodekind="BackwardSolvePoints[Voltage][2]">, tissueGM);
   Layer(bwdSolvePoints2_Ca, BackwardSolvePoint2, tissueFunctor("Layout", <nodekind="BackwardSolvePoints[Calcium][2]">), <nodekind="BackwardSolvePoints[Calcium][2]">, tissueGM);
#endif
#if MAX_COMPUTE_ORDER>3
   Layer(fwdSolvePoints4, ForwardSolvePoint4, tissueFunctor("Layout", <nodekind="ForwardSolvePoints[Voltage][4]">), <nodekind="ForwardSolvePoints[Voltage][4]">, tissueGM);
   Layer(fwdSolvePoints4_Ca, ForwardSolvePoint4, tissueFunctor("Layout", <nodekind="ForwardSolvePoints[Calcium][4]">), <nodekind="ForwardSolvePoints[Calcium][4]">, tissueGM);
   Layer(bwdSolvePoints3, BackwardSolvePoint3, tissueFunctor("Layout", <nodekind="BackwardSolvePoints[Voltage][3]">), <nodekind="BackwardSolvePoints[Voltage][3]">, tissueGM);
   Layer(bwdSolvePoints3_Ca, BackwardSolvePoint3, tissueFunctor("Layout", <nodekind="BackwardSolvePoints[Calcium][3]">), <nodekind="BackwardSolvePoints[Calcium][3]">, tissueGM);
#endif
#if MAX_COMPUTE_ORDER>4
   Layer(fwdSolvePoints5, ForwardSolvePoint5, tissueFunctor("Layout", <nodekind="ForwardSolvePoints[Voltage][5]">), <nodekind="ForwardSolvePoints[Voltage][5]">, tissueGM);
   Layer(fwdSolvePoints5_Ca, ForwardSolvePoint5, tissueFunctor("Layout", <nodekind="ForwardSolvePoints[Calcium][5]">), <nodekind="ForwardSolvePoints[Calcium][5]">, tissueGM);
   Layer(bwdSolvePoints4, BackwardSolvePoint4, tissueFunctor("Layout", <nodekind="BackwardSolvePoints[Voltage][4]">), <nodekind="BackwardSolvePoints[Voltage][4]">, tissueGM);
   Layer(bwdSolvePoints4_Ca, BackwardSolvePoint4, tissueFunctor("Layout", <nodekind="BackwardSolvePoints[Calcium][4]">), <nodekind="BackwardSolvePoints[Calcium][4]">, tissueGM);
#endif
#if MAX_COMPUTE_ORDER>5
   Layer(fwdSolvePoints6, ForwardSolvePoint6, tissueFunctor("Layout", <nodekind="ForwardSolvePoints[Voltage][6]">), <nodekind="ForwardSolvePoints[Voltage][6]">, tissueGM);
   Layer(fwdSolvePoints6_Ca, ForwardSolvePoint6, tissueFunctor("Layout", <nodekind="ForwardSolvePoints[Calcium][6]">), <nodekind="ForwardSolvePoints[Calcium][6]">, tissueGM);
   Layer(bwdSolvePoints5, BackwardSolvePoint5, tissueFunctor("Layout", <nodekind="BackwardSolvePoints[Voltage][5]">), <nodekind="BackwardSolvePoints[Voltage][5]">, tissueGM);
   Layer(bwdSolvePoints5_Ca, BackwardSolvePoint5, tissueFunctor("Layout", <nodekind="BackwardSolvePoints[Calcium][5]">), <nodekind="BackwardSolvePoints[Calcium][5]">, tissueGM);
#endif
#if MAX_COMPUTE_ORDER>6
   Layer(fwdSolvePoints7, ForwardSolvePoint7, tissueFunctor("Layout", <nodekind="ForwardSolvePoints[Voltage][7]">), <nodekind="ForwardSolvePoints[Voltage][7]">, tissueGM);
   Layer(fwdSolvePoints7_Ca, ForwardSolvePoint7, tissueFunctor("Layout", <nodekind="ForwardSolvePoints[Calcium][7]">), <nodekind="ForwardSolvePoints[Calcium][7]">, tissueGM);
   Layer(bwdSolvePoints6, BackwardSolvePoint6, tissueFunctor("Layout", <nodekind="BackwardSolvePoints[Voltage][6]">), <nodekind="BackwardSolvePoints[Voltage][6]">, tissueGM);
   Layer(bwdSolvePoints6_Ca, BackwardSolvePoint6, tissueFunctor("Layout", <nodekind="BackwardSolvePoints[Calcium][6]">), <nodekind="BackwardSolvePoints[Calcium][6]">, tissueGM);
#endif

   Layer(junctions, HodgkinHuxleyVoltageJunction, tissueFunctor("Layout", <nodekind="Junctions[Voltage]">), <nodekind="Junctions[Voltage]">, tissueGM);
   Layer(junctions_Ca, CaConcentrationJunction, tissueFunctor("Layout", <nodekind="Junctions[Calcium]">), <nodekind="Junctions[Calcium]">, tissueGM);
   Layer(junctionPoints, VoltageJunctionPoint, tissueFunctor("Layout", <nodekind="JunctionPoints[Voltage]">), <nodekind="JunctionPoints[Voltage]">, tissueGM);
   Layer(junctionPoints_Ca, CaConcentrationJunctionPoint, tissueFunctor("Layout", <nodekind="JunctionPoints[Calcium]">), <nodekind="JunctionPoints[Calcium]">, tissueGM);

   Layer(NatChannels, ChannelHayNat, tissueFunctor("Layout", < nodekind="Channels[Nat]" >), < nodekind="Channels[Nat]" >, tissueGM);
   Layer(NapChannels, ChannelHayNap, tissueFunctor("Layout", < nodekind="Channels[Nap]" >), < nodekind="Channels[Nap]" >, tissueGM);
   Layer(HCNChannels, ChannelHayHCN, tissueFunctor("Layout", < nodekind="Channels[HCN]" >), < nodekind="Channels[HCN]" >, tissueGM);
   Layer(MKChannels, ChannelHayMK, tissueFunctor("Layout", < nodekind="Channels[MK]" >), < nodekind="Channels[MK]" >, tissueGM);
   Layer(KpChannels, ChannelHayKp, tissueFunctor("Layout", < nodekind="Channels[Kp]" >), < nodekind="Channels[Kp]" >, tissueGM);
   Layer(KtChannels, ChannelHayKt, tissueFunctor("Layout", < nodekind="Channels[Kt]" >), < nodekind="Channels[Kt]" >, tissueGM);
   Layer(Kv31Channels, ChannelHayKv31, tissueFunctor("Layout", < nodekind="Channels[Kv31]" >), < nodekind="Channels[Kv31]" >, tissueGM);
   Layer(CahChannels, ChannelHayCaHVA, tissueFunctor("Layout", < nodekind="Channels[Cah]" >), < nodekind="Channels[Cah]" >, tissueGM);
   Layer(CalChannels, ChannelHayCaLVA, tissueFunctor("Layout", < nodekind="Channels[Cal]" >), < nodekind="Channels[Cal]" >, tissueGM);
   Layer(SKChannels, ChannelHaySK, tissueFunctor("Layout", < nodekind="Channels[SK]" >), < nodekind="Channels[SK]" >, tissueGM);

   // Layer(DendriticSpines, CaConnexon, tissueFunctor("Layout", < nodekind="ElectricalSynapses[DenSpine]" >), < nodekind="ElectricalSynapses[DenSpine]" >, tissueGM);
   Layer(DendriticSpines, Connexon, tissueFunctor("Layout", < nodekind="ElectricalSynapses[DenSpine]" >), < nodekind="ElectricalSynapses[DenSpine]" >, tissueGM);
   Layer(AMPASynapses, AMPAReceptor, tissueFunctor("Layout", < nodekind="ChemicalSynapses[AMPA]" >), < nodekind="ChemicalSynapses[AMPA]" >, tissueGM);
   Layer(NMDASynapses, NMDAReceptor, tissueFunctor("Layout", < nodekind="ChemicalSynapses[NMDA]" >), < nodekind="ChemicalSynapses[NMDA]" >, tissueGM);
   Layer(GABAASynapses, GABAAReceptor, tissueFunctor("Layout", < nodekind="ChemicalSynapses[GABAA]" >), < nodekind="ChemicalSynapses[GABAA]" >, tissueGM);
   Layer(PreSynapticPoints, PreSynapticPoint, tissueFunctor("Layout", < nodekind="PreSynapticPoints[Voltage]" >), < nodekind="PreSynapticPoints[Voltage]" >, tissueGM);

   InitNodes ( .[].Layer(branches), tissueFunctor("NodeInit", <
                  compartmentalize = {"Vnew", 
                          "Vcur", 
                          "Aii", 
                          "Aim", 
                          "Aip", 
                          "RHS", 
                         },
                  Vnew = {-85.00}//-64.1235}
                      > ) );

   InitNodes ( .[].Layer(branches_Ca), tissueFunctor("NodeInit", <
                  compartmentalize = {"Ca_new", 
                          "Ca_cur", 
                          "currentToConc",
                          "Aii",
                          "Aim", 
                          "Aip", 
                          "RHS"
                         },
                  Ca_new = {0.1}
                      > ) );

   InitNodes ( .[].Layer(endPoints), tissueFunctor("NodeInit", <> ) );
   InitNodes ( .[].Layer(endPoints_Ca), tissueFunctor("NodeInit", <> ) );
#if MAX_COMPUTE_ORDER>0
   InitNodes ( .[].Layer(fwdSolvePoints1), tissueFunctor("NodeInit", <> ) );
   InitNodes ( .[].Layer(fwdSolvePoints1_Ca), tissueFunctor("NodeInit", <> ) );
   InitNodes ( .[].Layer(bwdSolvePoints0), tissueFunctor("NodeInit", <> ) );
   InitNodes ( .[].Layer(bwdSolvePoints0_Ca), tissueFunctor("NodeInit", <> ) );
#endif
#if MAX_COMPUTE_ORDER>1
   InitNodes ( .[].Layer(fwdSolvePoints2), tissueFunctor("NodeInit", <> ) );
   InitNodes ( .[].Layer(fwdSolvePoints2_Ca), tissueFunctor("NodeInit", <> ) );
   InitNodes ( .[].Layer(bwdSolvePoints1), tissueFunctor("NodeInit", <> ) );
   InitNodes ( .[].Layer(bwdSolvePoints1_Ca), tissueFunctor("NodeInit", <> ) );
#endif
#if MAX_COMPUTE_ORDER>2
   InitNodes ( .[].Layer(fwdSolvePoints3), tissueFunctor("NodeInit", <> ) );
   InitNodes ( .[].Layer(fwdSolvePoints3_Ca), tissueFunctor("NodeInit", <> ) );
   InitNodes ( .[].Layer(bwdSolvePoints2), tissueFunctor("NodeInit", <> ) );
   InitNodes ( .[].Layer(bwdSolvePoints2_Ca), tissueFunctor("NodeInit", <> ) );
#endif
#if MAX_COMPUTE_ORDER>3
   InitNodes ( .[].Layer(fwdSolvePoints4), tissueFunctor("NodeInit", <> ) );
   InitNodes ( .[].Layer(fwdSolvePoints4_Ca), tissueFunctor("NodeInit", <> ) );
   InitNodes ( .[].Layer(bwdSolvePoints3), tissueFunctor("NodeInit", <> ) );
   InitNodes ( .[].Layer(bwdSolvePoints3_Ca), tissueFunctor("NodeInit", <> ) );
#endif
#if MAX_COMPUTE_ORDER>4
   InitNodes ( .[].Layer(fwdSolvePoints5), tissueFunctor("NodeInit", <> ) );
   InitNodes ( .[].Layer(fwdSolvePoints5_Ca), tissueFunctor("NodeInit", <> ) );
   InitNodes ( .[].Layer(bwdSolvePoints4), tissueFunctor("NodeInit", <> ) );
   InitNodes ( .[].Layer(bwdSolvePoints4_Ca), tissueFunctor("NodeInit", <> ) );
#endif
#if MAX_COMPUTE_ORDER>5
   InitNodes ( .[].Layer(fwdSolvePoints6), tissueFunctor("NodeInit", <> ) );
   InitNodes ( .[].Layer(fwdSolvePoints6_Ca), tissueFunctor("NodeInit", <> ) );
   InitNodes ( .[].Layer(bwdSolvePoints5), tissueFunctor("NodeInit", <> ) );
   InitNodes ( .[].Layer(bwdSolvePoints5_Ca), tissueFunctor("NodeInit", <> ) );
#endif
#if MAX_COMPUTE_ORDER>6
   InitNodes ( .[].Layer(fwdSolvePoints7), tissueFunctor("NodeInit", <> ) );
   InitNodes ( .[].Layer(fwdSolvePoints7_Ca), tissueFunctor("NodeInit", <> ) );
   InitNodes ( .[].Layer(bwdSolvePoints6), tissueFunctor("NodeInit", <> ) );
   InitNodes ( .[].Layer(bwdSolvePoints6_Ca), tissueFunctor("NodeInit", <> ) );
#endif
   InitNodes ( .[].Layer(junctions), tissueFunctor("NodeInit", < Vnew = {-85.000} /*-64.3346}*/  > ) );
   InitNodes ( .[].Layer(junctions_Ca), tissueFunctor("NodeInit", < Ca_new = {0.1} > ) ); 
   InitNodes ( .[].Layer(junctionPoints), tissueFunctor("NodeInit", <> ) );
   InitNodes ( .[].Layer(junctionPoints_Ca), tissueFunctor("NodeInit", <> ) );

   InitNodes ( .[].Layer(NatChannels), tissueFunctor("NodeInit", <
                  compartmentalize = { "gbar" },
                  gbar = {0.0} 
                 > ) ); 

   InitNodes ( .[].Layer(NapChannels), tissueFunctor("NodeInit", <
                  compartmentalize = { "gbar" },
                  gbar = {0.0} 
                 > ) ); 

   InitNodes ( .[].Layer(HCNChannels), tissueFunctor("NodeInit", <
                  compartmentalize = { "gbar" },
                  gbar = {0.0}
                  > ) );

   InitNodes ( .[].Layer(MKChannels), tissueFunctor("NodeInit", <
                  compartmentalize = { "gbar" },
                  gbar = {0.0}
                  > ) );

   InitNodes ( .[].Layer(KpChannels), tissueFunctor("NodeInit", <
                  compartmentalize = { "gbar" },
                  gbar = {0.0}
                  > ) );

   InitNodes ( .[].Layer(KtChannels), tissueFunctor("NodeInit", <
                  compartmentalize = { "gbar" },
                  gbar = {0.0}
                  > ) );

   InitNodes ( .[].Layer(Kv31Channels), tissueFunctor("NodeInit", <
                  compartmentalize = { "gbar" },
                  gbar = {0.0}
                  > ) );
                 
   InitNodes ( .[].Layer(CahChannels), tissueFunctor("NodeInit", <
                  compartmentalize = { "gbar" },
                  gbar = {0.0}
                  > ) );

   InitNodes ( .[].Layer(CalChannels), tissueFunctor("NodeInit", <
                  compartmentalize = { "gbar" },
                  gbar = {0.0}
                  > ) );

   InitNodes ( .[].Layer(SKChannels), tissueFunctor("NodeInit", <
                  compartmentalize = { "gbar" },
                  gbar = {0.0}
                  > ) );

   InitNodes ( .[].Layer(DendriticSpines), tissueFunctor("NodeInit", <
                  I = 0.0,
                  // I_Ca = 0,
                  g = 2.0 // nS
                  > ) );
   InitNodes ( .[].Layer(AMPASynapses), tissueFunctor("NodeInit", <
                  gbar = 5.0 // 2.2223 nS/um^2
                  > ) );

   InitNodes ( .[].Layer(NMDASynapses), tissueFunctor("NodeInit", <
                  gbar = 5.0, w = 1.0 // 0.17 0.115 nS/um^2 // 
                  > ) );

   InitNodes ( .[].Layer(GABAASynapses), tissueFunctor("NodeInit", <
                  gbar = 0.50 // nS/um^2
                  > ) );  
   
   InitNodes ( .[].Layer(PreSynapticPoints), tissueFunctor("NodeInit", <> ) );

   polyConnect(timeStep, .[].Layer(branches, junctions, branches_Ca, junctions_Ca, NatChannels, NapChannels, HCNChannels, MKChannels, KpChannels, KtChannels, Kv31Channels, CahChannels, CalChannels, SKChannels), <>, <identifier="dt">);
   polyConnect(extracellularMedium, .[].Layer(NatChannels, NapChannels, HCNChannels, MKChannels, KpChannels, KtChannels, Kv31Channels, NMDASynapses, CahChannels, CalChannels, SKChannels), <>, <identifier="EC">);
   polyConnect(timeStep, .[].Layer(AMPASynapses), <>, <identifier="dt">);
   polyConnect(timeStep, .[].Layer(NMDASynapses), <>, <identifier="dt">);
   polyConnect(timeStep, .[].Layer(GABAASynapses), <>, <identifier="dt">);

   tissueFunctor("Connect", <> ); 

   polyConnect(timeStep, synapseStimInj0, <>, <>);
   polyConnect(synapseStimInj0, tissueFunctor("Probe", <CATEGORY="JUNCTION", TYPE="Voltage", BRANCHORDER=0, NEURON_INDEX=1>), <>, <identifier="stimulation">);
   TissueSite synapseSite0( -41.813584824468236, 175.47049244293586, -0.6457233469214552, 5.0 );
   polyConnect(timeStep, synapseVoltageDisplay0, <>, <>);
   polyConnect(tissueFunctor("Probe", <CATEGORY="BRANCH", TYPE="Voltage", NEURON_INDEX=0>), synapseVoltageDisplay0, <>, <site=synapseSite0>);
   polyConnect(timeStep, synapseCalciumDisplay0, <>, <>);
   polyConnect(tissueFunctor("Probe", <CATEGORY="BRANCH", TYPE="Calcium", NEURON_INDEX=0>), synapseCalciumDisplay0, <>, <site=synapseSite0>);

   TissueSite currentStimSite0( 0, 0, 0, 1.0 );
   polyConnect(currentStimInj0, tissueFunctor("Probe", <CATEGORY="JUNCTION", TYPE="Voltage", NEURON_INDEX=0>), <>, <identifier="stimulation", site=currentStimSite0>);
   TissueSite currentStimSite1( 0, 0, 0, 1.0 );
   polyConnect(currentStimInj1, tissueFunctor("Probe", <CATEGORY="JUNCTION", TYPE="Voltage", NEURON_INDEX=0>), <>, <identifier="stimulation", site=currentStimSite1>);

   polyConnect(timeStep, voltageDisplay, <>, <>);
   polyConnect( tissueFunctor("Probe", <CATEGORY="JUNCTION", TYPE="Voltage", BRANCHORDER=0>), voltageDisplay, <>, <>);
   polyConnect(timeStep, calciumSomaDisplay, <>, <>);
   polyConnect( tissueFunctor("Probe", <CATEGORY="JUNCTION", TYPE="Calcium", BRANCHORDER=0>), calciumSomaDisplay, <>, <>);

};

Tissue tissue;

UnsignedTrigger endTrig("Iteration Trigger to end or stop", 
       ::Iteration, "==", 50000, 0, correctJunction); 

Stop on endTrig;

