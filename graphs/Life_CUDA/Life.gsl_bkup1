// =================================================================
// Licensed Materials - Property of IBM
//
// "Restricted Materials of IBM"
//
// BCM-YKT-07-18-2017
//
// (C) Copyright IBM Corp. 2005-2017  All rights reserved
//
// US Government Users Restricted Rights -
// Use, duplication or disclosure restricted by
// GSA ADP Schedule Contract with IBM Corp.
//
// =================================================================

//#include "../std/std.gsl"
Layout UniformLayout(int); // Functor provides uniform density vector for grid layers
SamplingFctr1 RadialSampler(float radius, int borderTolerance);
SamplingFctr2 EachDst(SamplingFctr1 sf1);
Functor OutAttrDefault; //  Functor that gives default out attribute Pset for a node
OutAttrDefault outAttrDef();
Functor InAttrDefault; //  Functor that gives default in attribute Pset for a node
InAttrDefault inAttrDef();
Connector ConnectNodeSetsFunctor();
ConnectNodeSetsFunctor connectNodeSets();

InitPhases = { initialize };
RuntimePhases = { dataCollect, update, copy, lastPhase };
FinalPhases = { finalize };

NodeType LifeNode(< tooSparse=1, tooCrowded=4 >);

Grid World
{
#if 1
   Dimension(2,2);
   Layer(nodes, LifeNode, UniformLayout(1), < nodekind="Nodes" >);
   Layer(nodes2, LifeNode, UniformLayout(1), < nodekind="Nodes" >);
   /*InitNodes ( .[25:75, 25:75].Layer(nodes), Same( Pset<LifeNode, NodeInit> ( <value = 1> ) ) );*/
   /*InitNodes ( .[40:60, 40:60].Layer(nodes), Same( Pset<LifeNode, NodeInit> ( <value = 0> ) ) );*/
   //Dimension(100,100);
   //Layer(nodes, LifeNode, UniformLayout(1), < nodekind="Nodes" >);
   //InitNodes ( .[25:75, 25:75].Layer(nodes), Same( Pset<LifeNode, NodeInit> ( <value = 1> ) ) );
   //InitNodes ( .[40:60, 40:60].Layer(nodes), Same( Pset<LifeNode, NodeInit> ( <value = 0> ) ) );
#else
   Dimension(1000,1000);
   Layer(nodes, LifeNode, UniformLayout(1), < nodekind="Nodes" >);
   InitNodes ( .[250:750, 250:750].Layer(nodes), Same( Pset<LifeNode, NodeInit> ( <value = 1> ) ) );
   InitNodes ( .[400:600, 400:600].Layer(nodes), Same( Pset<LifeNode, NodeInit> ( <value = 0> ) ) );
#endif
   NodeSet all(.[].Layer(nodes));
   connectNodeSets(all, all, EachDst(RadialSampler(1.5)), outAttrDef, inAttrDef);
};

World world;
Grid World_other
{
   Dimension(4,4);
   Layer(nodes3, LifeNode, UniformLayout(1), < nodekind="Nodes" >);
};
World_other world2;

// DCA directives here

//VariableType LifeDataCollector;
//LifeDataCollector collector<fileName="LifeOutput.txt">;
//
////serviceConnect(world[].Layer(nodes), collector, GetNodeCoordFunctor(), "coordsArray",
////	       "value", "vals");
//
//polyConnect(world[].Layer(nodes), collector, <>, <>);
//
Trigger UnsignedTrigger(string description, Service svc, string operator, int criterion, int delay);
//Trigger CompositeTrigger(string description, Trigger triggerA, int critA, string operator, Trigger triggerB, int critB, int delay);
//
//UnsignedTrigger iterTrig("Iteration Trigger : >= 1 ", 
// 			 ::Iteration, ">=", 1, 0, dataCollect);
//collector.dataCollection() on iterTrig;

UnsignedTrigger endTrig("Iteration Trigger to end or stop", 
			 ::Iteration, "==", 1000, 0, lastPhase); 
Stop on endTrig;
