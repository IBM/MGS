// =================================================================
// Licensed Materials - Property of IBM
//
// "Restricted Materials of IBM"
//
// BCM-YKT-07-18-2017
//
// (C) Copyright IBM Corp. 2005-2017  All rights reserved
//
// US Government Users Restricted Rights -
// Use, duplication or disclosure restricted by
// GSA ADP Schedule Contract with IBM Corp.
//
// =================================================================

#include "../std/std.gsl"

InitPhases = { init1, init2, initialize };
RuntimePhases = { run1, run2, dataCollect, lastPhase };
FinalPhases = { finalize };

// ##### Common parameters #####
#define DIRECTORY "./"
#define FILE_EXTENSION ".dat"
#define DELTAT 0.0001
#define XDIM 500
#define YDIM 1
#define ZDIM 1
#define N_INNER 10
#define XDIM_INNER 5000 // XDIM * N_INNER
#define YDIM_INNER 1
#define ZDIM_INNER 1
#define INNER_FRAC 0.002 // (N_INNER / XDIM_INNER)
#define OP_T 10000000 //5000000
#define OP_PERT_HZ 1 // to the perturb with a change in Hz the system or not
#define OP_PERT_HZ_T 5000000 // if perturbing the system with a change in Hz, when
#define OP_PERT_AMPA 1 // to the perturb with a change in AMPA weights the system or not
#define OP_PERT_AMPA_T OP_PERT_HZ_T // if perturbing the system with a change in AMPA weights, when



// ##### Nodes #####
NodeType PoissonIAFUnit(<
                        deltaT = DELTAT, // in s
                        op_perturbation = OP_PERT_HZ,
                        perturbationT = OP_PERT_HZ_T
                        >) {update->run1 };

NodeType BoutonIAFUnit(<
                       glutamateAdaptRate = 0.00004,   // in arb. unit; free parameter
                       glutamateRecoverTau = 4.28,    // in s (from Pyott and Rosenmund, 2002; slow component)
                       Cb1RriseTau = 4.0,             // in s (fitted to Wilson & Nicoll, 2001; Fig 2D, NB hippocampal gabba)
                       Cb1RfallTau = 22.5,            // in s (from Wilson & Nicoll, 2001; Fig 2D, NB hippocampal gabba)
                       deltaT = DELTAT,               // in s
                       sharedDirectory = DIRECTORY,
                       sharedFileExt = FILE_EXTENSION,
                       op_saveIndexs = 1              // whether to save the incoming pre-indexs or not
                       >) {initializeShared->init1, update->run2};

NodeType CleftAstrocyteIAFUnit(<
                               glutamateDecayTau = 0.045, // in s (fitted to Parsons et al., 2016; Sup Fig 6D, 1 pulse)
                               deltaT = DELTAT            // in s
                               >) { update->run1};

#define ECBPRODC 10.0
#define ECBPRODD 0.5
NodeType SpineIAFUnit(<
                      AMPAriseTau = 0.004, // in s (fitted to Fino et al., 2010; Fig 1B)
                      AMPAfallTau = 0.030, // in s (fitted to Fino et al., 2010; Fig 1B)
                      mGluR5riseTau = 0.25, // in s (fitted to Reichelt & Knopfel, 2002; Fig 1B, NB Purkinje)
                      mGluR5fallTau = 0.25, // in s (fitted to Reichelt & Knopfel, 2002; Fig 1B, NB Purkinje)
                      mGluR5sensitivity = 400.0, // mGlur sensitivity to excess glutamate; free parameter
                      CariseTau = 0.010,   // in s (fitted to Tuan's model)
                      CafallTau = 0.008,   // in s (fitted to Tuan's model)
                      op_CaVSCCdepend = 1, // CaVSCC Ca2+ is dependent on spine size
                      CaVSCC = 250.0,//90.0,       // in arb. unit; free parameter
                      CaVSCCpow = -0.5,    // CaVSCC*(AMPAweight^pow), in arb. unit
                      CaBP = 0.0,          // in arb. unit; free parameter
                      ECBprodC = ECBPRODC, // in arb. unit
                      ECBprodD = ECBPRODD, // in arb. unit
                      deltaT = DELTAT,     // in s
                      sharedDirectory = DIRECTORY,
                      sharedFileExt = FILE_EXTENSION,
                      op_saveWeights = 1,   // whether to save the spine weights or not
                      op_perturbation = OP_PERT_AMPA,
                      perturbationT = OP_PERT_AMPA_T,
                      collectWeightsOn = {1,OP_PERT_AMPA_T} // when to save the spine weights
                      >) {initializeShared->init2, update->run2, outputWeightsShared->dataCollect};

NodeType MihalasNieburSynapseIAFUnit(<
                                     b = 10.0,             // s^-1
                                     GoC = 50.0,           // s^-1
                                     C = 1.0,
                                     k = {200.0, 20.0},    // s^-1
                                     Theta_inf = -0.05,    // V
                                     R = {0.0, 1.0},
                                     E_L = -0.07,          // V
                                     V_r = -0.07,          // V
                                     Theta_r = -0.06,      // V
                                     a = 0.0,              // s^-1
                                     A = {0.0, 0},         // V/s
                                     deltaT = 0.0001,      // s
                                     spike_cntMax = 0.001, // s
                                     np = 0,
                                     V_max = 0.04
                                     >) {update->run1, threshold->run2};



// ##### Initialize nodes #####
// Initialize Hz and spikes
BindName initInput("Hz", UniformDist(0,150));//Scale(Exp(RangePassThru(-100,"<=",Gaussian(0.0,1.0),"<=",2.5)),10.0)); // arb. unit
//BindName initInput("Hz", Scale(Exp(RangePassThru(-100,"<=",Gaussian(0.0,1.0),"<=",2.0)),10.0)); // arb. unit
//BindName initInput("Hz", 20.0); // arb. unit
NdplNodeInit heterInput(initInput);

// Initialize boutons
//BindName initBoutons("availableGlutamate", UniformDist(0.0, 2.0), "maxGlutamate", 2.0); // arb. unit, arb. unit
BindName initBoutons("availableGlutamate", 2.0, "maxGlutamate", 2.0, "CB1R", 1.0); // arb. unit, arb. unit, arb. unit
NdplNodeInit heterBoutons(initBoutons);

// Initialize clefts/astrocytes
BindName initCleftsAstrocytes(); // nothing to initialize
NdplNodeInit heterCleftsAstrocytes(initCleftsAstrocytes);

// Initialize spines
BindName initSpines("AMPAweight", UniformDist(0.0, 1.5)); // arb. unit
NdplNodeInit heterSpines(initSpines);

// Initialize output neurons
BindName initOutput("V", UniformDist(-0.07, -0.06)); // Uniform from reset to thresh, mV
NdplNodeInit heterOutput(initOutput);



// ##### Weights scales between nodes #####
// Spike weights between Poisson input and boutons, structural plasticity
BindName IN_W("weight", 1.0, "identifier", "inputSpikes");
NdplInAttrInit inW(IN_W);

// Glutamate weights between boutons and clefts/astrocytes, structural plasticity
BindName GLUT_W("weight", 1.0, "identifier", "glutamateInput");
NdplInAttrInit glutW(GLUT_W);

// Glutamate weights between boutons and spines, structural plasticity
BindName PRE_W("weight", 1.0, "identifier", "glutamateInput");
NdplInAttrInit preW(PRE_W);

// AMPA weights between spines and output neurons, structural plasticity
BindName AMPA_W("weight", 100.0, "identifier", "AMPAcurrentInputs");
NdplInAttrInit ampaW(AMPA_W);

// Back-propagating spike weights between output neurons and spines, structural plasticity
BindName POST_W("weight", 0.0, "identifier", "postSpikesInput");
NdplInAttrInit postW(POST_W);

// Retrograde ECB weight between spines and clefts/atrocytes, structural plasticity
BindName ECB1_W("weight", 1.0, "identifier", "ECBinput");
NdplInAttrInit ecb1W(ECB1_W);

// Retrograde ECB weight between clefts/atrocytes and boutons, structural plasticity
BindName ECB2_W("weight", 1.0, "identifier", "ECBinput");
NdplInAttrInit ecb2W(ECB2_W);



// ##### Setup and connect the grids #####
Grid Input
{
  Dimension(XDIM,YDIM,ZDIM);
  Layer(input, PoissonIAFUnit, UniformLayout(1), < nodekind="Nodes" >);
  InitNodes(.[].Layer(input), heterInput);
};

Grid Cannabinoid
{
  Dimension(XDIM_INNER,YDIM_INNER,ZDIM_INNER);
  Layer(boutons, BoutonIAFUnit, UniformLayout(1), < nodekind="Nodes" >);
  InitNodes(.[].Layer(boutons), heterBoutons);
  Layer(cleftsAstrocytes, CleftAstrocyteIAFUnit, UniformLayout(1), < nodekind="Nodes" >);
  InitNodes(.[].Layer(cleftsAstrocytes), heterCleftsAstrocytes);
  Layer(spines, SpineIAFUnit, UniformLayout(1), < nodekind="Nodes" >);
  InitNodes(.[].Layer(spines), heterSpines);

  // bouton -> cleft
  connectNodeSets(.[].Layer(boutons), .[].Layer(cleftsAstrocytes),
                  IsoSampler(), outAttrDef, glutW);

  // bouton -> spine
  connectNodeSets(.[].Layer(boutons), .[].Layer(spines),
                  IsoSampler(), outAttrDef, preW);

  // spine -> cleft
  connectNodeSets(.[].Layer(spines), .[].Layer(cleftsAstrocytes),
                  IsoSampler(), outAttrDef, ecb1W);

  // cleft -> bouton
  connectNodeSets(.[].Layer(cleftsAstrocytes), .[].Layer(boutons),
                  IsoSampler(), outAttrDef, ecb2W);  
};

Grid Output
{
  Dimension(XDIM,YDIM,ZDIM);
  Layer(output, MihalasNieburSynapseIAFUnit, UniformLayout(1), < nodekind="Nodes" >);
  InitNodes(.[].Layer(output), heterOutput);
};

Composite CorticoStriatoCannabinoid
{
  Input pre;
  Cannabinoid cann;
  Output post;

  // pre -> bouton
  connectNodeSets(pre[].Layer(input), cann[].Layer(boutons),
                  EachDst(EachAvg(INNER_FRAC)), outAttrDef, inW);

  // spine -> post
  connectNodeSets(cann[].Layer(spines), post[].Layer(output),
                  EachDst(EachAvg(INNER_FRAC)), outAttrDef, ampaW);

  // post -> pre
  //  connectNodeSets(post[].Layer(output), cann[].Layer(spines),
  //                  IsoSampler(), outAttrDef, postW);
};

CorticoStriatoCannabinoid CSC;



// ##### Data collectors #####
VariableType PoissonIAFUnitDataCollector;
PoissonIAFUnitDataCollector inputCollector<directory=DIRECTORY, fileExt=FILE_EXTENSION,
  op_saveSpikes=1>;
polyConnect(CSC/pre[].Layer(input), inputCollector, <>, <>);

VariableType BoutonIAFUnitDataCollector;
BoutonIAFUnitDataCollector boutonCollector<directory=DIRECTORY, fileExt=FILE_EXTENSION,
  op_saveGlutamate=1, op_saveAvailableGlutamate=1,
  op_saveCB1R=1, op_saveCB1Runbound=1, op_saveCB1Rcurrent=1>;
polyConnect(CSC/cann[].Layer(boutons), boutonCollector, <>, <>);

VariableType CleftAstrocyteIAFUnitDataCollector;
CleftAstrocyteIAFUnitDataCollector cleftAstroCollector<directory=DIRECTORY, fileExt=FILE_EXTENSION,
  op_saveGlutamate=1, op_saveECB=0>;
polyConnect(CSC/cann[].Layer(cleftsAstrocytes), cleftAstroCollector, <>, <>);

VariableType SpineIAFUnitDataCollector;
SpineIAFUnitDataCollector spineCollector<directory=DIRECTORY, fileExt=FILE_EXTENSION,
  op_saveAMPA=0, op_savemGluR5=0, op_saveCa=0, op_saveECB=0, ECBprodC=ECBPRODC, ECBprodD=ECBPRODD>;
polyConnect(CSC/cann[].Layer(spines), spineCollector, <>, <>);

VariableType MihalasNieburSynapseIAFUnitDataCollector;
MihalasNieburSynapseIAFUnitDataCollector outputCollector<directory=DIRECTORY, fileExt=FILE_EXTENSION,
  op_saveSpikes=0>;
polyConnect(CSC/post[].Layer(output), outputCollector, <>, <>);



// ##### Triggers #####
Trigger UnsignedTrigger(string description, Service svc, string operator,
                        int criterion, int delay);
Trigger CompositeTrigger(string description, Trigger triggerA, int critA,
                         string operator, Trigger triggerB, int critB, int delay);

UnsignedTrigger iterTrig("Iteration Trigger : >= 0 ",
 			 ::Iteration, ">", 0, 0, dataCollect);

UnsignedTrigger iterTrigSF("Iteration Trigger : !% 20", // if >1 glutamate spikes will not visualize! typically 20
 			 ::Iteration, "!%", 20, 0, dataCollect);

CompositeTrigger iterTrigSampled("Iteration Trigger: (!%20) && (>= 0)",
                                 iterTrig, 1, "&&",
                                 iterTrigSF, 1, 0, dataCollect);

UnsignedTrigger endTrig("Iteration Trigger to end or stop",
                        ::Iteration, "==", OP_T, 0, lastPhase); // in dt

inputCollector.dataCollection() on iterTrig;
boutonCollector.dataCollection() on iterTrigSampled;
cleftAstroCollector.dataCollection() on iterTrigSampled;
spineCollector.dataCollection() on iterTrigSampled;
outputCollector.dataCollectionSpikes() on iterTrig;
outputCollector.dataCollectionOther() on iterTrigSampled;

Stop on endTrig;
