// =================================================================
// Licensed Materials - Property of IBM
//
// "Restricted Materials of IBM"
//
// BCM-YKT-07-18-2017
//
// (C) Copyright IBM Corp. 2005-2017  All rights reserved
//
// US Government Users Restricted Rights -
// Use, duplication or disclosure restricted by
// GSA ADP Schedule Contract with IBM Corp.
//
// =================================================================

#include "../std/std.gsl"

#define IN_DIR "/home/naze/MGS/graphs/SORN/2018mar16/muIP0_001/ratioIP1_0/etaSTDP0_001/muHIP0_01/ratioHIP0_5/g1_0/muHIPi0_02/0/E2X0_05/I2X0_1/"
#define DIRECTORY "./2018aug06/xy/s_tauR_5x_faster/s_tauF_5x_slower/sfr3/stimCfrac!XX_DIR_3_XX!/stimItv10s/stimDur3ms/stimAmp0_1/muIP0_05/ratioIP1_0/muIPi0_05/ratioIPi1_0/etaSTDP0_000001/tauSTDP!XX_DIR_2_XX!/muHIP0_002/ratioHIP0_5/muHIPi0_004/ratioHIPi0_5/EIratio!XX_DIR_1_XX!/E2X0_05/I2X0_1/muDelay1_2_3_5_8_13_21/ratioDelay!XX_DIR_4_XX!/"
#define FILE_EXTENSION ".dat"
#define BINARY 1

InitPhases = {  initializeShared, initialize, saveInitParams};
RuntimePhases = { inputWeightsShared, dataCollect, update, fire, outputWeightsShared, outputDelaysShared, lastPhase };
FinalPhases = { finalize };

//LoadSparseMatrix loadSparseMatrix(IN_DIR, "E2E_Weights_1000000.dat");

NodeType NazeSORNExcUnit(< 
       mu_delay = {1.0, 2.0, 3.0, 5.0, 8.0, 13.0, 21.0},
       ratio_delay = !XX_VAR_4_XX!,
       mu_IP = 0.05,
       ratio_IP = 1.0,  //!\\ not the same type of ratio as ratio_HIP
       TE_max = 1.0,
       //sigma_HIP = 0.005,
       mu_HIP = 0.002,
       ratio_HIP = 0.5,
       sigma2_chi = 0.01,
       eta_inhib = 0.000001,  //eta_STDP = 0.004,
       mu_iSTDP = 0.1,
       tau_STDP = !XX_VAR_2_XX!,
       p_c = 0.00000001,
       dt = 0.001,
       a_r = 0.072,
       a_f = 0.0066,
       s_tauR = 0.004 ,
       s_tauF = 0.065,
       sfr = 0.0,   
       EIratio = !XX_VAR_1_XX!,
       Ach = 0.0,
       inDirectory = IN_DIR,
       inFiles = {"E2E_Weights_1000000.dat", "I2E_Weights_1000000.dat"},
       loadWeightsOn = {0},
       //initWeights = loadSparseMatrix(),
       outDirectory = DIRECTORY,
       outputWeightsFileName = "Weights",
       collectWeightsOn = {1, 100000, 200000, 300000, 400000, 500000, 600000, 700000, 800000, 900000, 1000000, 2000000, 3000000},    
       outputDelaysFileName = "Delays",
       collectDelaysOn = {1} 
       >);

NodeType NazeSORNInhUnit(< 
       mu_delay = {1.0, 2.0, 3.0, 5.0, 8.0, 13.0, 21.0},
       ratio_delay = !XX_VAR_4_XX!,
       mu_IP = 0.05,
       ratio_IP = 1.0,  //!\\ not the same type of ratio as ratio_HIP
       mu_HIP = 0.004,
       ratio_HIP = 0.5,
       TI_max = 1.0,
       tau_STDP = 0.9,
       EIratio = !XX_VAR_1_XX!,
       sigma2_chi = 0.01,
       loadWeightsOn = {0},
       inDirectory = IN_DIR,
       inFiles = {"E2I_Weights_1000000.dat"},
       outDirectory = DIRECTORY,
       outputWeightsFileName = "Weights",
       collectWeightsOn = {1, 100000, 200000, 300000, 400000, 500000, 600000, 700000, 800000, 900000, 1000000, 2000000, 3000000}
       >);

NodeType ToneUnit(<
	start_time = 90000,  // in dt unit
 	stop_time = 100000,
        duration = 3, //!XX_VAR_4_XX!,
 	interval = 10000,
	amplitude = 0.1 //!XX_VAR_3_XX!
	>);


/***   STIMULUS   ***/

Grid TMS_PULSE
{
	Dimension(1,1);
	Layer(tms, ToneUnit, UniformLayout(1), <nodekind="TMS">);
	InitNodes(.[].Layer(tms), nodeDef);
};
TMS_PULSE tmsPulse;

BindName Pulse("identifier", "TMS");
NdplInAttrInit PULSE(Pulse);


/***   CORTEX   ***/

BindName Exc2Exc("weight", UniformDist(0.0,1.0), 
                 "identifier", "lateralExc",
                 "conditionalFraction", 0.05,
                 "condition", UniformDist(0.0,1.0)
        	 );
NdplInAttrInit E2E(Exc2Exc);

BindName Exc2Inh("weight", UniformDist(0.0,1.0), 
                 "identifier", "lateralExc"
        	 );
NdplInAttrInit E2I(Exc2Inh);

BindName Inh2Exc("weight", UniformDist(0.0,1.0),
                 "identifier", "lateralInh",
                 "conditionalFraction", 1.0,
                 "condition", UniformDist(0.0,1.0)
                 );
NdplInAttrInit I2E(Inh2Exc);

BindName Inh2Inh("weight", UniformDist(0.0,1.0), 
                 "identifier", "lateralInh"
        	 );
NdplInAttrInit I2I(Inh2Inh);

Grid SORN_E
{
   Dimension(400,1);
   Layer(exc, NazeSORNExcUnit, UniformLayout(1), < nodekind="Excitatory" >);
   InitNodes( .[].Layer(exc), nodeDef);
   NodeSet all(.[].Layer(exc) );
   connectNodeSets(all, all, Unique(EachDst(EachAvg(1.0))), outAttrDef, E2E);
   //connectNodeSets(all, all, Unique(EachDstPropSrc(RadialSampler(100.0))), outAttrDef, E2E);
};
SORN_E sorn_E;

Grid SORN_I
{
   Dimension(80,1);
   Layer(inh, NazeSORNInhUnit, UniformLayout(1), < nodekind="Inhibitory" >);
   InitNodes( .[].Layer(inh), nodeDef);
   NodeSet all(.[].Layer(inh) );
   connectNodeSets(all, all, Unique(EachDst(EachAvg(0.1))), outAttrDef, I2I);
};
SORN_I sorn_I;

connectNodeSets(sorn_I[].Layer(inh), sorn_E[].Layer(exc), EachDst(EachAvg(0.1)), outAttrDef, I2E);
connectNodeSets(sorn_E[].Layer(exc), sorn_I[].Layer(inh), EachDst(EachAvg(0.05)), outAttrDef, E2I);
//connectNodeSets(sorn_I[].Layer(inh), sorn_E[].Layer(exc), EachDstPropSrc(RadialSampler(100.0)), outAttrDef, I2E);
//connectNodeSets(sorn_E[].Layer(exc), sorn_I[].Layer(inh), EachDst(EachAvg(0.2)), outAttrDef, E2I);
connectNodeSets(tmsPulse[].Layer(tms), sorn_E[].Layer(exc), EachDst(EachAvg(!XX_VAR_3_XX!)), outAttrDef, PULSE);

// DCA directives here

VariableType NazeSORNUnitDataCollector;
NazeSORNUnitDataCollector collector_E <fileName="SORN-EOutput", deltaT=0.001, binary=BINARY, fileExt=FILE_EXTENSION, directory=DIRECTORY, op_saveSpikes=1 >;
polyConnect(sorn_E[].Layer(exc), collector_E, <>, <>);

VariableType NazeSORNUnitDataCollectorSuppl;
NazeSORNUnitDataCollectorSuppl collector_E_Suppl <outputFileName="SORN_Exc_Xs", thresholdFileName="SORN_Exc_TEs", sumEFileName="sumEs", sumIFileName="sumIs", deltaT=0.001, binary=BINARY, fileExt=FILE_EXTENSION, directory=DIRECTORY, op_saveThresholds=1, op_saveOutputs=1, op_saveSumE=1, op_saveSumI=1>;
polyConnect(sorn_E[].Layer(exc), collector_E_Suppl, <>, <>);

NazeSORNUnitDataCollector collector_I <fileName="SORN-IOutput", deltaT=0.001, binary=BINARY, fileExt=FILE_EXTENSION, directory=DIRECTORY, op_saveSpikes=1 >;
polyConnect(sorn_I[].Layer(inh), collector_I, <>, <>);

Trigger UnsignedTrigger(string description, Service svc, string operator, int criterion, int delay);

UnsignedTrigger iterTrig("Iteration Trigger : >= 0 ", 
 			 ::Iteration, ">=", 80000, 0, dataCollect);

UnsignedTrigger endTrig("Iteration Trigger to end or stop", 
			 ::Iteration, "==", 100000, 0, lastPhase); 

UnsignedTrigger iterTrigSuppl("Iteration Trigger : >= 0 ", 
 			 ::Iteration, ">=", 80000, 0, dataCollect);

collector_E.dataCollection() on iterTrig;
collector_E_Suppl.dataCollection() on iterTrigSuppl;
collector_I.dataCollection() on iterTrig;
Stop on endTrig;
