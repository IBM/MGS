// =================================================================
// Licensed Materials - Property of IBM
//
// "Restricted Materials of IBM"
//
// BCM-YKT-11-19-2015
//
// (C) Copyright IBM Corp. 2005-2015  All rights reserved
//
// US Government Users Restricted Rights -
// Use, duplication or disclosure restricted by
// GSA ADP Schedule Contract with IBM Corp.
//
// =================================================================

#include "../std/std.gsl"
InitPhases = { initializeShared, initialize(GPU) };
RuntimePhases = { dataCollect, updateInputState, update(GPU), 
		  flushVars1(GPU), update1(GPU), 
		  flushVars2(GPU), update2(GPU), 
		  flushVars3(GPU), update3(GPU), 
		  flushVars4(GPU), update4(GPU), 
		  updateOutputs(GPU), lastPhase };

FinalPhases = { finalize };

#define DIRECTORY "data_ge0.03_gpu"

//#define SIZE 4


//#define 0.2 0.2
//#define 0 0.05 //0.64 x
//#define 0.001 0.15 //0.96 


//#define 0.04381 2.43 //1.67 //4.51
//#define 0.07381 2.6 //1.670001 //5.51

//#define DELTAT 0.01
#define INJCUR 0 //2.429 //1.305 (Mahon -75.0 leak) //2.43? (Gittis - 90.0 leak) 

NodeType MahonUnit(<deltaT = 0.2, spikethresh = 0.0 >);


NodeType SwitchInput(<
		directory=DIRECTORY,
		period = 0.0,
		     refract = 3000000000.0,		       
		     deltaT = 0.2,
		     tscale = 1.0,
		     noiselev = 0.0 >);


BindName initN("V_init", UniformDist(-75, -80), "g_init", 0.0, "injCur", INJCUR, 
	       "connectionSeed",  UniformDist(0, 10000000), "synb", UniformDist(0.095,0.105));
BindName initS("inplo",  0.04381, "inphi", 0.07381);
NdplNodeInit heterN(initN);
NdplNodeInit heterS(initS);


BindName RECW("weight", Neg(UniformDist(0,0.001)), "identifier", "MSN");
NdplInAttrInit recW(RECW);

BindName IN("weight", Neg(UniformDist(0,0.001)),
	    "identifier", "MSN",
	    "connectionProb", 0.2);
	    //"connectionSeed",  UniformDist(0, 10000));
	    //  "connectionSeed", 123456789);

NdplInAttrInit lateral(IN);

BindName INPW("identifier", "SWITCHINP");
NdplInAttrInit inpW(INPW);

//list<float> uniformDensity = {1.0};
//EachDstPropSrc recC(RadialDensitySampler(50, 5, uniformDensity, 5));


Grid IAF
{
   Dimension(50,50);
   Layer(nodes, MahonUnit, UniformLayout(1), < nodekind="Nodes" >);
   Layer(inps, SwitchInput, UniformLayout(1), < nodekind="Nodes" >);

   InitNodes( .[].Layer(nodes), heterN);
   InitNodes( .[].Layer(inps), heterS);

   connectNodeSets(.[].Layer(nodes), .[].Layer(nodes), 
		   //Unique(EachDst(EachAvg(0.2))), outAttrDef, recW);
		   Unique(EachDst(EachAvg(1.0))), outAttrDef, lateral);

   connectNodeSets(.[].Layer(inps), .[].Layer(nodes), 
		   IsoSampler(), outAttrDef, inpW);

};

IAF iaf;

// DCA directives here

VariableType MahonUnitDataCollector;
// maxoutnum = number of columns to write data [max = number of neurons]
MahonUnitDataCollector collector<directory=DIRECTORY, fileName="Output.dat", deltaT = 0.2, maxoutnum = 2500>;

polyConnect(iaf[].Layer(nodes), collector, <>, <>);


/*Trigger UnsignedTrigger(string description, Service svc, string operator, int criterion, int delay);*/
//Trigger CompositeTrigger(string description, Trigger triggerA, int critA, string operator, Trigger triggerB, int critB, int delay);

UnsignedTrigger iterTrig("Iteration Trigger : >= 0 ", 
 			 ::Iteration, ">", 0, 0, dataCollect);

UnsignedTrigger endTrig("Iteration Trigger to end or stop", 
			 ::Iteration, "==",  5000, 0, lastPhase); 

collector.dataCollection() on iterTrig;

collector.dataCollectionSpike() on iterTrig;

collector.dataCollectionLFP() on iterTrig;

Stop on endTrig;
