#include "std.gsl"
InitPhases = { initialize };
RuntimePhases = { dataCollection, update, copy, lastPhase };

NodeType LifeNode(< habitable=2, tooSparse=1, tooCrowded=4 >);

Grid World
{
   Dimension(100,100);
   Layer(nodes, LifeNode, UniformLayout(1), < nodekind="Nodes" >);
   InitNodes ( .[25:75, 25:75].Layer(nodes), Same( Pset<LifeNode, NodeInit> ( <value = 1> ) ) );
   InitNodes ( .[40:60, 40:60].Layer(nodes), Same( Pset<LifeNode, NodeInit> ( <value = 0> ) ) );
   NodeSet all(.[].Layer(nodes));
   connectNodeSets(all, all, EachDst(RadialSampler(1.5)), outAttrDef, inAttrDef);
};

World world;

// DCA directives here

Trigger UnsignedTrigger(string description, Service svc, string operator, int criterion, int delay);
Trigger CompositeTrigger(string description, Trigger triggerA, int critA, string operator, Trigger triggerB, int critB, int delay);

UnsignedTrigger iterTrig("Iteration Trigger : >= 1 ", 
 			 ::Iteration, ">=", 1, 0, dataCollection);

UnsignedTrigger endTrig("Iteration Trigger to end or stop", 
			 ::Iteration, "==", 10, 0, lastPhase); 
Stop on endTrig;
