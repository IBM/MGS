#ifndef CaConcentrationJunction_MDL
#define CaConcentrationJunction_MDL

#include "../std/std.mdl"
#include "../HodgkinHuxley/HodgkinHuxley.mdl"
#include "../CaConcentration/CaConcentration.mdl"
#include "../LaboratoryTools/LaboratoryTools.mdl"

Node CaConcentrationJunction Implements CaConcentrationArrayProducer, DimensionArrayProducer, BranchDataProducer {
  DimensionStruct* [] dimensions;
  BranchDataStruct* branchData;
  float volume;
  float [] fAxial;
  float Ca_cur;
  float [] Ca_new;
  float currentToConc;

  float CaClearance;

  // currents
  ChannelCaCurrents [] channelCaCurrents;
  float* [] receptorCaCurrents;
  float* [] injectedCaCurrents;

  float* [] CaConcentrationInputs;
  DimensionStruct* [] dimensionInputs;

  Shared {
    float* deltaT;
    float DCa;
    float bmt;
    float beta;                    // Wagner and Keizer buffering constant
    float CaBaseline;

    InitPhase deriveParameters;  
  }

  CaConcentrationArrayProducer.CaConcentrations << &Ca_new;
  DimensionArrayProducer.dimensionArray << &dimensions;
  BranchDataProducer.branchData << branchData;

  InitPhase initializeJunction;
  RuntimePhase predictJunction, correctJunction;

  InAttrPSet {
    string identifier;
    TissueSite site;
    int idx;
  }	

  Connection Pre Constant (PSet.identifier=="dimension") Expects DimensionProducer {
    DimensionProducer.dimension >> dimensions;
  }

  Connection Pre Constant (PSet.identifier=="branchData") Expects BranchDataProducer {
    BranchDataProducer.branchData >> branchData;
   }

  Connection Pre Node (PSet.identifier=="channels[Calcium]") Expects CaCurrentArrayProducer {
    CaCurrentArrayProducer.CaCurrents >> channelCaCurrents.currents;
  }

  Connection Pre Node (PSet.identifier=="electricalSynapse[Calcium]") Expects CaCurrentProducer {
    CaCurrentProducer.CaCurrent >> injectedCaCurrents;
  }

  Connection Pre Node (PSet.identifier=="chemicalSynapse[Calcium]") Expects CaCurrentProducer {
    CaCurrentProducer.CaCurrent >> receptorCaCurrents;
  }

  PredicateFunction checkSite;
  Connection Pre Variable (PSet.identifier=="stimulation" && checkSite()) Expects CaCurrentProducer {
    CaCurrentProducer.CaCurrent >> injectedCaCurrents;
   }

  Connection Pre Node (PSet.identifier=="endpoint") Expects CaConcentrationProducer, DimensionProducer  {
    CaConcentrationProducer.Ca >> CaConcentrationInputs;
    DimensionProducer.dimension >> dimensionInputs;
  }

  PredicateFunction confirmUniqueDeltaT;
  Connection Pre Constant (PSet.identifier=="dt" && confirmUniqueDeltaT()) Expects TimeStepProducer {
    TimeStepProducer.deltaT >> Shared.deltaT;
  }
}

Node CaConcentrationJunctionPoint Implements CaConcentrationProducer, DimensionProducer
{
  float* CaConcentration;
  DimensionStruct* dimension;
  Shared {
    float []* CaConcentrationConnect;
    DimensionStruct* []* dimensionsConnect;
}
  CaConcentrationProducer.Ca << CaConcentration;
  DimensionProducer.dimension << dimension;

  InAttrPSet {
    string identifier;
  }

  UserFunction setPointers;

  Connection Pre Node () Expects CaConcentrationArrayProducer, DimensionArrayProducer {
    CaConcentrationArrayProducer.CaConcentrations >> Shared.CaConcentrationConnect;
    DimensionArrayProducer.dimensionArray >> Shared.dimensionsConnect;   
    setPointers();
  }
  InitPhase produceInitialState(dimension);
  RuntimePhase produceCaConcentration(CaConcentration);
}

#endif
