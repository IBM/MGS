#ifndef ChannelIP3R_MDL
#define ChannelIP3R_MDL

#include "../../nti/include/MaxComputeOrder.h"

#include "../std/std.mdl"
#include "../HodgkinHuxley/HodgkinHuxley.mdl"
#include "../BranchSolver/BranchSolver.mdl"

// NOTE: This channel get data from 2 compartment variables: CalciumER + Calcium
//  We may need to add IP3R concentration somehow???
Node SingleChannelIP3R Implements ConductanceArrayProducer, BranchDataProducer,
   CaCurrentArrayProducer
{
	/*{{{*/
	//DATA
	//{{{ 
	// Markov-based formula
	//{{{
	//internal data
  // 
	dyn_var_t [] m;
	dyn_var_t [] h;
	dyn_var_t [] g;  // nS/um^2
	dyn_var_t [] gbar; // nS/um^2
	dyn_var_t [] E_Ca; // [mV]
	dyn_var_t [] I_Ca; // [pA/um^2]
	// reference data
	dyn_var_t []* Ca_IC; // intracellular Ca2+ concentration [uM]
	dyn_var_t []* Ca_ER; // ER Ca2+ concentration [uM]
	BranchDataStruct* branchData; 
	DimensionStruct* []* dimensions;
	//}}}

	//SHARED DATA
	Shared {//in xxxCompCategory.C
		//{{{
		dyn_var_t* deltaT; // [ms]
		dyn_var_t* T;     // [K]
		dyn_var_t Tadj;  // [unitless] kinetics adjustment based on recorded data 
		//   and tempt. used for the simulation 
		//dyn_var_t a; // fraction of inactivation (i.e. channel with partial inactivation properties)
		InitPhase computeTadj; 
		//}}}
	}
	//}}}

	RuntimePhase update();
	InitPhase initialize;

	ConductanceArrayProducer.conductanceArray << &g;
	CaCurrentArrayProducer.CaCurrents << &I_Ca;
	BranchDataProducer.branchData << branchData;

	InAttrPSet {//information of the incoming connection
		string identifier; // name of the incoming node
		int idx;   // if identifier = name of the compartment variable 
		// then idx = index of the compartment on a branch
	}

	Connection Pre Node (PSet.identifier=="compartment[Voltage]") Expects VoltageArrayProducer, 
            BranchDataProducer, DimensionArrayProducer 
  {
		BranchDataProducer.branchData >> branchData;
		DimensionArrayProducer.dimensionArray >> dimensions;
	}

	Connection Pre Node (PSet.identifier=="IC[Calcium]") Expects CaConcentrationArrayProducer {
		CaConcentrationArrayProducer.CaConcentrations >> Ca_IC;
	}

	Connection Pre Node (PSet.identifier=="IC[CalciumER]") Expects CaConcentrationArrayProducer {
		CaConcentrationArrayProducer.CaConcentrations >> Ca_ER;
	}

	Connection Pre Constant (PSet.identifier=="dt") Expects TimeStepProducer {
		TimeStepProducer.deltaT >> Shared.deltaT;
	}
	/*}}}*/
}

// deterministic
//Node ChannelIP3R Implements ConductanceArrayProducer, BranchDataProducer,
//   CaCurrentArrayProducer
//{
//	/*{{{*/
//	//DATA
//	//{{{ 
//	// Hodgkin-Huxley-based formula
//	//{{{
//	//internal data
//  // 
//	dyn_var_t [] m;
//	dyn_var_t [] h;
//	dyn_var_t [] g;  // nS/um^2
//	dyn_var_t [] gbar; // nS/um^2
//	dyn_var_t [] E_Ca; // [mV]
//	dyn_var_t [] I_Ca; // [pA/um^2]
//	// reference data
//	dyn_var_t []* Ca_IC; // intracellular Ca2+ concentration [uM]
//	dyn_var_t []* Ca_ER; // ER Ca2+ concentration [uM]
//	BranchDataStruct* branchData; 
//	DimensionStruct* []* dimensions;
//	//}}}
//
//	//SHARED DATA
//	Shared {//in xxxCompCategory.C
//		//{{{
//		dyn_var_t* deltaT; // [ms]
//		dyn_var_t* T;     // [K]
//		dyn_var_t Tadj;  // [unitless] kinetics adjustment based on recorded data 
//		//   and tempt. used for the simulation 
//		//dyn_var_t a; // fraction of inactivation (i.e. channel with partial inactivation properties)
//		InitPhase computeTadj; 
//		//}}}
//	}
//	//}}}
//
//	RuntimePhase update();
//	InitPhase initialize;
//
//	ConductanceArrayProducer.conductanceArray << &g;
//	CaCurrentArrayProducer.CaCurrents << &I_Ca;
//	BranchDataProducer.branchData << branchData;
//
//	InAttrPSet {//information of the incoming connection
//		string identifier; // name of the incoming node
//		int idx;   // if identifier = name of the compartment variable 
//		// then idx = index of the compartment on a branch
//	}
//
//	Connection Pre Node (PSet.identifier=="compartment[Voltage]") Expects VoltageArrayProducer, 
//            BranchDataProducer, DimensionArrayProducer 
//  {
//		BranchDataProducer.branchData >> branchData;
//		DimensionArrayProducer.dimensionArray >> dimensions;
//	}
//
//	Connection Pre Node (PSet.identifier=="IC[Calcium]") Expects CaConcentrationArrayProducer {
//		CaConcentrationArrayProducer.CaConcentrations >> Ca_IC;
//	}
//
//	Connection Pre Node (PSet.identifier=="IC[CalciumER]") Expects CaConcentrationArrayProducer {
//		CaConcentrationArrayProducer.CaConcentrations >> Ca_ER;
//	}
//
//	Connection Pre Constant (PSet.identifier=="dt") Expects TimeStepProducer {
//		TimeStepProducer.deltaT >> Shared.deltaT;
//	}
//	/*}}}*/
//}
//

#endif
