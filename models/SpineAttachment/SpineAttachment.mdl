#ifndef SpineAttachment_MDL
#define SpineAttachment_MDL

#include "../../nti/include/MaxComputeOrder.h"

#include "../std/std.mdl"
#include "../BranchSolver/BranchSolver.mdl"
#include "../HodgkinHuxley/HodgkinHuxley.mdl"

Interface SurfaceAreaLengthProducer {
	dyn_var_t A; // [um^2]
	dyn_var_t len; // [um]
}

// A SpineAttachment is a bidirectional connection between
//   a compartment in one neuron (serve as a spine neck)
//   to another compartment in another neuron (serve as dendritic compartment)
//Node SpineAttachment Implements CurrentProducer, BranchDataProducer, IndexProducer, 
//     VoltageProducer
Node SpineAttachment_Vm Implements CurrentProducer, BranchDataProducer, IndexProducer, 
     VoltageProducer,
     SurfaceAreaLengthProducer
{
/*{{{*/
	//{{{ need user-input
  dyn_var_t Raxial;   // [Gohm.um] 
  //}}}
  //{{{ internal calculation
	//{{{ help finding the conductance 'g' as a function of necklength and neck-radius
  dyn_var_t leni; //[um]
	dyn_var_t lenj;
	dyn_var_t Ai;   //[um^2]
	dyn_var_t Aj;
   //}}}
  dyn_var_t* Vi; //reference to the compartment representing the spine neck 
  dyn_var_t* Vj; //reference to the compartment representing the spine 'head'
  dyn_var_t I;   //the current [pA]
  dyn_var_t g;   //the conductance [nS] between 'neck' compartment to 'dendrite' compartment
  //}}}

  BranchDataStruct* branchData; // reference to the branch having the compartment of Vi
  int index;//TUAN: should we move to Shared region (as it is used at connection-time only)

  Shared {
    dyn_var_t []* voltageConnect;
  }

  InitPhase produceInitialState(Vi);
  RuntimePhase produceState(Vi), computeState;

  VoltageProducer.voltage << Vi;
  SurfaceAreaLengthProducer.A << Ai;
  SurfaceAreaLengthProducer.len << leni;
  CurrentProducer.current << &I;
  BranchDataProducer.branchData << branchData;
  IndexProducer.index << &index;

  InAttrPSet {
    string identifier;
    int idx; //the index of the compartment in the compute-branch that connect to 
             // this SpineAttachment node
    dyn_var_t A;
    dyn_var_t len;
  }

  UserFunction setVoltagePointers;
  
  Connection Pre Node (PSet.identifier=="compartment[Voltage]") Expects 
    VoltageArrayProducer, BranchDataProducer 
  {
    VoltageArrayProducer.voltageArray >> Shared.voltageConnect;
    BranchDataProducer.branchData >> branchData;
    setVoltagePointers(); //set Vi
    set_A_and_len();
  }
  Connection Pre Node (PSet.identifier=="spineconnexon[Voltage]") Expects 
    VoltageProducer, SurfaceAreaLengthProducer
  {
    VoltageProducer.voltage >> Vj;
    //how about spineneck cross-sectional surface area 'A'
    //                    length 'len'
    // len1 = 1/2 spineneck (from spineneck-side)
    // len2 = radius of the shaft
    // A1   = cross-sectional surface area of spineneck
    // A2   = zero (from shaft-side)
    SurfaceAreaLengthProducer.A >> Aj;
    SurfaceAreaLengthProducer.len >> lenj;
  }
/*}}}*/
}

Node SpineAttachment_VmCai Implements CurrentProducer, BranchDataProducer, IndexProducer,
     VoltageProducer, 
     SurfaceAreaLengthProducer,
     CaConcentrationProducer, CaCurrentProducer
 {
/*{{{*/
	//{{{ need user-input
  dyn_var_t Raxial;   // [Gohm.um] 
  dyn_var_t RCacytoaxial;   // [Gohm.um] 
  //}}}
  //{{{ internal calculation
	 //{{{ help finding the conductance 'g' as a function of necklength and neck-radius
  dyn_var_t leni; //[um]
	dyn_var_t lenj;
	dyn_var_t Ai;   //[um^2]
	dyn_var_t Aj;
   //}}}

  dyn_var_t* Vi;
  dyn_var_t* Vj;
  dyn_var_t I;
  dyn_var_t g;
  dyn_var_t* Cai;
  dyn_var_t* Caj;
  dyn_var_t I_Ca;
  dyn_var_t gCYTO;
  //}}}

  BranchDataStruct* branchData;
  int index;

  Shared {
    dyn_var_t* T;
    dyn_var_t []* voltageConnect;
    dyn_var_t []* CaConcentrationConnect;
  }

  InitPhase produceInitialState(Vi, Cai);
  RuntimePhase produceState(Vi, Cai), computeState;

  VoltageProducer.voltage << Vi;
  SurfaceAreaLengthProducer.A << Ai;
  SurfaceAreaLengthProducer.len << leni;
  CurrentProducer.current << &I;
  CaConcentrationProducer.Ca << Cai;
  CaCurrentProducer.CaCurrent << &I_Ca;
  BranchDataProducer.branchData << branchData;
  IndexProducer.index << &index;

  InAttrPSet {
    string identifier;
    int idx; //the index of the compartment in the compute-branch that connect to 
             // this SpineAttachment node
    dyn_var_t A;
    dyn_var_t len;
  }

  UserFunction setCaPointers;
  UserFunction setVoltagePointers; 
 
  Connection Pre Constant (PSet.identifier=="EC") Expects TemperatureProducer {
    TemperatureProducer.T >> Shared.T;
  }
  Connection Pre Node (PSet.identifier=="compartment[Calcium]") Expects CaConcentrationArrayProducer {
    CaConcentrationArrayProducer.CaConcentrations >> Shared.CaConcentrationConnect;
    setCaPointers();
  }
  Connection Pre Node (PSet.identifier=="compartment[Voltage]") Expects VoltageArrayProducer, BranchDataProducer {
    VoltageArrayProducer.voltageArray >> Shared.voltageConnect;
    BranchDataProducer.branchData >> branchData;
    setVoltagePointers();
    set_A_and_len();
  }
  Connection Pre Node (PSet.identifier=="spineconnexon[Voltage]") Expects VoltageProducer,
     SurfaceAreaLengthProducer
 {
    VoltageProducer.voltage >> Vj;
    //how about spineneck cross-sectional surface area 'A'
    //                    length 'len'
    // len1 = 1/2 spineneck (from spineneck-side)
    // len2 = radius of the shaft
    // A1   = cross-sectional surface area of spineneck
    // A2   = zero (from shaft-side)
    SurfaceAreaLengthProducer.A >> Aj;
    SurfaceAreaLengthProducer.len >> lenj;
  }
  Connection Pre Node (PSet.identifier=="spineconnexon[Calcium]") Expects CaConcentrationProducer {
    CaConcentrationProducer.Ca >> Caj;
  }
/*}}}*/
}

Node SpineAttachment_VmCaiCaER Implements CurrentProducer, BranchDataProducer, IndexProducer,
     VoltageProducer, 
     SurfaceAreaLengthProducer,
     CaConcentrationProducer, CaCurrentProducer,
     CaERConcentrationProducer, CaERCurrentProducer
{
/*{{{*/
	//DATA
    /*{{{*/
	//{{{ need user-input
  dyn_var_t Raxial;   // [Gohm.um] 
  dyn_var_t RCacytoaxial;   // [Gohm.um] 
  dyn_var_t RCaERaxial;   // [Gohm.um] 
  //}}}
  //{{{ internal
	 //{{{ help finding the conductance 'g' as a function of necklength and neck-radius
  dyn_var_t leni; //[um]
	dyn_var_t lenj;
	dyn_var_t Ai;   //[um^2]
	dyn_var_t Aj;
   //}}}
  dyn_var_t* Vi;
  dyn_var_t* Vj;
  dyn_var_t I;
  dyn_var_t g;
  dyn_var_t* Cai;
  dyn_var_t* Caj;
  dyn_var_t I_Ca;
  dyn_var_t gCYTO;
  dyn_var_t* CaERi;
  dyn_var_t* CaERj;
  dyn_var_t I_CaER;
  dyn_var_t gER; // the trans
  /*}}}*/

	//data members: reference
  BranchDataStruct* branchData;
  int index;

  Shared {
    /*{{{*/
    dyn_var_t* T;
    dyn_var_t []* voltageConnect;
    dyn_var_t []* CaConcentrationConnect;
    dyn_var_t []* CaERConcentrationConnect;
    /*}}}*/
  }

  InitPhase produceInitialState(Vi, Cai, CaERi);
  RuntimePhase produceState(Vi, Cai, CaERi), computeState;

  VoltageProducer.voltage << Vi;
  SurfaceAreaLengthProducer.A << Ai;
  SurfaceAreaLengthProducer.len << leni;
  CurrentProducer.current << &I;
  CaConcentrationProducer.Ca << Cai;
  CaCurrentProducer.CaCurrent << &I_Ca;
  CaERConcentrationProducer.Ca << CaERi;
  CaERCurrentProducer.CaCurrent << &I_CaER;

  BranchDataProducer.branchData << branchData;
  IndexProducer.index << &index;

  InAttrPSet {
    string identifier;
    int idx; //the index of the compartment in the compute-branch that connect to 
             // this SpineAttachment node
    dyn_var_t A;
    dyn_var_t len;
  }

  UserFunction setVoltagePointers; 
  UserFunction setCaPointers;
  UserFunction setCaERPointers;
 
  Connection Pre Constant (PSet.identifier=="EC") Expects TemperatureProducer {
    TemperatureProducer.T >> Shared.T;
  }
  Connection Pre Node (PSet.identifier=="compartment[Voltage]") Expects VoltageArrayProducer, BranchDataProducer {
    VoltageArrayProducer.voltageArray >> Shared.voltageConnect;
    BranchDataProducer.branchData >> branchData;
    setVoltagePointers();
    set_A_and_len();
  }
  Connection Pre Node (PSet.identifier=="spineconnexon[Voltage]") Expects VoltageProducer,
     SurfaceAreaLengthProducer
 {
    VoltageProducer.voltage >> Vj;
    //how about spineneck cross-sectional surface area 'A'
    //                    length 'len'
    // len1 = 1/2 spineneck (from spineneck-side)
    // len2 = radius of the shaft
    // A1   = cross-sectional surface area of spineneck
    // A2   = zero (from shaft-side)
    SurfaceAreaLengthProducer.A >> Aj;
    SurfaceAreaLengthProducer.len >> lenj;
  }

  Connection Pre Node (PSet.identifier=="compartment[Calcium]") Expects CaConcentrationArrayProducer {
    CaConcentrationArrayProducer.CaConcentrations >> Shared.CaConcentrationConnect;
    setCaPointers();
  }
  Connection Pre Node (PSet.identifier=="spineconnexon[Calcium]") Expects CaConcentrationProducer {
    CaConcentrationProducer.Ca >> Caj;
  }

  Connection Pre Node (PSet.identifier=="compartment[CalciumER]") Expects CaERConcentrationArrayProducer {
    CaERConcentrationArrayProducer.CaConcentrations >> Shared.CaERConcentrationConnect;
    setCaERPointers();
  }
  Connection Pre Node (PSet.identifier=="spineconnexon[CalciumER]") Expects CaERConcentrationProducer {
    CaERConcentrationProducer.Ca >> CaERj;
  }
/*}}}*/
}

#endif
