#ifndef ChannelSchweighoferKCa_MDL
#define ChannelSchweighoferKCa_MDL

#include "../std/std.mdl"
#include "../HodgkinHuxley/HodgkinHuxley.mdl"
#include "../BranchSolver/BranchSolver.mdl"

Node ChannelSchweighoferKCa Implements ConductanceArrayProducer, ReversalPotentialArrayProducer, BranchDataProducer {
  float [] m;	
  float [] g;
  float [] gbar;

  float []* Ca;
 
  BranchDataStruct* branchData; 

  Shared {
    float* K_IC;
    float* K_EC;
    float* deltaT;
    float* T;
    float [] E_K;
    InitPhase computeE;
  }

  RuntimePhase update;
  InitPhase initialize;

  ConductanceArrayProducer.conductanceArray << &g;
  ReversalPotentialArrayProducer.reversalPotentials << &Shared.E_K;
  BranchDataProducer.branchData << branchData;

  InAttrPSet {
    string identifier;
    int idx;
  }

  Connection Pre Node (PSet.identifier=="compartment[Calcium]") Expects CaConcentrationArrayProducer, BranchDataProducer {
    CaConcentrationArrayProducer.CaConcentrations >> Ca;
    BranchDataProducer.branchData >> branchData;
  }

  Connection Pre Node (PSet.identifier=="IC[Voltage]") Expects KConcentrationProducer {
    KConcentrationProducer.K >> Shared.K_IC;
  }

  Connection Pre Constant (PSet.identifier=="EC") 
    Expects KConcentrationProducer, TemperatureProducer {
    KConcentrationProducer.K >> Shared.K_EC;
    TemperatureProducer.T >> Shared.T;
  }

  Connection Pre Constant (PSet.identifier=="dt") Expects TimeStepProducer {
    TimeStepProducer.deltaT >> Shared.deltaT;
  }
}

#endif
