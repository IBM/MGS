#ifndef ChannelSK_MDL
#define ChannelSK_MDL

#include "../../nti/include/MaxComputeOrder.h"

#include "../std/std.mdl"
#include "../HodgkinHuxley/HodgkinHuxley.mdl"
#include "../BranchSolver/BranchSolver.mdl"

Node ChannelSK Implements ConductanceArrayProducer, ReversalPotentialArrayProducer, BranchDataProducer {
	/*{{{*/
	//DATA
	// Markov-based formula
	//{{{
	//internal data
	dyn_var_t [] fO; //fraction of channel in Open-state
	//dyn_var_t [] fC; //  Closed-state - NOTE: consider removing as implicit with 2 state
	dyn_var_t [] g;  // nS/um^2
	dyn_var_t [] gbar; // nS/um^2
	// reference data
	dyn_var_t []* V;//transmembrane voltage [mV]
	dyn_var_t []* Cai;//submembrane Ca2+ [uM]
	BranchDataStruct* branchData; 
	//}}}

	//SHARED DATA
	Shared {//in xxxCompCategory.C
		//{{{
		dyn_var_t* K_IC; // [mM]
		dyn_var_t* K_EC; // [mM]
		dyn_var_t* deltaT; // [ms]
		dyn_var_t* T;     // [K]
		dyn_var_t Tadj;  // kinetics adjustment based on recorded data 
		//   and tempt. used for the simulation 
		//dyn_var_t a; // fraction of inactivation (i.e. channel with partial inactivation properties)
		dyn_var_t [] E_K; // [mV]
		InitPhase computeE; // [mV]
		//}}}
	}

	RuntimePhase update();
	InitPhase initialize;

	ConductanceArrayProducer.conductanceArray << &g;
	ReversalPotentialArrayProducer.reversalPotentials << &Shared.E_K;
	BranchDataProducer.branchData << branchData;

	InAttrPSet {//information of the incoming connection
		string identifier; //name of the compartment variable
		int idx;   // index of the compartment on a branch
	}

	Connection Pre Node (PSet.identifier=="compartment[Voltage]") Expects VoltageArrayProducer, 
                      BranchDataProducer {
		VoltageArrayProducer.voltageArray >> V;
		BranchDataProducer.branchData >> branchData;
	}

	Connection Pre Node (PSet.identifier=="compartment[Calcium]") Expects CaConcentrationArrayProducer//,
//                      BranchDataProducer 
  {
		CaConcentrationArrayProducer.CaConcentrations >> Cai;
		//BranchDataProducer.branchData >> branchData;
	}
	Connection Pre Node (PSet.identifier=="IC[Voltage]") Expects KConcentrationProducer {
		KConcentrationProducer.K >> Shared.K_IC;
	}

	Connection Pre Constant (PSet.identifier=="EC") 
		Expects KConcentrationProducer, TemperatureProducer {
			KConcentrationProducer.K >> Shared.K_EC;
			TemperatureProducer.T >> Shared.T;
		}

	Connection Pre Constant (PSet.identifier=="dt") Expects TimeStepProducer {
		TimeStepProducer.deltaT >> Shared.deltaT;
	}
	/*}}}*/
}


#endif
