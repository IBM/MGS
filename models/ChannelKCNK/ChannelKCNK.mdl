#ifndef ChannelKCNK_MDL
#define ChannelKCNK_MDL

#include "../../nti/include/MaxComputeOrder.h"

#include "../std/std.mdl"
#include "../HodgkinHuxley/HodgkinHuxley.mdl"
#include "../BranchSolver/BranchSolver.mdl"

// NOTE: This channel is modeled using HH formula; 
// and get data from 2 compartment variables: Voltage + Calcium

// NOTE: This channel is modeled using GHK formula; 
// and get data from 2 compartment variables: Voltage + Calcium
Node ChannelKCNK_GHK Implements 
     CurrentArrayProducer, //GHK-based to Vm, GHK-based to I/O
     //CaCurrentArrayProducer, //GHK-based to Ca2+
     BranchDataProducer, 
     DimensionArrayProducer
{
/*{{{*/
    //DATA
    //{{{ 
    // GHK formula with Hodgkin-Huxley-based gating variable
    //{{{
    //internal data
    dyn_var_t [] m;
    dyn_var_t [] h;
    dyn_var_t [] I_K; // [pA/um^2]
#ifdef CONSIDER_DI_DV
    dyn_var_t [] conductance_didv; // [nS/um^2]
#endif
    dyn_var_t [] P_K;  // um/ms
    dyn_var_t [] P_Kbar; // um/ms
    // reference data
    dyn_var_t []* V;//transmembrane voltage [mV]
    //dyn_var_t []* Ca_IC; // intracellular Ca2+ concentration [uM]
    //dyn_var_t []* K_IC; // intracellular Ca2+ concentration [uM]
    //dyn_var_t []* K_EC; // intracellular Ca2+ concentration [uM]
    BranchDataStruct* branchData; 
    DimensionStruct* []* dimensions;
    //int index; //index of the compartment in branch

    //data mainly used to dynamically assign different conductance on different location
    //NOTE: In SynParams.par file
    //    Use either gbar_dists or gbar_branch
    //      and combine with gbar_values
    dyn_var_t [] Pbar_dists; // an array that indicate the threshold-distance (in micrometer)
    dyn_var_t [] Pbar_branchorders;// an array that indicate the branch-order (zero-based integer)
    dyn_var_t [] Pbar_values;// ... having the corresponding Pbar conductance [um/ms]
    // Example:
    // CHANNEL_PARAMS 2
    // Cah 3
    // BRANCHTYPE MTYPE
    // 1 0 <gbar={0.00992}>
    // 4 0 <gbar_dists={380.0,480.0, 590}> 
    // 4 0 <gbar_values={0.000555,0.00555,0.000555}>
    // Nat 3 
    // BRANCHTYPE MTYPE
    // 1 0 <gbar={0.00992}>
    // 4 0 <gbar_branchorders={0, 1, 2}> 
    // 4 0 <gbar_values={0.0555,0.555,0.000555}>
    //}}}

    //SHARED DATA
    Shared {//in xxxCompCategory.C
        //{{{
        dyn_var_t* K_EC; // [mM]
        dyn_var_t* K_IC; // [mM]
        dyn_var_t* deltaT; // [ms]
        dyn_var_t* T;     // [K]
        dyn_var_t Tadj;  // [unitless] kinetics adjustment based on recorded data 
        //   and tempt. used for the simulation 
        //dyn_var_t a; // fraction of inactivation (i.e. channel with partial inactivation properties)
        dyn_var_t [] E_K; // [mV]
        InitPhase computeTadj; 
        //}}}
    }
    //}}}

    RuntimePhase update();
    InitPhase initialize;

    //CaCurrentArrayProducer.currents << &I_Ca;
    CurrentArrayProducer.currents << &I_K;
#ifdef CONSIDER_DI_DV
    CurrentArrayProducer.di_dv << &conductance_didv;
#endif
    BranchDataProducer.branchData << branchData;
    DimensionArrayProducer.dimensionArray << dimensions;

    InAttrPSet {//information of the incoming connection
        string identifier; // name of the incoming node
        int idx;   // if identifier = name of the compartment variable 
        // then idx = index of the compartment on a branch
    }

  //Connection setup (input)
    Connection Pre Node (PSet.identifier=="compartment[Voltage]") Expects VoltageArrayProducer, 
    BranchDataProducer, DimensionArrayProducer 
    {
      VoltageArrayProducer.voltageArray >> V;
      BranchDataProducer.branchData >> branchData;
      DimensionArrayProducer.dimensionArray >> dimensions;
    }

    Connection Pre Node (PSet.identifier=="IC[Voltage]") Expects KConcentrationProducer {
        KConcentrationProducer.K >> Shared.K_IC;
    }

    Connection Pre Constant (PSet.identifier=="EC") 
      Expects KConcentrationProducer, TemperatureProducer 
      {
	KConcentrationProducer.K >> Shared.K_EC;
	TemperatureProducer.T >> Shared.T;
      }

    Connection Pre Constant (PSet.identifier=="dt") Expects TimeStepProducer {
        TimeStepProducer.deltaT >> Shared.deltaT;
    }
/*}}}*/
}


#endif
