#ifndef AMPAReceptor_MDL
#define AMPAReceptor_MDL

#include "../../nti/include/MaxComputeOrder.h"
#include "../std/std.mdl"
#include "../HodgkinHuxley/HodgkinHuxley.mdl"
#include "../BranchSolver/BranchSolver.mdl"

// Simplified 2-state model 
Node AMPAReceptor Implements ConductanceProducer, MaximumConductanceProducer, 
     ReversalPotentialProducer, BranchDataArrayProducer, IndexArrayProducer 
{
/*{{{*/
  //DATA
	//{{{
  dyn_var_t g;
  dyn_var_t gbar;
  dyn_var_t r; // fraction of opening receptors

  //{{{only use with preSynapticPoint
  dyn_var_t* Vpre;  // [mV] preSynaptic voltage
  //}}}
  dyn_var_t* Glut; //[uM] concentration
  dyn_var_t* w;
  int indexPost;
  int* [] indexPrePost;
 
  BranchDataStruct* [] branchDataPrePost;
  //}}}

  Shared {
		//{{{
    dyn_var_t alpha; // uM^-1 msec^-1
    dyn_var_t beta;  // msec^-1
		//{{{ only used with preSynapticPoint
    dyn_var_t NTmax; // [uM] maximum concentration of NeuroTransmitter Glutamate
    dyn_var_t Vp; // [mV]  voltage at which concentration of Glutamate is at half-peak
    dyn_var_t Kp; // [mV]  the steepness of the curve of Glutamate = f(Vm)
	  //}}}
    dyn_var_t E; // [mV]

    dyn_var_t* deltaT;
    dyn_var_t *T;   // [K]
		dyn_var_t Tadj;  // [unitless] kinetics adjustment based on recorded data 
		//   and tempt. used for the simulation 
		InitPhase computeTadj;  
    //}}}
   }

  InitPhase initializeAMPA;
  RuntimePhase updateAMPA;

  // Output
  ConductanceProducer.conductance << &g;
  MaximumConductanceProducer.maximumConductance << &gbar;
  ReversalPotentialProducer.reversalPotential << &Shared.E;
  BranchDataArrayProducer.branchDataArray << &branchDataPrePost;
  IndexArrayProducer.indexArray << &indexPrePost;

  InAttrPSet {
    string identifier;
    int idx;
  }

  UserFunction setPostIndex;

  // Input (Connection setting)
  Connection Pre Node (PSet.identifier=="preSynapticPoint") Expects VoltageProducer, BranchDataProducer, IndexProducer {
    VoltageProducer.voltage >> Vpre;
    BranchDataProducer.branchData >> branchDataPrePost;
    IndexProducer.index >> indexPrePost;
  }

/*TUAN TODO: Think about using this as a strategy to split synapticCleft
to have only "*NT"
instead of 'Glut' and 'Gaba'

 Connection Pre Node (PSet.identifier=="synapticCleft[GLUT]") Expects GlutamateConcentrationProducer, BranchDataProducer, IndexProducer {
*/
  Connection Pre Node (PSet.identifier=="synapticCleft") Expects GlutamateConcentrationProducer, BranchDataProducer, IndexProducer {
    GlutamateConcentrationProducer.NT >> Glut;
    BranchDataProducer.branchData >> branchDataPrePost;
    IndexProducer.index >> indexPrePost;
  }

  Connection Pre Node (PSet.identifier=="compartment[Voltage]") Expects VoltageArrayProducer, BranchDataProducer {
    BranchDataProducer.branchData >> branchDataPrePost;
    setPostIndex();
  }

  Connection Pre Node (PSet.identifier=="receptor") Expects WeightProducer {
    WeightProducer.w >> w;
  }

  Connection Pre Constant (PSet.identifier=="EC") 
    Expects TemperatureProducer {
    TemperatureProducer.T >> Shared.T;
  }

  Connection Pre Constant (PSet.identifier=="dt") Expects TimeStepProducer {
    TimeStepProducer.deltaT >> Shared.deltaT;
  }
/*}}}*/
}

// Markov-based model
Node AMPAReceptor_Markov Implements ConductanceProducer, MaximumConductanceProducer, 
     ReversalPotentialProducer, BranchDataArrayProducer, IndexArrayProducer 
{
/*{{{*/
  //DATA
	//{{{
  dyn_var_t g;
  dyn_var_t gbar;
	dyn_var_t fC0, fC1, fD1, fC2, fD2, fO;

  //{{{only use with preSynapticPoint
  dyn_var_t* Vpre;
  //}}}
  dyn_var_t* Glut; // [uM]
  dyn_var_t* w;
  int indexPost;
  int* [] indexPrePost;
 
  BranchDataStruct* [] branchDataPrePost;
  //}}}

  Shared {
		//{{{
    dyn_var_t Rb;// uM^-1 msec^-1
    dyn_var_t Ru1;// msec^-1
    dyn_var_t Ru2;// msec^-1
    dyn_var_t alpha; // msec^-1, which is Ro
    dyn_var_t beta;// msec^-1,   which is Rc
    dyn_var_t Rr;// msec^-1
    dyn_var_t Rd;// msec^-1
		//{{{ only used with preSynapticPoint
    dyn_var_t NTmax; // [uM] maximum concentration of NeuroTransmitter Glutamate
    dyn_var_t Vp; // [mV]  voltage at which concentration of Glutamate is at half-peak
    dyn_var_t Kp; // [mV]  the steepness of the curve of Glutamate = f(Vm)
    //}}}
    dyn_var_t E; // [mV]

    dyn_var_t* deltaT;
    dyn_var_t *T;   // [K]
		dyn_var_t Tadj;  // [unitless] kinetics adjustment based on recorded data 
		//   and tempt. used for the simulation 
		InitPhase computeTadj;  
    //}}}
   }

  InitPhase initializeAMPA;
  RuntimePhase updateAMPA;

  // Output
  ConductanceProducer.conductance << &g;
  MaximumConductanceProducer.maximumConductance << &gbar;
  ReversalPotentialProducer.reversalPotential << &Shared.E;
  BranchDataArrayProducer.branchDataArray << &branchDataPrePost;
  IndexArrayProducer.indexArray << &indexPrePost;

  InAttrPSet {
    string identifier;
    int idx;
  }

  UserFunction setPostIndex;

  // Input (Connection setting)
  Connection Pre Node (PSet.identifier=="preSynapticPoint") Expects VoltageProducer, BranchDataProducer, IndexProducer {
    VoltageProducer.voltage >> Vpre;
    BranchDataProducer.branchData >> branchDataPrePost;
    IndexProducer.index >> indexPrePost;
  }

  Connection Pre Node (PSet.identifier=="synapticCleft") Expects GlutamateConcentrationProducer, BranchDataProducer, IndexProducer {
    GlutamateConcentrationProducer.NT >> Glut;
    BranchDataProducer.branchData >> branchDataPrePost;
    IndexProducer.index >> indexPrePost;
  }

  Connection Pre Node (PSet.identifier=="compartment[Voltage]") Expects VoltageArrayProducer, BranchDataProducer {
    BranchDataProducer.branchData >> branchDataPrePost;
    setPostIndex();
  }

  Connection Pre Node (PSet.identifier=="receptor") Expects WeightProducer {
    WeightProducer.w >> w;
  }

  Connection Pre Constant (PSet.identifier=="EC") 
    Expects TemperatureProducer {
    TemperatureProducer.T >> Shared.T;
  }

  Connection Pre Constant (PSet.identifier=="dt") Expects TimeStepProducer {
    TimeStepProducer.deltaT >> Shared.deltaT;
  }
/*}}}*/
}

#endif
