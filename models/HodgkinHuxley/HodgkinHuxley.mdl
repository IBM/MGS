#ifndef HodgkinHuxley_MDL
#define HodgkinHuxley_MDL
///* =================================================================
//Licensed Materials - Property of IBM
//
//"Restricted Materials of IBM"
//
//BMC-YKT-07-18-2017
//
//(C) Copyright IBM Corp. 2005-2017  All rights reserved
//
//US Government Users Restricted Rights -
//Use, duplication or disclosure restricted by
//GSA ADP Schedule Contract with IBM Corp.
//
//=================================================================
#include "../../nti/include/MaxComputeOrder.h"

Interface BufferedAmplitudeProducer {
	//  dyn_var_t []* amplitude;
	dyn_var_t* currentAmplitude;
	dyn_var_t* delayedAmplitude;
}

Interface BufferedTimeProducer {
	dyn_var_t []* pulseTime;
	dyn_var_t* currentPulseTime;
	dyn_var_t* delayedPulseTime;
}

Interface AmplitudeProducer {
	dyn_var_t* amplitude;
}

Interface PreviousAmplitudeProducer {
	dyn_var_t* previousAmplitude;
}

Interface CurrentProducer {
  dyn_var_t* current;
}

//#ifdef CONSIDER_DI_DV
Interface DIDV_ConductanceProducer {
  //the conductance correspond to small voltage change V(t) to V(t+0.001)
  dyn_var_t* conductance_didv;
}
//#endif

Interface CurrentArrayProducer {
  dyn_var_t []* currents; // [pA] - time (t)
#ifdef CONSIDER_DI_DV
  dyn_var_t []* di_dv; // conductance [nS/um^2] - the change from V(t) to V(t+0.001)
#endif
}

Interface IOCurrentProducer {
//designed for I/O purpose
//NOTE: currently being used for I/O sum(axial-current-to-soma) as total current (pA)
  dyn_var_t * current;
}
Interface IOCurrentArrayProducer {
//designed for I/O purpose
// This is to avoid the case when HH-channel produces (conductanceArray,ErevArray)
//                    to be conflict with GHK-channel produces (CurrentArrayProducer)
  dyn_var_t []* currents;
}

Interface CaCurrentProducer {
  dyn_var_t* current;
}

Interface CaCurrentArrayProducer {
  dyn_var_t []* currents;
}

Interface CaERCurrentProducer {
  dyn_var_t* current;
}

Interface CaERCurrentArrayProducer {
  dyn_var_t []* currents;
}
Interface ReversalPotentialProducer {
  dyn_var_t* reversalPotential;
}

Interface ReversalPotentialArrayProducer {
  dyn_var_t []* reversalPotentials;
}

Interface ConductanceProducer {
  dyn_var_t* conductance;
}

Interface ConductanceArrayProducer {
  dyn_var_t []* conductanceArray;
}

Interface MaximumConductanceProducer {
  dyn_var_t* maximumConductance;
}

Interface MaximumConductanceArrayProducer {
  dyn_var_t []* maximumConductanceArray;
}

Interface VoltageProducer {
   dyn_var_t* voltage;
}

Interface VoltageArrayProducer {
   dyn_var_t []* voltageArray;
}

Interface AnyConcentrationProducer {
//this is help to output data using the same I/O variable
   dyn_var_t* AnyConc;
}
Interface AnyConcentrationArrayProducer {
   dyn_var_t []* AnyConcs;
}

Interface CaConcentrationProducer {
   dyn_var_t* Ca;
}

Interface CaConcentrationArrayProducer {
   dyn_var_t []* CaConcentrations;
}

Interface CaMicrodomainConcentrationArrayProducer {
   dyn_var_t []* CaConcentrations;
}

Interface CaMicrodomainNameArrayProducer {
   string []* microdomainNames;
}

Interface CaERConcentrationProducer {
   dyn_var_t* Ca;
}

Interface CaERConcentrationArrayProducer {
   dyn_var_t []* CaConcentrations;
}

Interface IP3ConcentrationArrayProducer {
   dyn_var_t []* IP3Concentrations;
}

Interface IP3ConcentrationProducer {
   dyn_var_t* IP3;
}

Interface IP3CurrentProducer {
  dyn_var_t* current;
}

Interface IP3CurrentArrayProducer {
  dyn_var_t []* currents;
}

Interface MgConcentrationProducer { 
   dyn_var_t* Mg;
}

Interface NaConcentrationProducer {
   dyn_var_t* Na;
}

Interface KConcentrationProducer {
   dyn_var_t* K;
}

Interface WeightProducer {
   dyn_var_t* w;
}

Interface PlasticityProducer {
   dyn_var_t* w;
}

Interface PlasticityToggleProducer {
   int* plasticityToggle;
}

Interface TemperatureProducer {
   dyn_var_t* T;
}

Interface KetamineProducer {
   dyn_var_t* Ketamine;
}

Interface SurfaceAreaProducer {
   dyn_var_t* surfaceArea; // [um^2]
}

Interface ConnectionSurfaceAreaProducer {
   dyn_var_t* surfaceArea; // [um^2]
}

Interface IndexProducer {
   int* index;
}

Interface IndexArrayProducer {
   int* []* indexArray;
}

Interface DirectIndexArrayProducer {
  //NOTE: This is different from IndexArrayProducer
  //as it provides reference directly to an array
   int []* indexArray;
}

Interface GlycineProducer {
   dyn_var_t* Glycine;
}

Constant ExtracellularMedium Implements NaConcentrationProducer, 
    KConcentrationProducer, CaConcentrationProducer, MgConcentrationProducer, 
    TemperatureProducer, KetamineProducer, GlycineProducer
{// NOTE: Be careful when modifying the unit
  dyn_var_t Na; // [mM] extracellular concetrations expressed by ion name alone
  dyn_var_t K;  // [mM]
  dyn_var_t Mg; // [mM]
  dyn_var_t T;  // [K]
  dyn_var_t Ketamine; // 0 .. 1 (fraction of ketamine block)
  dyn_var_t Ca; // [uM]
  dyn_var_t Glycine; // [uM]
  NaConcentrationProducer.Na << &Na;
  KConcentrationProducer.K << &K;
  CaConcentrationProducer.Ca << &Ca;
  MgConcentrationProducer.Mg << &Mg;
  TemperatureProducer.T << &T;
  KetamineProducer.Ketamine << &Ketamine;
  GlycineProducer.Glycine << &Glycine;
}

// for ionic fluxes across ER membrane 
Interface CaFluxArrayProducer{
  dyn_var_t []* fluxes; // [uM/msec] 
}
// for Synaptic Cleft
Interface NeuroTransmitterConcentrationProducer{
  dyn_var_t* NT; // [uM] neurotransmitter concentration
}
Interface GlutamateConcentrationProducer{
  dyn_var_t* NT; // [uM] neurotransmitter concentration
}
Interface GABAConcentrationProducer{
  dyn_var_t* NT; // [uM] neurotransmitter concentration
}
Interface IP3FluxArrayProducer{
  dyn_var_t []* fluxes; // [uM/msec] 
}

Interface InverseTimeCaProducer {
  dyn_var_t* inverseTime; //[1/ms]
}
Interface ReversalCaProducer{
// which is used similar to the concept of reversal potential 
  dyn_var_t* Ca; //[uM]
}
Interface InverseTimeCaERProducer {
  dyn_var_t* inverseTime; //[1/ms]
}
Interface ReversalCaERProducer{
// which is used similar to the concept of reversal potential 
  dyn_var_t* Ca; //[uM]
}
Interface InverseTimeIP3Producer {
  dyn_var_t* inverseTime; //[1/ms]
}
Interface ReversalIP3Producer{
// which is used similar to the concept of reversal potential 
  dyn_var_t* IP3; //[uM]
}

Interface NameProducer{
   string* name;
}
#endif
