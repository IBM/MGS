#ifndef ChannelNat_MDL
#define ChannelNat_MDL

#include "../../nti/include/MaxComputeOrder.h"

#include "../std/std.mdl"
#include "../HodgkinHuxley/HodgkinHuxley.mdl"
#include "../BranchSolver/BranchSolver.mdl"

//NOTE: Don't use CurrentArrayProducer as it causes conflict with GHK-formula
//    Use IOCurrentArrayProducer instead
Node ChannelNat Implements ConductanceArrayProducer, ReversalPotentialArrayProducer, 
BranchDataProducer, IOCurrentArrayProducer {
/*{{{*/
  //DATA
  // Hodgkin-Huxley-based formula
  //{{{
  dyn_var_t [] gbar; // nS/um^2
  //internal data
  dyn_var_t [] m;
  dyn_var_t [] h;
  dyn_var_t [] g;  // nS/um^2
  float [] Vhalf_m_shift; // [mV]
  float [] Vhalf_h_shift; // [mV]
  dyn_var_t [] Iion; // [pA/um^2] - no need for double,  as only for I/O
  // reference data
  dyn_var_t []* V;//transmembrane voltage [mV]
  BranchDataStruct* branchData; 
  DimensionStruct* []* dimensions;
  //int index; //index of the compartment in branch

  //data mainly used to dynamically assign different conductance on different location
  //NOTE: In SynParams.par file
  //    Use either gbar_dists or gbar_branch
  //      and combine with gbar_values
  float [] gbar_dists; // an array that indicate the threshold-distance (in micrometer)
  float [] gbar_branchorders;// an array that indicate the branch-order (zero-based integer)
  float [] gbar_values;// ... having the corresponding gbar conductance
  // Example:
  // CHANNEL_PARAMS 2
  // Cah 3
  // BRANCHTYPE MTYPE
  // 1 0 <gbar={0.00992}>
  // 4 0 <gbar_dists={380.0,480.0, 590}> 
  // 4 0 <gbar_values={0.000555,0.00555,0.000555}>
  // Nat 3 
  // BRANCHTYPE MTYPE
  // 1 0 <gbar={0.00992}>
  // 4 0 <gbar_branchorders={0, 1, 2}> 
  // 4 0 <gbar_values={0.0555,0.555,0.000555}>
  //}}}

  //SHARED DATA
  Shared {//in xxxCompCategory.C
  //{{{
    dyn_var_t* Na_IC; // [mM]
    dyn_var_t* Na_EC; // [mM]
    dyn_var_t* deltaT; // [ms]
    dyn_var_t* T;     // [K]
    dyn_var_t Tadj;  // kinetics adjustment based on recorded data 
                      //   and tempt. used for the simulation 
    dyn_var_t [] E_Na; // [mV]
    InitPhase computeE; // [mV]
  //}}}
  }

  RuntimePhase update();
  InitPhase initialize;

  ConductanceArrayProducer.conductanceArray << &g;
  ReversalPotentialArrayProducer.reversalPotentials << &Shared.E_Na;
  BranchDataProducer.branchData << branchData;
  IOCurrentArrayProducer.currents << &Iion;

  InAttrPSet {//information of the incoming connection
    string identifier; //name of the compartment variable
    int idx;   // index of the compartment on a branch
  }

  Connection Pre Node (PSet.identifier=="compartment[Voltage]") Expects VoltageArrayProducer, 
          BranchDataProducer, DimensionArrayProducer
  {
    VoltageArrayProducer.voltageArray >> V;
    BranchDataProducer.branchData >> branchData;
    DimensionArrayProducer.dimensionArray >> dimensions;
 }

  Connection Pre Node (PSet.identifier=="IC[Voltage]") Expects NaConcentrationProducer {
    NaConcentrationProducer.Na >> Shared.Na_IC;
  }

  Connection Pre Constant (PSet.identifier=="EC") 
	Expects NaConcentrationProducer, TemperatureProducer {
    NaConcentrationProducer.Na >> Shared.Na_EC;
    TemperatureProducer.T >> Shared.T;
  }

  Connection Pre Constant (PSet.identifier=="dt") Expects TimeStepProducer {
    TimeStepProducer.deltaT >> Shared.deltaT;
  }
/*}}}*/
}

//NOTE: Model suppose to be specific for Nav1.6 gene-expressed Na+ channel
Node ChannelNatv16 Implements ConductanceArrayProducer, ReversalPotentialArrayProducer, 
BranchDataProducer, IOCurrentArrayProducer {
/*{{{*/
  //DATA
  // Hodgkin-Huxley-based formula
  //{{{
  dyn_var_t [] gbar; // nS/um^2
  //internal data
  dyn_var_t [] m;
  dyn_var_t [] h;
  dyn_var_t [] g;  // nS/um^2
  //dyn_var_t [] Vhalf_m; // [mV]
  dyn_var_t [] Vhalf_m_shift; // [mV]
  //dyn_var_t [] Vhalf_h; // [mV]
  dyn_var_t [] Vhalf_h_shift; // [mV]
  dyn_var_t [] Iion; // [pA/um^2] - no need for double,  as only for I/O
  // reference data
  dyn_var_t []* V;//transmembrane voltage [mV]
  BranchDataStruct* branchData; 
  DimensionStruct* []* dimensions;
  //int index; //index of the compartment in branch

  //data mainly used to dynamically assign different conductance on different location
  //NOTE: In SynParams.par file
  //    Use either gbar_dists or gbar_branch
  //      and combine with gbar_values
  float [] gbar_dists; // an array that indicate the threshold-distance (in micrometer)
  float [] gbar_branchorders;// an array that indicate the branch-order (zero-based integer)
  float [] gbar_values;// ... having the corresponding gbar conductance
  // Example:
  // CHANNEL_PARAMS 2
  // Cah 3
  // BRANCHTYPE MTYPE
  // 1 0 <gbar={0.00992}>
  // 4 0 <gbar_dists={380.0,480.0, 590}> 
  // 4 0 <gbar_values={0.000555,0.00555,0.000555}>
  // Nat 3 
  // BRANCHTYPE MTYPE
  // 1 0 <gbar={0.00992}>
  // 4 0 <gbar_branchorders={0, 1, 2}> 
  // 4 0 <gbar_values={0.0555,0.555,0.000555}>
  //}}}

  //SHARED DATA
  Shared {//in xxxCompCategory.C
  //{{{
    dyn_var_t* Na_IC; // [mM]
    dyn_var_t* Na_EC; // [mM]
    dyn_var_t* deltaT; // [ms]
    dyn_var_t* T;     // [K]
    dyn_var_t Tadj;  // kinetics adjustment based on recorded data 
                      //   and tempt. used for the simulation 
    dyn_var_t [] E_Na; // [mV]
    InitPhase computeE; // [mV]
  //}}}
  }

  RuntimePhase update();
  InitPhase initialize;

  ConductanceArrayProducer.conductanceArray << &g;
  ReversalPotentialArrayProducer.reversalPotentials << &Shared.E_Na;
  BranchDataProducer.branchData << branchData;
  IOCurrentArrayProducer.currents << &Iion;

  InAttrPSet {//information of the incoming connection
    string identifier; //name of the compartment variable
    int idx;   // index of the compartment on a branch
  }

  Connection Pre Node (PSet.identifier=="compartment[Voltage]") Expects VoltageArrayProducer, 
          BranchDataProducer, DimensionArrayProducer
  {
    VoltageArrayProducer.voltageArray >> V;
    BranchDataProducer.branchData >> branchData;
    DimensionArrayProducer.dimensionArray >> dimensions;
 }

  Connection Pre Node (PSet.identifier=="IC[Voltage]") Expects NaConcentrationProducer {
    NaConcentrationProducer.Na >> Shared.Na_IC;
  }

  Connection Pre Constant (PSet.identifier=="EC") 
	Expects NaConcentrationProducer, TemperatureProducer {
    NaConcentrationProducer.Na >> Shared.Na_EC;
    TemperatureProducer.T >> Shared.T;
  }

  Connection Pre Constant (PSet.identifier=="dt") Expects TimeStepProducer {
    TimeStepProducer.deltaT >> Shared.deltaT;
  }
/*}}}*/
}


#endif
