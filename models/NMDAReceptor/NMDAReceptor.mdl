#ifndef NMDAReceptor_MDL
#define NMDAReceptor_MDL

#include "../../nti/include/MaxComputeOrder.h"
#include "../std/std.mdl"
#include "../HodgkinHuxley/HodgkinHuxley.mdl"
#include "../BranchSolver/BranchSolver.mdl"

//IMPORTANT:
//  The term post-side or postsynaptic-side refers to the side at which the receptor
//    reside (not necessary means the postsynaptic neuron)
//  There are scenarios in that the receptor reside on pre-synaptic neuron, and in
//  such case, the membrane of the pre-synaptic neuron before the post-side (or 
//  postsynaptic-side) of the receptor
Node NMDAReceptor Implements ConductanceProducer, ReversalPotentialProducer
            , MaximumConductanceProducer 
            , CaCurrentProducer
#ifdef KEEP_PAIR_PRE_POST
            , BranchDataArrayProducer, IndexArrayProducer //for both pre- and post- side - needed I/O purpose
#else
            //{{{ not supposed to be used
//TUAN TODO: not completed yet, follow mGluR1
            //, BranchDataArrayProducer, IndexArrayProducer //for pre-only
            //, BranchDataProducer  // for post-only
//Change this to Pre and Post
            //-->removed, BranchDataArrayProducer, IndexArrayProducer //for pre-only
            , BranchDataProducerPre, IndexProducerPre  // for pre-only
            , BranchDataProducerPost, IndexProducerPost  // for post-only
            //}}}
#endif
            , DimensionArrayProducer //for post
            , WeightProducer 
{
/*{{{*/
  //DATA
  //{{{ 
  // Hodgkin-Huxley-based formula 
  //internal data
  //{{{
  dyn_var_t g;     // [nS/um^2]
  dyn_var_t gbar;  // [nS/um^2]
  dyn_var_t gbar0;
  dyn_var_t w;     // [unitless] - plasticity factor (if enabled), e.g. to AMPAR 
  dyn_var_t buffer; //[nS/(um^2.ms)]  - METAplasticity factor (if enabled), i.e. increase NMDAR gbar
  dyn_var_t r; // fraction of opening receptors
  dyn_var_t I_Ca; // [pA/um^2]
  dyn_var_t E_Ca; // [mV]
  dyn_var_t tp; // TUAN: why we have 'tp' here? - not being used yet
  //}}}

  //{{{cleft-info
  dyn_var_t* Glut; //[uM] concentration
  //}}}
  //{{{pre-side info
//NOTE: Even though there is only 1 pre and 1 post for 1 synaptic-receptor
//  Due to the constraint of interfaces, we have to use array
  //{{{only use with preSynapticPoint
  dyn_var_t* Vpre;  // [mV] preSynaptic voltage
  //}}}
#ifdef KEEP_PAIR_PRE_POST
  //nothing
#else
  int* [] indexPre; // NOTE: only 1-element array
  BranchDataStruct* [] branchDataPre; //only 1-element array
#endif
  //}}}
  //{{{both-side
#ifdef KEEP_PAIR_PRE_POST
  //NOTE: This information is provided via connecting from SynapticCleft
  // Indeed, n = 1 only (see text at the beginning of SynapticCleft)
  int* [] indexPrePost; // array of 2n elements: in pair (preIdx,postIdx)
  BranchDataStruct* [] branchDataPrePost; // array of 2n elements; in pair (preBD, postBD)
#endif
  //}}}
  //{{{post-side info
  //and only 1 post-side
  //  Due to the constraint of interfaces, we have to use array
  dyn_var_t []* Vpost; // [mV]
  dyn_var_t []* Ca_IC; // [uM]
  int indexPost;
#ifdef KEEP_PAIR_PRE_POST
  //do nothing
#else
  BranchDataStruct*  branchDataPost; // only 1 post-side
#endif
  DimensionStruct* []* dimensions;
  //}}}
  //}}}
#ifdef MICRODOMAIN_CALCIUM
  string microdomainName; //default is empty, i.e. see cytosolic Ca2+
#endif

  Shared {
    //{{{ 
     //NT + C <==>[alpha][beta] O.NT
    dyn_var_t alpha; // uM^-1 msec^-1
    dyn_var_t beta;  // msec^-1
		//{{{ only used with preSynapticPoint
    dyn_var_t NTmax; // [uM] maximum concentration of NeuroTransmitter Glutamate
    dyn_var_t Vp; // [mV]  voltage at which concentration of Glutamate is at half-peak
    dyn_var_t Kp; // [mV]  the steepness of the curve of Glutamate = f(Vm)
	  //}}}
    dyn_var_t E;  //reversal potential of NMDAR

    dyn_var_t* deltaT;
    dyn_var_t* T;
    dyn_var_t Tadj;  // [unitless] kinetics adjustment based on recorded data 
		//   and tempt. used for the simulation 
    InitPhase computeTadj;  
    dyn_var_t* Mg_EC; // [mM]
    dyn_var_t* Ketamine; // 0..1 (fraction of Ketamine block)
    dyn_var_t* Ca_EC; // [uM]
    dyn_var_t* Glycine; // [uM]

    //Plasticity params
    //{{{
    int plasticityOn;
    int plasticityStartAt;
    int plasticityStopAt;
    dyn_var_t theta_d; // threshold of Ca2+ for depression
    dyn_var_t theta_p; // threshold of Ca2+ for potentiation
    dyn_var_t gamma_d;
    dyn_var_t gamma_p;
    dyn_var_t tau;
    dyn_var_t w_th;
    //}}}

    //Meta-plasticity NMDAR
    //{{{
    dyn_var_t deltaNMDAR;
    dyn_var_t alphaBuffer;
    dyn_var_t tauBuffer;
    //}}}
#ifdef MICRODOMAIN_CALCIUM
    string [] * tmp_microdomainNames;
#endif
    //}}}
    int[] * indexPrePost_connect;
   }

  //{{{Phases 
  InitPhase initializeNMDA;
  RuntimePhase updateNMDA;
  RuntimePhase updateNMDADepPlasticity;
  //}}}

  //{{{ Output
  ConductanceProducer.conductance << &g;
  ReversalPotentialProducer.reversalPotential << &Shared.E;
  MaximumConductanceProducer.maximumConductance << &gbar;
  CaCurrentProducer.current << &I_Ca;
#ifdef KEEP_PAIR_PRE_POST
  BranchDataArrayProducer.branchDataArray << &branchDataPrePost;
  IndexArrayProducer.indexArray << &indexPrePost;
#else
  BranchDataArrayProducer.branchDataArray << &branchDataPre;
  IndexArrayProducer.indexArray << &indexPre;
  BranchDataProducer.branchData << branchDataPost;
#endif
  DimensionArrayProducer.dimensionArray << dimensions;
  WeightProducer.w << &w;  // for mixed-synapse (NMDAR on AMPAR)
  //}}}

  InAttrPSet {//information of the incoming connection
    string identifier; 
    int idx;   // index of the compartment on a branch
          // if identifier is the name of the compartment variable
#ifdef MICRODOMAIN_CALCIUM
    string domainName; //empty means current going straight to well-mixed cytosol
#endif
  }

  UserFunction setPostIndex;
  UserFunction setPrePostIndex;

  //{{{ Connection (input)
  Connection Pre Node (PSet.identifier=="preSynapticPoint") Expects VoltageProducer
    , BranchDataProducer, IndexProducer 
  {//the info from presynaptic-side is passed to receptor via this
      // intermediate nodetype
      //{{{
    VoltageProducer.voltage >> Vpre;
#ifdef KEEP_PAIR_PRE_POST
    BranchDataProducer.branchData >> branchDataPrePost;
    IndexProducer.index >> indexPrePost;
#else
    BranchDataProducer.branchData >> branchDataPre;
    IndexProducer.index >> indexPre;
#endif
    //}}}
  }

  Connection Pre Node (PSet.identifier=="synapticCleft") Expects 
    GlutamateConcentrationProducer
#ifdef KEEP_PAIR_PRE_POST
    , DirectIndexArrayProducer
    , BranchDataArrayProducer
#else
    , BranchDataProducer, IndexProducer 
#endif
  {
  //{{{NOTE: The information from both sides (pre-side, post-side) are provided
    GlutamateConcentrationProducer.NT >> Glut;
#ifdef KEEP_PAIR_PRE_POST
    BranchDataArrayProducer.branchDataArray >> branchDataPrePost;
    DirectIndexArrayProducer.indexArray >> Shared.indexPrePost_connect;
    setPrePostIndex();
#else
    BranchDataProducer.branchData >> branchDataPre;
    IndexProducer.index >> indexPre;
#endif
  //}}}
  }

  Connection Pre Node (PSet.identifier=="compartment[Voltage]") Expects 
    VoltageArrayProducer
    , DimensionArrayProducer
    ,  BranchDataProducer {//the info from postsynaptic-side is passed to receptor directly
  //{{{
#ifdef KEEP_PAIR_PRE_POST
    //no-need as we already have this information from 'synapticCleft' connection
    //BranchDataProducer.branchData >> branchDataPrePost;
#else
    BranchDataProducer.branchData >> branchDataPost;
#endif
    //REMEMBER: When use in C++ code, only use Vpost[indexPost]
    VoltageArrayProducer.voltageArray >> Vpost;
    DimensionArrayProducer.dimensionArray >> dimensions;
    //NOTE: Internally, it only update indexPrePost when PreSynapticPoint is used
    setPostIndex(); // so that Vpost[indexPost] point to the voltage in the proper compartment index
  //}}}
  }

#ifdef MICRODOMAIN_CALCIUM
  UserFunction setCalciumMicrodomain;
  Connection Pre Node (PSet.identifier=="compartment[Calcium(domain)]") Expects 
    CaMicrodomainConcentrationArrayProducer
    , CaMicrodomainNameArrayProducer
    //, BranchDataProducer, DimensionArrayProducer
  {
      //BranchDataProducer.branchData >> branchData;
      //DimensionArrayProducer.dimensionArray >> dimensions;
      CaMicrodomainConcentrationArrayProducer.CaConcentrations >> Ca_IC;
      CaMicrodomainNameArrayProducer.microdomainNames >> Shared.tmp_microdomainNames;
      setCalciumMicrodomain();
  }
#endif
  Connection Pre Node (PSet.identifier=="compartment[Calcium]") Expects 
    CaConcentrationArrayProducer {
    //REMEMBER: When use in C++ code, only use Ca_IC[indexPost]
    CaConcentrationArrayProducer.CaConcentrations >> Ca_IC;
    //{{{IMPORTANT NOTE
//TUAN TODO: add the tracker in the code (some channel has already been implemented - find it out)
//TUAN TODO BUG: potential bug if the receptor only sense Calcium; but not Voltage
// and is used with SynapticPoint
// which in turns require calling this
    //setPostIndex(); // so that Vpost[indexPost] point to the voltage in the proper compartment index 
// but if we call this, it is resolved; However, it requires
//   PreSynapticPoint to connect first, to ensure the case when both Calcium and Voltage
//   are connected; only one actually updates indexPrePost
    //}}}
  }

  Connection Pre Constant (PSet.identifier=="EC") Expects CaConcentrationProducer, 
        MgConcentrationProducer, TemperatureProducer, KetamineProducer, GlycineProducer 
  {
    //{{{
    CaConcentrationProducer.Ca >> Shared.Ca_EC;
    MgConcentrationProducer.Mg >> Shared.Mg_EC;
    TemperatureProducer.T >> Shared.T;
    KetamineProducer.Ketamine >> Shared.Ketamine;
    GlycineProducer.Glycine >> Shared.Glycine;
    //}}}
  }

  Connection Pre Constant (PSet.identifier=="dt") Expects TimeStepProducer {
    TimeStepProducer.deltaT >> Shared.deltaT;
  }
  //}}}

/*}}}*/
}

// Markov-based model
Node NMDAReceptor_Markov Implements ConductanceProducer, ReversalPotentialProducer
            , MaximumConductanceProducer 
            , CaCurrentProducer
#ifdef KEEP_PAIR_PRE_POST
            , BranchDataArrayProducer, IndexArrayProducer //for both pre- and post- side - needed I/O purpose
#else
            //{{{ not supposed to be used
//TUAN TODO: not completed yet, follow mGluR1
            //, BranchDataArrayProducer, IndexArrayProducer //for pre-only
            //, BranchDataProducer  // for post-only
//Change this to Pre and Post
            //-->removed, BranchDataArrayProducer, IndexArrayProducer //for pre-only
            , BranchDataProducerPre, IndexProducerPre  // for pre-only
            , BranchDataProducerPost, IndexProducerPost  // for post-only
            //}}}
#endif
            , DimensionArrayProducer //for post
            , WeightProducer 
{
/*{{{*/
  //DATA
  //{{{ 
  // Hodgkin-Huxley-based formula 
  //internal data
  //{{{
  dyn_var_t g;     // [nS/um^2]
  dyn_var_t gbar;  // [nS/um^2]
  dyn_var_t gbar0;
  dyn_var_t fC0, fC1, fC2, fD, fO;//Markov-states (fraction)
  dyn_var_t w;     // [unitless] - plasticity factor (if enabled), e.g. to AMPAR 
  dyn_var_t buffer; //[nS/(um^2.ms)]  - METAplasticity factor (if enabled), i.e. increase NMDAR gbar
  dyn_var_t r; // fraction of opening receptors
  dyn_var_t I_Ca; // [pA/um^2]
  dyn_var_t E_Ca; // [mV]
  dyn_var_t tp; // TUAN: why we have 'tp' here? - not being used yet
  //}}}

  //{{{cleft-info
  dyn_var_t* Glut; //[uM] concentration
  //}}}
  //{{{pre-side info
//NOTE: Even though there is only 1 pre and 1 post for 1 synaptic-receptor
//  Due to the constraint of interfaces, we have to use array
  //{{{only use with preSynapticPoint
  dyn_var_t* Vpre;  // [mV] preSynaptic voltage
  //}}}
#ifdef KEEP_PAIR_PRE_POST
  //nothing
#else
  int* [] indexPre; // NOTE: only 1-element array
  BranchDataStruct* [] branchDataPre; //only 1-element array
#endif
  //}}}
  //{{{both-side
#ifdef KEEP_PAIR_PRE_POST
  //NOTE: This information is provided via connecting from SynapticCleft
  // Indeed, n = 1 only (see text at the beginning of SynapticCleft)
  int* [] indexPrePost; // array of 2n elements: in pair (preIdx,postIdx)
  BranchDataStruct* [] branchDataPrePost; // array of 2n elements; in pair (preBD, postBD)
#endif
  //}}}
  //{{{post-side info
  //and only 1 post-side
  //  Due to the constraint of interfaces, we have to use array
  dyn_var_t []* Vpost; // [mV]
  dyn_var_t []* Ca_IC; // [uM]
  int indexPost;
#ifdef KEEP_PAIR_PRE_POST
  //do nothing
#else
  BranchDataStruct*  branchDataPost; // only 1 post-side
#endif
  DimensionStruct* []* dimensions;
  //}}}
  //}}}
#ifdef MICRODOMAIN_CALCIUM
  string microdomainName; //default is empty, i.e. see cytosolic Ca2+
#endif

  Shared {
    //{{{ 
     //NT + C <==>[alpha][beta] O.NT
    dyn_var_t Rb;// uM^-1 msec^-1
    dyn_var_t cRb;// msec^-1
    dyn_var_t Ru;// msec^-1
    dyn_var_t alpha; // msec^-1, which is Ro
    dyn_var_t beta;// msec^-1,   which is Rc
    dyn_var_t Rr;// msec^-1
    dyn_var_t Rd;// msec^-1
    //{{{ only used with preSynapticPoint
    dyn_var_t NTmax; // [uM] maximum concentration of NeuroTransmitter Glutamate
    dyn_var_t Vp; // [mV]  voltage at which concentration of Glutamate is at half-peak
    dyn_var_t Kp; // [mV]  the steepness of the curve of Glutamate = f(Vm)
    //}}}
    dyn_var_t E;  //reversal potential of NMDAR

    dyn_var_t* deltaT;
    dyn_var_t* T;  // [Kelvin]
    dyn_var_t Tadj;  // [unitless] kinetics adjustment based on recorded data 
		//   and tempt. used for the simulation 
    InitPhase computeTadj;  
    dyn_var_t* Mg_EC; // [mM]
    dyn_var_t* Ketamine; // 0..1 (fraction of Ketamine block)
    dyn_var_t* Ca_EC; // [uM]
    dyn_var_t* Glycine; // [uM]

    //Plasticity params
    //{{{
    int plasticityOn;
    int plasticityStartAt;
    int plasticityStopAt;
    dyn_var_t theta_d; // threshold of Ca2+ for depression
    dyn_var_t theta_p; // threshold of Ca2+ for potentiation
    dyn_var_t gamma_d;
    dyn_var_t gamma_p;
    dyn_var_t tau;
    dyn_var_t w_th;
    //}}}

    //Meta-plasticity NMDAR
    //{{{
    dyn_var_t deltaNMDAR;
    dyn_var_t alphaBuffer;
    dyn_var_t tauBuffer;
    //}}}
#ifdef MICRODOMAIN_CALCIUM
    string [] * tmp_microdomainNames;
#endif
    //}}}
    int[] * indexPrePost_connect;
   }

  //{{{Phases 
  InitPhase initializeNMDA;
  RuntimePhase updateNMDA;
  RuntimePhase updateNMDADepPlasticity;
  //}}}

  //{{{ Output
  ConductanceProducer.conductance << &g;
  ReversalPotentialProducer.reversalPotential << &Shared.E;
  MaximumConductanceProducer.maximumConductance << &gbar;
  CaCurrentProducer.current << &I_Ca;
#ifdef KEEP_PAIR_PRE_POST
  BranchDataArrayProducer.branchDataArray << &branchDataPrePost;
  IndexArrayProducer.indexArray << &indexPrePost;
#else
  BranchDataArrayProducer.branchDataArray << &branchDataPre;
  IndexArrayProducer.indexArray << &indexPre;
  BranchDataProducer.branchData << branchDataPost;
#endif
  DimensionArrayProducer.dimensionArray << dimensions;
  WeightProducer.w << &w;  // for mixed-synapse (NMDAR on AMPAR)
  //}}}

  InAttrPSet {//information of the incoming connection
    string identifier; 
    int idx;   // index of the compartment on a branch
          // if identifier is the name of the compartment variable
#ifdef MICRODOMAIN_CALCIUM
    string domainName; //empty means current going straight to well-mixed cytosol
#endif
  }

  UserFunction setPostIndex;
  UserFunction setPrePostIndex;

  //{{{ Connection (input)
  Connection Pre Node (PSet.identifier=="preSynapticPoint") Expects VoltageProducer
    , BranchDataProducer, IndexProducer 
  {//the info from presynaptic-side is passed to receptor via this
      // intermediate nodetype
      //{{{
    VoltageProducer.voltage >> Vpre;
#ifdef KEEP_PAIR_PRE_POST
    BranchDataProducer.branchData >> branchDataPrePost;
    IndexProducer.index >> indexPrePost;
#else
    BranchDataProducer.branchData >> branchDataPre;
    IndexProducer.index >> indexPre;
#endif
    //}}}
  }

  Connection Pre Node (PSet.identifier=="synapticCleft") Expects 
    GlutamateConcentrationProducer
#ifdef KEEP_PAIR_PRE_POST
    , DirectIndexArrayProducer
    , BranchDataArrayProducer
#else
    , BranchDataProducer, IndexProducer 
#endif
  {
  //{{{NOTE: The information from both sides (pre-side, post-side) are provided
    GlutamateConcentrationProducer.NT >> Glut;
#ifdef KEEP_PAIR_PRE_POST
    BranchDataArrayProducer.branchDataArray >> branchDataPrePost;
    DirectIndexArrayProducer.indexArray >> Shared.indexPrePost_connect;
    setPrePostIndex();
#else
    BranchDataProducer.branchData >> branchDataPre;
    IndexProducer.index >> indexPre;
#endif
  //}}}
  }

  Connection Pre Node (PSet.identifier=="compartment[Voltage]") Expects 
    VoltageArrayProducer
    , DimensionArrayProducer
    ,  BranchDataProducer {//the info from postsynaptic-side is passed to receptor directly
  //{{{
#ifdef KEEP_PAIR_PRE_POST
    //no-need as we already have this information from 'synapticCleft' connection
    //BranchDataProducer.branchData >> branchDataPrePost;
#else
    BranchDataProducer.branchData >> branchDataPost;
#endif
    //REMEMBER: When use in C++ code, only use Vpost[indexPost]
    VoltageArrayProducer.voltageArray >> Vpost;
    DimensionArrayProducer.dimensionArray >> dimensions;
    //NOTE: Internally, it only update indexPrePost when PreSynapticPoint is used
    setPostIndex(); // so that Vpost[indexPost] point to the voltage in the proper compartment index
  //}}}
  }

#ifdef MICRODOMAIN_CALCIUM
  UserFunction setCalciumMicrodomain;
  Connection Pre Node (PSet.identifier=="compartment[Calcium(domain)]") Expects 
    CaMicrodomainConcentrationArrayProducer
    , CaMicrodomainNameArrayProducer
    //, BranchDataProducer, DimensionArrayProducer
  {
      //BranchDataProducer.branchData >> branchData;
      //DimensionArrayProducer.dimensionArray >> dimensions;
      CaMicrodomainConcentrationArrayProducer.CaConcentrations >> Ca_IC;
      CaMicrodomainNameArrayProducer.microdomainNames >> Shared.tmp_microdomainNames;
      setCalciumMicrodomain();
  }
#endif
  Connection Pre Node (PSet.identifier=="compartment[Calcium]") Expects 
    CaConcentrationArrayProducer {
    //REMEMBER: When use in C++ code, only use Ca_IC[indexPost]
    CaConcentrationArrayProducer.CaConcentrations >> Ca_IC;
    //{{{IMPORTANT NOTE
//TUAN TODO: add the tracker in the code (some channel has already been implemented - find it out)
//TUAN TODO BUG: potential bug if the receptor only sense Calcium; but not Voltage
// and is used with SynapticPoint
// which in turns require calling this
    //setPostIndex(); // so that Vpost[indexPost] point to the voltage in the proper compartment index 
// but if we call this, it is resolved; However, it requires
//   PreSynapticPoint to connect first, to ensure the case when both Calcium and Voltage
//   are connected; only one actually updates indexPrePost
    //}}}
  }

  Connection Pre Constant (PSet.identifier=="EC") Expects CaConcentrationProducer, 
        MgConcentrationProducer, TemperatureProducer, KetamineProducer, GlycineProducer 
  {
    //{{{
    CaConcentrationProducer.Ca >> Shared.Ca_EC;
    MgConcentrationProducer.Mg >> Shared.Mg_EC;
    TemperatureProducer.T >> Shared.T;
    KetamineProducer.Ketamine >> Shared.Ketamine;
    GlycineProducer.Glycine >> Shared.Glycine;
    //}}}
  }

  Connection Pre Constant (PSet.identifier=="dt") Expects TimeStepProducer {
    TimeStepProducer.deltaT >> Shared.deltaT;
  }
  //}}}

/*}}}*/
}


#endif
