#ifndef HodgkinHuxleyVoltageJunction_MDL
#define HodgkinHuxleyVoltageJunction_MDL

#include "../std/std.mdl"
#include "../HodgkinHuxley/HodgkinHuxley.mdl"
#include "../HodgkinHuxleyVoltage/HodgkinHuxleyVoltage.mdl"
#include "../LaboratoryTools/LaboratoryTools.mdl"


Node HodgkinHuxleyVoltageJunction Implements DimensionArrayProducer, BranchDataProducer,
     VoltageArrayProducer, 
	 NaConcentrationProducer, KConcentrationProducer {
/*{{{*/
  DimensionStruct* [] dimensions;
  BranchDataStruct* branchData;
  dyn_var_t area;
  dyn_var_t [] gAxial; //axial-conductance
  dyn_var_t Vcur;
  dyn_var_t [] Vnew;

  dyn_var_t Cm;
  dyn_var_t cmt;
  dyn_var_t gLeak;

  // currents
  ChannelCurrents [] channelCurrents;

  dyn_var_t* [] receptorConductances;
  dyn_var_t* [] receptorReversalPotentials;

  dyn_var_t* [] injectedCurrents;

  dyn_var_t* [] voltageInputs;
  DimensionStruct* [] dimensionInputs;

  Shared {
    dyn_var_t* deltaT;
    dyn_var_t Ra;
    dyn_var_t Na; // intracellular concentrations expressed by ion name alone
    dyn_var_t K;
    dyn_var_t E_leak;
  }

  VoltageArrayProducer.voltageArray << &Vnew;
  DimensionArrayProducer.dimensionArray << &dimensions;
  BranchDataProducer.branchData << branchData;

  NaConcentrationProducer.Na << &Shared.Na;
  KConcentrationProducer.K << &Shared.K;

  InitPhase initializeJunction;
   
  RuntimePhase predictJunction, correctJunction;

  InAttrPSet {
    string identifier;
    TissueSite site;
    int idx;
  }	

  Connection Pre Constant (PSet.identifier=="dimension") Expects DimensionProducer {
    DimensionProducer.dimension >> dimensions;
   }

  Connection Pre Constant (PSet.identifier=="branchData") Expects BranchDataProducer {
    BranchDataProducer.branchData >> branchData;
   }

  Connection Pre Node (PSet.identifier=="channels[Voltage]") Expects ConductanceArrayProducer, ReversalPotentialArrayProducer {
    ConductanceArrayProducer.conductanceArray >> channelCurrents.conductances;
    ReversalPotentialArrayProducer.reversalPotentials >> channelCurrents.reversalPotentials;
   }

  Connection Pre Node (PSet.identifier=="electricalSynapse[Voltage]") Expects CurrentProducer {
    CurrentProducer.current >> injectedCurrents;
   }

  Connection Pre Node (PSet.identifier=="chemicalSynapse[Voltage]") Expects ConductanceProducer, ReversalPotentialProducer {
    ConductanceProducer.conductance >> receptorConductances;
    ReversalPotentialProducer.reversalPotential >> receptorReversalPotentials;
   }

  PredicateFunction checkSite;
  Connection Pre Variable (PSet.identifier=="stimulation" && checkSite()) Expects CurrentProducer {
    CurrentProducer.current >> injectedCurrents;
   }

  Connection Pre Node (PSet.identifier=="endpoint") Expects VoltageProducer, DimensionProducer  {
    VoltageProducer.voltage >> voltageInputs;
    DimensionProducer.dimension >> dimensionInputs;
  }

  PredicateFunction confirmUniqueDeltaT;
  Connection Pre Constant (PSet.identifier=="dt" && confirmUniqueDeltaT()) Expects TimeStepProducer {
    TimeStepProducer.deltaT >> Shared.deltaT;
  }
/*}}}*/
}

Node VoltageJunctionPoint Implements VoltageProducer, DimensionProducer
{
/*{{{*/
  dyn_var_t* voltage;
  DimensionStruct* dimension;

  Shared {
    dyn_var_t []* voltageConnect;
    DimensionStruct* []* dimensionsConnect;
  }
  VoltageProducer.voltage << voltage;
  DimensionProducer.dimension << dimension;

  InAttrPSet {
    string identifier;
  }

  UserFunction setPointers;

  Connection Pre Node () Expects VoltageArrayProducer, DimensionArrayProducer {
    VoltageArrayProducer.voltageArray >> Shared.voltageConnect;
    DimensionArrayProducer.dimensionArray >> Shared.dimensionsConnect;   
    setPointers();
  }
  InitPhase produceInitialState(dimension);
  RuntimePhase produceVoltage(voltage);
/*}}}*/
}

#endif
