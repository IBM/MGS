#ifndef HodgkinHuxleyVoltageJunction_MDL
#define HodgkinHuxleyVoltageJunction_MDL

#include "../std/std.mdl"
#include "../HodgkinHuxley/HodgkinHuxley.mdl"
#include "../HodgkinHuxleyVoltage/HodgkinHuxleyVoltage.mdl"
#include "../LaboratoryTools/LaboratoryTools.mdl"


Node HodgkinHuxleyVoltageJunction Implements VoltageArrayProducer, DimensionArrayProducer, BranchDataProducer,
	NaConcentrationProducer, KConcentrationProducer {
  DimensionStruct* [] dimensions;
  BranchDataStruct* branchData;
  float area;
  float [] gAxial;
  float Vcur;
  float [] Vnew;

  float Cm;
  float cmt;
  float gLeak;

  // currents
  ChannelCurrents [] channelCurrents;

  float* [] receptorConductances;
  float* [] receptorReversalPotentials;

  float* [] injectedCurrents;

  float* [] voltageInputs;
  DimensionStruct* [] dimensionInputs;

  Shared {
    float* deltaT;
    float Ra;
    float Na; // intracellular concentrations expressed by ion name alone
    float K;
    float E_leak;

    InitPhase deriveParameters;
  }

  VoltageArrayProducer.voltageArray << &Vnew;
  DimensionArrayProducer.dimensionArray << &dimensions;
  BranchDataProducer.branchData << branchData;

  NaConcentrationProducer.Na << &Shared.Na;
  KConcentrationProducer.K << &Shared.K;

  InitPhase initializeJunction;
  RuntimePhase predictJunction, correctJunction;

  InAttrPSet {
    string identifier;
    TissueSite site;
    int idx;
  }	

  Connection Pre Constant (PSet.identifier=="dimension") Expects DimensionProducer {
    DimensionProducer.dimension >> dimensions;
   }

  Connection Pre Constant (PSet.identifier=="branchData") Expects BranchDataProducer {
    BranchDataProducer.branchData >> branchData;
   }

  Connection Pre Node (PSet.identifier=="channels[Voltage]") Expects ConductanceArrayProducer, ReversalPotentialArrayProducer {
    ConductanceArrayProducer.conductanceArray >> channelCurrents.conductances;
    ReversalPotentialArrayProducer.reversalPotentials >> channelCurrents.reversalPotentials;
   }

  Connection Pre Node (PSet.identifier=="electricalSynapse[Voltage]") Expects CurrentProducer {
    CurrentProducer.current >> injectedCurrents;
   }

  Connection Pre Node (PSet.identifier=="chemicalSynapse[Voltage]") Expects ConductanceProducer, ReversalPotentialProducer {
    ConductanceProducer.conductance >> receptorConductances;
    ReversalPotentialProducer.reversalPotential >> receptorReversalPotentials;
   }

  PredicateFunction checkSite;
  Connection Pre Variable (PSet.identifier=="stimulation" && checkSite()) Expects CurrentProducer {
    CurrentProducer.current >> injectedCurrents;
   }

  Connection Pre Node (PSet.identifier=="endpoint") Expects VoltageProducer, DimensionProducer  {
    VoltageProducer.voltage >> voltageInputs;
    DimensionProducer.dimension >> dimensionInputs;
  }

  PredicateFunction confirmUniqueDeltaT;
  Connection Pre Constant (PSet.identifier=="dt" && confirmUniqueDeltaT()) Expects TimeStepProducer {
    TimeStepProducer.deltaT >> Shared.deltaT;
  }
}

Node VoltageJunctionPoint Implements VoltageProducer, DimensionProducer
{
  float* voltage;
  DimensionStruct* dimension;
  Shared {
    float []* voltageConnect;
    DimensionStruct* []* dimensionsConnect;
  }
  VoltageProducer.voltage << voltage;
  DimensionProducer.dimension << dimension;

  InAttrPSet {
    string identifier;
  }

  UserFunction setPointers;

  Connection Pre Node () Expects VoltageArrayProducer, DimensionArrayProducer {
    VoltageArrayProducer.voltageArray >> Shared.voltageConnect;
    DimensionArrayProducer.dimensionArray >> Shared.dimensionsConnect;   
    setPointers();
  }
  InitPhase produceInitialState(dimension);
  RuntimePhase produceVoltage(voltage);
}

#endif
