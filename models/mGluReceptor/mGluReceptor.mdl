#ifndef mGluReceptor_MDL
#define mGluReceptor_MDL

#include "../../nti/include/MaxComputeOrder.h"
#include "../std/std.mdl"
#include "../HodgkinHuxley/HodgkinHuxley.mdl"
#include "../BranchSolver/BranchSolver.mdl"

Node mGluReceptorType1 Implements 
            IP3CurrentProducer 
#ifdef KEEP_PAIR_PRE_POST
            , BranchDataArrayProducer, IndexArrayProducer //for both pre- and post- side
#else
//Change this to Pre and Post
            //-->removed, BranchDataArrayProducer, IndexArrayProducer //for pre-only
            , BranchDataProducerPre, IndexProducerPre  // for pre-only
            , BranchDataProducerPost, IndexProducerPost  // for post-only
#endif
            , DimensionArrayProducer //for post
{
/*{{{*/
	//DATA
	//{{{ 
	// Hodgkin-Huxley-based formula 
	//internal data
	//{{{
  //dyn_var_t g;     // [nS/um^2]
  //dyn_var_t gbar;  // [nS/um^2]
  //dyn_var_t gbar0;
  //dyn_var_t w;     // [unitless] - plasticity factor (if enabled)
  //dyn_var_t buffer; //[nS/ms]  - METAplasticity factor (if enabled)
  //dyn_var_t r; // fraction of opening receptors
  dyn_var_t I_IP3; // [pA/um^2]
  //dyn_var_t tp; // TUAN: why we have 'tp' here?
  //}}}

  //{{{cleft-info
  dyn_var_t* Glut; //[uM] concentration
  //}}}
  //{{{pre-side info
//NOTE: Even though there is only 1 pre and 1 post for 1 synaptic-receptor
//  Due to the constraint of interfaces, we have to use array
  //{{{only use with preSynapticPoint
  dyn_var_t* Vpre;  // [mV] preSynaptic voltage
  //}}}
#ifdef KEEP_PAIR_PRE_POST
  //nothing
#else
  //[REMOVED]int* [] indexPre; // NOTE: only 1-element array
  //[REMOVED]BranchDataStruct* [] branchDataPre; //only 1-element array
  int  indexPre; // NOTE: only 1-element array
  BranchDataStruct*  branchDataPre; //only 1-element array
#endif
  //}}}
  //{{{both-side
#ifdef KEEP_PAIR_PRE_POST
//TUAN TODO: to be removed KEEP_PAIR_PRE_POST
// Indeed, n = 1 only
  int* [] indexPrePost; // array of 2n elements: in pair (preIdx,postIdx)
  BranchDataStruct* [] branchDataPrePost; // array of 2n elements; in pair (preBD, postBD)
#endif
  //}}}
  //{{{post-side info
  //and only 1 post-side
  //  Due to the constraint of interfaces, we have to use array
  //dyn_var_t []* Vpost; // [mV]
  //dyn_var_t []* Ca_IC; // [uM]
  int indexPost;
#ifdef KEEP_PAIR_PRE_POST
  //do nothing
#else
  BranchDataStruct*  branchDataPost; // only 1 post-side
#endif
  DimensionStruct* []* dimensions;
  //}}}
  //}}}

  Shared {
    //{{{ 
     //NT + C <==>[alpha][beta] O.NT
    dyn_var_t alpha; // uM^-1 msec^-1
    dyn_var_t beta;  // msec^-1
		//{{{ only used with preSynapticPoint
    //dyn_var_t NTmax; // [uM] maximum concentration of NeuroTransmitter Glutamate
    //dyn_var_t Vp; // [mV]  voltage at which concentration of Glutamate is at half-peak
    //dyn_var_t Kp; // [mV]  the steepness of the curve of Glutamate = f(Vm)
	  //}}}
    //dyn_var_t E;

    dyn_var_t* deltaT;
    //dyn_var_t* T;
		//dyn_var_t Tadj;  // [unitless] kinetics adjustment based on recorded data 
		//   and tempt. used for the simulation 
		//InitPhase computeTadj;  
    //dyn_var_t* Mg_EC; // [mM]
    //dyn_var_t* Ketamine; // 0..1 (fraction of Ketamine block)
    //dyn_var_t* Glycine; // [uM]

    ////Plasticity params
    //int plasticityOn;
    //int plasticityStartAt;
    //int plasticityStopAt;
    //dyn_var_t theta_d; // threshold of Ca2+ for depression
    //dyn_var_t theta_p; // threshold of Ca2+ for potentiation
    //dyn_var_t gamma_d;
    //dyn_var_t gamma_p;
    //dyn_var_t tau;
    //dyn_var_t w_th;

    ////Meta-plasticity mGluR
    //dyn_var_t deltamGluR;
    //dyn_var_t alphaBuffer;
    //dyn_var_t tauBuffer;
#ifdef KEEP_PAIR_PRE_POST
    //do nothing
#else
    int* IntTmpConnect;
#endif
    ////}}}
   }

  //{{{Phases 
  InitPhase initialize;
  RuntimePhase update(I_IP3);
  //RuntimePhase updatemGluDepPlasticity;
  //}}}

  // Output
	//{{{
  //ConductanceProducer.conductance << &g;
  //MaximumConductanceProducer.maximumConductance << &w;
  //ReversalPotentialProducer.reversalPotential << &Shared.E;
  IP3CurrentProducer.current << &I_IP3;
#ifdef KEEP_PAIR_PRE_POST
  BranchDataArrayProducer.branchDataArray << &branchDataPrePost;
  IndexArrayProducer.indexArray << &indexPrePost;
#else
  //BranchDataArrayProducer.branchDataArray << &branchDataPre;
  //IndexArrayProducer.indexArray << &indexPre;
  BranchDataProducer.branchData << branchDataPre;
  IndexProducerPre.index << &indexPre;
  BranchDataProducer.branchData << branchDataPost;
  IndexProducerPost.index << &indexPost;
#endif
  DimensionArrayProducer.dimensionArray << dimensions;
  //WeightProducer.w << &w; //Repeated in MaxConductanceProducer?
  //}}}

  InAttrPSet {//information of the incoming connection
    string identifier; 
    int idx;   // index of the compartment on a branch
          // if identifier is the name of the compartment variable
  }

  UserFunction setPostIndex;
#ifdef KEEP_PAIR_PRE_POST
  //do nothing
#else
  UserFunction setPreIndex;
#endif

  // Connection (input)
	//{{{
  Connection Pre Node (PSet.identifier=="preSynapticPoint") Expects VoltageProducer
     , BranchDataProducer, IndexProducer {//the info from presynaptic-side is passed to receptor via this
      // intermediate nodetype
		//{{{
    VoltageProducer.voltage >> Vpre;
#ifdef KEEP_PAIR_PRE_POST
    BranchDataProducer.branchData >> branchDataPrePost;
    IndexProducer.index >> indexPrePost;
#else
    BranchDataProducer.branchData >> branchDataPre;
    IndexProducer.index >> Shared.IntTmpConnect;
    setPreIndex();  
#endif
    //}}}
  }

  Connection Pre Node (PSet.identifier=="synapticCleft") Expects GlutamateConcentrationProducer
     , BranchDataProducer, IndexProducer {
  //{{{
    GlutamateConcentrationProducer.NT >> Glut;
#ifdef KEEP_PAIR_PRE_POST
    BranchDataProducer.branchData >> branchDataPrePost;
    IndexProducer.index >> indexPrePost;
#else
    //[REMOVED]BranchDataProducer.branchData >> branchDataPre;
    //[REMOVED]IndexProducer.index >> indexPre;
    IndexProducer.index >> Shared.IntTmpConnect;
    setPreIndex();  
#endif
  //}}}
  }

  Connection Pre Node (PSet.identifier=="compartment[IP3]") Expects 
     //IP3ConcentrationArrayProducer 
     DimensionArrayProducer
     , BranchDataProducer {//the info from postsynaptic-side is passed to receptor directly
    //{{{
    //REMEMBER: When use in C++ code, only use IP3_IC[indexPost]
    //IP3ConcentrationArrayProducer.IP3Concentrations >> IP3_IC;
#ifdef KEEP_PAIR_PRE_POST
    BranchDataProducer.branchData >> branchDataPrePost;
#else
    BranchDataProducer.branchData >> branchDataPost;
#endif
    //REMEMBER: When use in C++ code, only use IP3_post[indexPost]
    DimensionArrayProducer.dimensionArray >> dimensions;
    setPostIndex(); 
    //}}}
  }

  Connection Pre Constant (PSet.identifier=="dt") Expects TimeStepProducer {
    TimeStepProducer.deltaT >> Shared.deltaT;
  }
  //Connection Pre Node (PSet.identifier=="compartment[Voltage]") Expects 
  //  //VoltageArrayProducer, 
  //   BranchDataProducer {//the info from postsynaptic-side is passed to receptor directly
  //  //REMEMBER: When use in C++ code, only use Vpost[indexPost]
  //  //VoltageArrayProducer.voltageArray >> Vpost;
  //  BranchDataProducer.branchData >> branchDataPrePost;
  //  setPostIndex(); // so that Vpost[indexPost] point to the voltage in the proper compartment index 
  //}

  //Connection Pre Constant (PSet.identifier=="EC") Expects 
  //      //IP3ConcentrationProducer, 
  //      //MgConcentrationProducer, , KetamineProducer, GlycineProducer 
  //      TemperatureProducer
  //{
	//	//{{{
  //  //IP3ConcentrationProducer.IP3 >> Shared.IP3_EC;
  //  //MgConcentrationProducer.Mg >> Shared.Mg_EC;
  //  TemperatureProducer.T >> Shared.T;
  //  //KetamineProducer.Ketamine >> Shared.Ketamine;
  //  //GlycineProducer.Glycine >> Shared.Glycine;
  //  //}}}
  //}

  //}}}

/*}}}*/
}

#endif
