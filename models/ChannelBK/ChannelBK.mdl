#ifndef ChannelBK_MDL
#define ChannelBK_MDL

#include "../../nti/include/MaxComputeOrder.h"

#include "../std/std.mdl"
#include "../HodgkinHuxley/HodgkinHuxley.mdl"
#include "../BranchSolver/BranchSolver.mdl"

Node ChannelBKalphabeta Implements ConductanceArrayProducer, ReversalPotentialArrayProducer, BranchDataProducer, IOCurrentArrayProducer, DimensionArrayProducer {
	/*{{{*/
	//DATA
	// Markov-based formula
	//{{{
	//internal data
	dyn_var_t [] fO; //fraction of channel in Open-state
	dyn_var_t [] fI; //  Inactivated-state
	dyn_var_t [] fC; //  Closed-state
	dyn_var_t [] g;  // nS/um^2
	dyn_var_t [] gbar; // nS/um^2
  dyn_var_t [] Iion;
	// reference data
  //{{{
  //internal data
  dyn_var_t []* V;//transmembrane voltage [mV]
  dyn_var_t []* Cai;//submembrane Ca2+ [uM]
  BranchDataStruct* branchData; 
  DimensionStruct* []* dimensions;
  //int index; //index of the compartment in branch

  //data mainly used to dynamically assign different conductance on different location
  //NOTE: In SynParams.par file
  //    Use either gbar_dists or gbar_branch
  //      and combine with gbar_values
  float [] gbar_dists; // an array that indicate the threshold-distance (in micrometer)
  float [] gbar_branchorders;// an array that indicate the branch-order (zero-based integer)
  float [] gbar_values;// ... having the corresponding gbar conductance
  // Example:
  // CHANNEL_PARAMS 2
  // Cah 3
  // BRANCHTYPE MTYPE
  // 1 0 <gbar={0.00992}>
  // 4 0 <gbar_dists={380.0,480.0, 590}>
  // 4 0 <gbar_values={0.000555,0.00555,0.000555}>
  // Nat 3
  // BRANCHTYPE MTYPE
  // 1 0 <gbar={0.00992}>
  // 4 0 <gbar_branchorders={0, 1, 2}>
  // 4 0 <gbar_values={0.0555,0.555,0.000555}>
  //}}}
	//}}}

	//SHARED DATA
	Shared {//in xxxCompCategory.C
		//{{{
		dyn_var_t* K_IC; // [mM]
		dyn_var_t* K_EC; // [mM]
		dyn_var_t* deltaT; // [ms]
		dyn_var_t* T;     // [K]
		dyn_var_t Tadj;  // kinetics adjustment based on recorded data 
		//   and tempt. used for the simulation 
		//dyn_var_t a; // fraction of inactivation (i.e. channel with partial inactivation properties)
		dyn_var_t [] E_K; // [mV]
		InitPhase computeE; // [mV]
		//}}}
	}

	RuntimePhase update();
	InitPhase initialize;

	ConductanceArrayProducer.conductanceArray << &g;
	ReversalPotentialArrayProducer.reversalPotentials << &Shared.E_K;
	BranchDataProducer.branchData << branchData;
  DimensionArrayProducer.dimensionArray << dimensions;
  IOCurrentArrayProducer.currents << &Iion;

	InAttrPSet {//information of the incoming connection
		string identifier; //name of the compartment variable
		int idx;   // index of the compartment on a branch
	}

	Connection Pre Node (PSet.identifier=="compartment[Voltage]") Expects VoltageArrayProducer, 
                      BranchDataProducer, DimensionArrayProducer {
		VoltageArrayProducer.voltageArray >> V;
		BranchDataProducer.branchData >> branchData;
    DimensionArrayProducer.dimensionArray >> dimensions;
	}

	Connection Pre Node (PSet.identifier=="compartment[Calcium]") Expects CaConcentrationArrayProducer//,
//                      BranchDataProducer 
  {
		CaConcentrationArrayProducer.CaConcentrations >> Cai;
		//BranchDataProducer.branchData >> branchData;
	}
	Connection Pre Node (PSet.identifier=="IC[Voltage]") Expects KConcentrationProducer {
		KConcentrationProducer.K >> Shared.K_IC;
	}

	Connection Pre Constant (PSet.identifier=="EC") 
		Expects KConcentrationProducer, TemperatureProducer {
			KConcentrationProducer.K >> Shared.K_EC;
			TemperatureProducer.T >> Shared.T;
		}

	Connection Pre Constant (PSet.identifier=="dt") Expects TimeStepProducer {
		TimeStepProducer.deltaT >> Shared.deltaT;
	}
	/*}}}*/
}


//Node ChannelBKalphabeta2 Implements ConductanceArrayProducer, ReversalPotentialArrayProducer, BranchDataProducer {
///*{{{*/
//  //DATA
//  // Hodgkin-Huxley-based formula
//  //{{{
//  //internal data
//  dyn_var_t [] fO;
//  dyn_var_t [] fI;
//  dyn_var_t [] fC;
//  dyn_var_t [] g;  // nS/um^2
//  dyn_var_t [] gbar; // nS/um^2
//  // reference data
//  dyn_var_t []* V;//transmembrane voltage [mV]
//  BranchDataStruct* branchData; 
//  //}}}
//
//  //SHARED DATA
//  Shared {//in xxxCompCategory.C
//  //{{{
//    dyn_var_t* K_IC; // [mM]
//    dyn_var_t* K_EC; // [mM]
//    dyn_var_t* deltaT; // [ms]
//    dyn_var_t* T;     // [K]
//    dyn_var_t Tadj;  // kinetics adjustment based on recorded data 
//                      //   and tempt. used for the simulation 
//    //dyn_var_t a; // fraction of inactivation (i.e. channel with partial inactivation properties)
//    dyn_var_t [] E_K; // [mV]
//    InitPhase computeE; // [mV]
//  //}}}
//  }
//
//  RuntimePhase update();
//  InitPhase initialize;
//
//  ConductanceArrayProducer.conductanceArray << &g;
//  ReversalPotentialArrayProducer.reversalPotentials << &Shared.E_K;
//  BranchDataProducer.branchData << branchData;
//
//  InAttrPSet {//information of the incoming connection
//    string identifier; //name of the compartment variable
//    int idx;   // index of the compartment on a branch
//  }
//
//  Connection Pre Node (PSet.identifier=="compartment[Voltage]") Expects VoltageArrayProducer, BranchDataProducer {
//    VoltageArrayProducer.voltageArray >> V;
//    BranchDataProducer.branchData >> branchData;
// }
//
//	Connection Pre Node (PSet.identifier=="compartment[Calcium]") Expects CaConcentrationArrayProducer,
//                      BranchDataProducer 
//  {
//		CaConcentrationArrayProducer.CaConcentrations >> Cai;
//		//BranchDataProducer.branchData >> branchData;
//	}
//  Connection Pre Node (PSet.identifier=="IC[Voltage]") Expects KConcentrationProducer {
//    KConcentrationProducer.K >> Shared.K_IC;
//  }
//
//  Connection Pre Constant (PSet.identifier=="EC") 
//	Expects KConcentrationProducer, TemperatureProducer {
//    KConcentrationProducer.K >> Shared.K_EC;
//    TemperatureProducer.T >> Shared.T;
//  }
//
//  Connection Pre Constant (PSet.identifier=="dt") Expects TimeStepProducer {
//    TimeStepProducer.deltaT >> Shared.deltaT;
//  }
///*}}}*/
//}
//
//Node ChannelBKalphabeta4 Implements ConductanceArrayProducer, ReversalPotentialArrayProducer, BranchDataProducer {
///*{{{*/
//  //DATA
//  // Hodgkin-Huxley-based formula
//  //{{{
//  //internal data
//  dyn_var_t [] fO;
//  dyn_var_t [] fI;
//  dyn_var_t [] fC;
//  dyn_var_t [] g;  // nS/um^2
//  dyn_var_t [] gbar; // nS/um^2
//  // reference data
//  dyn_var_t []* V;//transmembrane voltage [mV]
//  BranchDataStruct* branchData; 
//  //}}}
//
//  //SHARED DATA
//  Shared {//in xxxCompCategory.C
//  //{{{
//    dyn_var_t* K_IC; // [mM]
//    dyn_var_t* K_EC; // [mM]
//    dyn_var_t* deltaT; // [ms]
//    dyn_var_t* T;     // [K]
//    dyn_var_t Tadj;  // kinetics adjustment based on recorded data 
//                      //   and tempt. used for the simulation 
//    //dyn_var_t a; // fraction of inactivation (i.e. channel with partial inactivation properties)
//    dyn_var_t [] E_K; // [mV]
//    InitPhase computeE; // [mV]
//  //}}}
//  }
//
//  RuntimePhase update();
//  InitPhase initialize;
//
//  ConductanceArrayProducer.conductanceArray << &g;
//  ReversalPotentialArrayProducer.reversalPotentials << &Shared.E_K;
//  BranchDataProducer.branchData << branchData;
//
//  InAttrPSet {//information of the incoming connection
//    string identifier; //name of the compartment variable
//    int idx;   // index of the compartment on a branch
//  }
//
//  Connection Pre Node (PSet.identifier=="compartment[Voltage]") Expects VoltageArrayProducer, BranchDataProducer {
//    VoltageArrayProducer.voltageArray >> V;
//    BranchDataProducer.branchData >> branchData;
// }
//
//	Connection Pre Node (PSet.identifier=="compartment[Calcium]") Expects CaConcentrationArrayProducer,
//                      BranchDataProducer 
//  {
//		CaConcentrationArrayProducer.CaConcentrations >> Cai;
//		//BranchDataProducer.branchData >> branchData;
//	}
//  Connection Pre Node (PSet.identifier=="IC[Voltage]") Expects KConcentrationProducer {
//    KConcentrationProducer.K >> Shared.K_IC;
//  }
//
//  Connection Pre Constant (PSet.identifier=="EC") 
//	Expects KConcentrationProducer, TemperatureProducer {
//    KConcentrationProducer.K >> Shared.K_EC;
//    TemperatureProducer.T >> Shared.T;
//  }
//
//  Connection Pre Constant (PSet.identifier=="dt") Expects TimeStepProducer {
//    TimeStepProducer.deltaT >> Shared.deltaT;
//  }
///*}}}*/
//}
//

Node ChannelBK Implements ConductanceArrayProducer, ReversalPotentialArrayProducer, BranchDataProducer, IOCurrentArrayProducer, DimensionArrayProducer {
	/*{{{*/
	//DATA
	// Alpha-Beta forward-backward rate based formula
  //{{{
  //internal data
  dyn_var_t [] fO; //fraction of channel in Open-state
  dyn_var_t [] g;  // nS/um^2
  dyn_var_t [] gbar; // nS/um^2
  dyn_var_t [] Iion;
  // reference data
  dyn_var_t []* V;//transmembrane voltage [mV]
  dyn_var_t []* Cai;//submembrane Ca2+ [uM]
  BranchDataStruct* branchData; 
  DimensionStruct* []* dimensions;
  //int index; //index of the compartment in branch

  //data mainly used to dynamically assign different conductance on different location
  //NOTE: In SynParams.par file
  //    Use either gbar_dists or gbar_branch
  //      and combine with gbar_values
  float [] gbar_dists; // an array that indicate the threshold-distance (in micrometer)
  float [] gbar_branchorders;// an array that indicate the branch-order (zero-based integer)
  float [] gbar_values;// ... having the corresponding gbar conductance
  // Example:
  // CHANNEL_PARAMS 2
  // Cah 3
  // BRANCHTYPE MTYPE
  // 1 0 <gbar={0.00992}>
  // 4 0 <gbar_dists={380.0,480.0, 590}>
  // 4 0 <gbar_values={0.000555,0.00555,0.000555}>
  // Nat 3
  // BRANCHTYPE MTYPE
  // 1 0 <gbar={0.00992}>
  // 4 0 <gbar_branchorders={0, 1, 2}>
  // 4 0 <gbar_values={0.0555,0.555,0.000555}>
  //}}}

	//SHARED DATA
	Shared {//in xxxCompCategory.C
		//{{{
		dyn_var_t* K_IC; // [mM]
		dyn_var_t* K_EC; // [mM]
		dyn_var_t* deltaT; // [ms]
		dyn_var_t* T;     // [K]
		dyn_var_t Tadj;  // kinetics adjustment based on recorded data 
		//   and tempt. used for the simulation 
		//dyn_var_t a; // fraction of inactivation (i.e. channel with partial inactivation properties)
		dyn_var_t [] E_K; // [mV]
		InitPhase computeE; // [mV]
		//}}}
	}

	RuntimePhase update();
	InitPhase initialize;

	ConductanceArrayProducer.conductanceArray << &g;
	ReversalPotentialArrayProducer.reversalPotentials << &Shared.E_K;
	BranchDataProducer.branchData << branchData;
  DimensionArrayProducer.dimensionArray << dimensions;
  IOCurrentArrayProducer.currents << &Iion;

	InAttrPSet {//information of the incoming connection
		string identifier; //name of the compartment variable
		int idx;   // index of the compartment on a branch
	}

	Connection Pre Node (PSet.identifier=="compartment[Voltage]") Expects VoltageArrayProducer, 
                      BranchDataProducer, DimensionArrayProducer {
		VoltageArrayProducer.voltageArray >> V;
		BranchDataProducer.branchData >> branchData;
    DimensionArrayProducer.dimensionArray >> dimensions;
	}

	Connection Pre Node (PSet.identifier=="compartment[Calcium]") Expects CaConcentrationArrayProducer//,
//                      BranchDataProducer 
  {
		CaConcentrationArrayProducer.CaConcentrations >> Cai;
		//BranchDataProducer.branchData >> branchData;
	}
	Connection Pre Node (PSet.identifier=="IC[Voltage]") Expects KConcentrationProducer {
		KConcentrationProducer.K >> Shared.K_IC;
	}

	Connection Pre Constant (PSet.identifier=="EC") 
		Expects KConcentrationProducer, TemperatureProducer {
			KConcentrationProducer.K >> Shared.K_EC;
			TemperatureProducer.T >> Shared.T;
		}

	Connection Pre Constant (PSet.identifier=="dt") Expects TimeStepProducer {
		TimeStepProducer.deltaT >> Shared.deltaT;
	}
	/*}}}*/
}
#endif
