// =================================================================
// Licensed Materials - Property of IBM
//
// "Restricted Materials of IBM"
//
// BCM-YKT-07-18-2017
//
// (C) Copyright IBM Corp. 2005-2017  All rights reserved
//
// US Government Users Restricted Rights -
// Use, duplication or disclosure restricted by
// GSA ADP Schedule Contract with IBM Corp.
//
// =================================================================

#ifndef MOTONEURONUNITDATACOLLECTORS_MDL
#define MOTONEURONUNITDATACOLLECTORS_MDL
#include "../PointNeuronTools/PointNeuronTools.mdl"

#define saveSimple 0

Variable MotoneuronUnitDataCollector
{
  string directory;
  string fileExt;
  int [] rows;
  int [] cols;
  int [] slices;
  int mxslice;
  // Dendrite
  double* [] d_V_m_last;
  double* [] d_I_in;
  // Soma
  double* [] s_V_m;
  double* [] s_I_in;
  // IAS
  double* [] i_V_m;
  // Axon
  //  double* [] a_V_m_node_last; // the V_m of just the last segment
#if saveSimple == 0
  // ##### SOMA #####
  double* [] s_I_Naf;
  double* [] s_I_Kdr;
  double* [] s_I_CaN;
  double* [] s_I_CaL;
  double* [] s_I_KCa;
  double* [] s_I_leak;
  
  double* [] s_m_Naf;
  double* [] s_h_Naf;
  double* [] s_n_Kdr;
  double* [] s_m_CaN;
  double* [] s_h_CaN;
  double* [] s_p_CaL;
  
  double* [] s_Ca_i;
  double* [] s_E_Ca;
  
  // ##### IAS #####
  double* [] i_I_Naf;
  double* [] i_I_Nap;
  double* [] i_I_Kdr;
  double* [] i_I_leak;
  
  double* [] i_m_Naf;
  double* [] i_h_Naf;
  double* [] i_p_Nap;
  double* [] i_n_Kdr;

  /*
  // ##### AXON #####
  double* [] a_I_Naf_last;
  double* [] a_I_Nap_last;
  double* [] a_I_Ks_last;
  double* [] a_I_leak_last;
  
  double* [] a_m_Naf_last;
  double* [] a_h_Naf_last;
  double* [] a_p_Nap_last;
  double* [] a_s_Ks_last;  
  */
#endif // saveSimple
  UserFunction getNodeIndices;

  // Flags
  bool op_save_d_V_m_last;
  bool op_save_d_I_in;
  bool op_save_s_V_m;
  bool op_save_s_I_in;
  bool op_save_i_V_m;
  //  bool op_save_a_V_m_node_last;
#if saveSimple == 0
  bool op_save_d_EverythingElse;
  bool op_save_s_EverythingElse;
  bool op_save_i_EverythingElse;
  //  bool op_save_a_EverythingElse;
#endif // saveSimple

#if saveSimple == 1  
  Connection Pre Node () Expects MotoneuronSimpleProducer
  {
    // Dendrite
    MotoneuronSimpleProducer.d_V_m_last >> d_V_m_last;
    MotoneuronSimpleProducer.d_I_in >> d_I_in;
    // Soma
    MotoneuronSimpleProducer.s_V_m >> s_V_m;
    MotoneuronSimpleProducer.s_I_in >> s_I_in;
    // IAS
    MotoneuronSimpleProducer.i_V_m >> i_V_m;
    /*
    // Axon
    MotoneuronSimpleProducer.a_V_m_node_last >> a_V_m_node_last;
    */
    getNodeIndices();
  }
#else
  Connection Pre Node () Expects MotoneuronProducer
  {
    // Dendrite
    MotoneuronProducer.d_V_m_last >> d_V_m_last;
    MotoneuronProducer.d_I_in >> d_I_in;
    
    // Soma
    MotoneuronProducer.s_V_m >> s_V_m;
    MotoneuronProducer.s_I_in >> s_I_in;
    
    MotoneuronProducer.s_I_Naf >> s_I_Naf;
    MotoneuronProducer.s_I_Kdr >> s_I_Kdr;
    MotoneuronProducer.s_I_CaN >> s_I_CaN;
    MotoneuronProducer.s_I_CaL >> s_I_CaL;
    MotoneuronProducer.s_I_KCa >> s_I_KCa;
    MotoneuronProducer.s_I_leak >> s_I_leak;
    
    MotoneuronProducer.s_m_Naf >> s_m_Naf;
    MotoneuronProducer.s_h_Naf >> s_h_Naf;
    MotoneuronProducer.s_n_Kdr >> s_n_Kdr;
    MotoneuronProducer.s_m_CaN >> s_m_CaN;
    MotoneuronProducer.s_h_CaN >> s_h_CaN;
    MotoneuronProducer.s_p_CaL >> s_p_CaL;
    
    MotoneuronProducer.s_Ca_i >> s_Ca_i;
    MotoneuronProducer.s_E_Ca >> s_E_Ca;
    
    // IAS
    MotoneuronProducer.i_V_m >> i_V_m;

    MotoneuronProducer.i_I_Naf >> i_I_Naf;
    MotoneuronProducer.i_I_Nap >> i_I_Nap;
    MotoneuronProducer.i_I_Kdr >> i_I_Kdr;
    MotoneuronProducer.i_I_leak >> i_I_leak;
    
    MotoneuronProducer.i_m_Naf >> i_m_Naf;
    MotoneuronProducer.i_h_Naf >> i_h_Naf;
    MotoneuronProducer.i_p_Nap >> i_p_Nap;
    MotoneuronProducer.i_n_Kdr >> i_n_Kdr;    

    /*
    // Axon
    MotoneuronProducer.a_V_m_node_last >> a_V_m_node_last;

    MotoneuronProducer.a_I_Naf_last >> a_I_Naf_last;
    MotoneuronProducer.a_I_Nap_last >> a_I_Nap_last;
    MotoneuronProducer.a_I_Ks_last >> a_I_Ks_last;
    MotoneuronProducer.a_I_leak_last >> a_I_leak_last;
    
    MotoneuronProducer.a_m_Naf_last >> a_m_Naf_last;
    MotoneuronProducer.a_h_Naf_last >> a_h_Naf_last;
    MotoneuronProducer.a_p_Nap_last >> a_p_Nap_last;
    MotoneuronProducer.a_s_Ks_last >> a_s_Ks_last;
    */
    
    getNodeIndices();
  }
#endif // saveSimple
  
  InitPhase initialize;
  TriggeredFunction dataCollection;
  FinalPhase finalize;
}

#endif
