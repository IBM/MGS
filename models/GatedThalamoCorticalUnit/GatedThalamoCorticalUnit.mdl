// =================================================================
// Licensed Materials - Property of IBM
//
// "Restricted Materials of IBM"
//
// BCM-YKT-07-18-2017
//
// (C) Copyright IBM Corp. 2005-2017  All rights reserved
//
// US Government Users Restricted Rights -
// Use, duplication or disclosure restricted by
// GSA ADP Schedule Contract with IBM Corp.
//
// =================================================================

#ifndef GATEDTHALAMOCORTICALUNIT_MDL
#define GATEDTHALAMOCORTICALUNIT_MDL
#include "../PointNeuronTools/PointNeuronTools.mdl"

Struct GTCU_LN_Input {
  double* input;
  double covWeight;
  double whitWeight;
  double weight;
  int row;
  int col;
  int slice;
}

Node GatedThalamoCorticalUnit Implements OutputProducer, FiringRateProducer, ReceptiveFieldProducer {
  double x;	   // Sum of spiking L5 and phenotypic inputs
  double y;        // instantaneous sensory thalamic activity for lateral inh
  double z; 	   // Autoregressive average spike rate over tauZ
  double y0;       // mean of phenotypic inputs
  double z0;       // mean of time averaged spiking of L5 inputs  
  double D;	   // time averaged combined drive (phenotypic and L5)

  Input [] phenotypicInputs;
  Input [] RF_Inputs;
  SpikeInput [] L5FFInputs;
  SpikeInput [] L5FBInputs;
  double* [] gateOpenInputs;
  double* [] gateClosedInputs;
  GTCU_LN_Input [] lateralInputs;     // input structure for covariance
  

  Shared {
    double alpha;  // proportion of drive derived from phenotype
    double betaY0;
    double betaZ0;
    int tauZ;      // integration window size of L5 inputs
    double alphaZ;
    string weightsFileName;
    int [] loadWeightsOn;
    int loadWeightsNext;
    int [] collectWeightsOn;
    int collectWeightsNext;
    InitPhase initializeShared();
    RuntimePhase outputWeightsShared;
    RuntimePhase inputWeightsShared;
    
    RuntimePhase updateWhitMatrixShared;
    bool whitening;
  }
  InAttrPSet {
    string identifier;
    double weight;
    double covWeight;
    double whitWeight;
    double distance;
  }

  UserFunction setIndices;

  Connection Pre Node (PSet.identifier=="phenotypic") Expects OutputProducer {
    OutputProducer.output >> phenotypicInputs.input;
    PSet.weight >> phenotypicInputs.weight;
    setIndices();
  }

  Connection Pre Node ( PSet.identifier=="L5FF") Expects SpikeProducer {
    SpikeProducer.spike >> L5FFInputs.spike;
    PSet.weight >> L5FFInputs.weight;
  } 

  Connection Pre Node ( PSet.identifier=="L5FB") Expects SpikeProducer {
    SpikeProducer.spike >> L5FBInputs.spike;
    PSet.weight >> L5FBInputs.weight;
  }

  Connection Pre Node ( PSet.identifier=="gateOpen") Expects OutputProducer {
    OutputProducer.output >> gateOpenInputs;
  } 

  Connection Pre Node ( PSet.identifier=="gateClosed") Expects OutputProducer {
    OutputProducer.output >> gateClosedInputs;
  } 
 
  Connection Pre Node ( PSet.identifier=="LN_GTCU") Expects FiringRateProducer {
    FiringRateProducer.output >> lateralInputs.input;
    PSet.covWeight >> lateralInputs.covWeight;
    PSet.whitWeight >> lateralInputs.whitWeight;
    setIndices();
  }

  Connection Pre Node ( PSet.identifier=="RF_GTCU") Expects ReceptiveFieldProducer {
    ReceptiveFieldProducer.output >> RF_Inputs.input;
    PSet.weight >> RF_Inputs.weight;
    setIndices();
  }

  OutputProducer.output << &x;
  FiringRateProducer.output << &z;
  ReceptiveFieldProducer.output << &y;

  InitPhase initialize;
  RuntimePhase update(z,y);
  RuntimePhase whiten(x);
}
#endif
