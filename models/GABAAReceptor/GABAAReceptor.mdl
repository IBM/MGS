#ifndef GABAAReceptor_MDL
#define GABAAReceptor_MDL

#include "../../nti/include/MaxComputeOrder.h"
#include "../std/std.mdl"
#include "../HodgkinHuxley/HodgkinHuxley.mdl"
#include "../BranchSolver/BranchSolver.mdl"

Node GABAAReceptor Implements ConductanceProducer, ReversalPotentialProducer, 
    BranchDataArrayProducer, IndexArrayProducer 
{
/*{{{*/
	//DATA
	//{{{ 
	// Hodgkin-Huxley-based formula 
	//internal data
	//{{{
  dyn_var_t g;
  dyn_var_t gbar;
  dyn_var_t r; // fraction of opening receptors

  dyn_var_t* V;
  dyn_var_t* GABA; // [uM] concentration
  int indexPost;
  int* [] indexPrePost;

  BranchDataStruct* [] branchDataPrePost;
  //}}}

  Shared {
		//{{{ C <==>[alpha * r(NT) * f(Vpost)][beta]
    dyn_var_t alpha;
    dyn_var_t beta;
		//{{{ only used with preSynapticPoint
    dyn_var_t NTmax;
    dyn_var_t Vp;
    dyn_var_t Kp;
	  //}}}
    dyn_var_t E;
    dyn_var_t* deltaT;
    dyn_var_t *T;   // [K]
		dyn_var_t Tadj;  // [unitless] kinetics adjustment based on recorded data 
		//   and tempt. used for the simulation 
		InitPhase computeTadj;  
  //}}}
  }

  InitPhase initializeGABAA;
  RuntimePhase updateGABAA;

  // Output
  ConductanceProducer.conductance << &g;
  ReversalPotentialProducer.reversalPotential << &Shared.E;
  BranchDataArrayProducer.branchDataArray << &branchDataPrePost;
  IndexArrayProducer.indexArray << &indexPrePost;

  InAttrPSet {
    string identifier;
    int idx;
  }

  UserFunction setPostIndex;

  // Input (Connection setting)
  Connection Pre Node (PSet.identifier=="preSynapticPoint") Expects VoltageProducer, BranchDataProducer, IndexProducer {
    VoltageProducer.voltage >> V;
    BranchDataProducer.branchData >> branchDataPrePost;
    IndexProducer.index >> indexPrePost;
  }

  Connection Pre Node (PSet.identifier=="synapticCleft") Expects GABAConcentrationProducer, BranchDataProducer, IndexProducer {
    GABAConcentrationProducer.NT >> GABA;
    BranchDataProducer.branchData >> branchDataPrePost;
    IndexProducer.index >> indexPrePost;
  }

  Connection Pre Node (PSet.identifier=="compartment[Voltage]") Expects VoltageArrayProducer, BranchDataProducer {
    BranchDataProducer.branchData >> branchDataPrePost;
    setPostIndex();
  }

  Connection Pre Constant (PSet.identifier=="EC") 
    Expects TemperatureProducer {
    TemperatureProducer.T >> Shared.T;
  }

  Connection Pre Constant (PSet.identifier=="dt") Expects TimeStepProducer {
  TimeStepProducer.deltaT >> Shared.deltaT;
  }
/*}}}*/
}

#endif
