// =================================================================
// Licensed Materials - Property of IBM
//
// "Restricted Materials of IBM"
//
// BCM-YKT-07-18-2017
//
// (C) Copyright IBM Corp. 2005-2017  All rights reserved
//
// US Government Users Restricted Rights -
// Use, duplication or disclosure restricted by
// GSA ADP Schedule Contract with IBM Corp.
//
// =================================================================

#ifndef BOUTONIAFUNIT_MDL
#define BOUTONIAFUNIT_MDL
#include "../PointNeuronTools/PointNeuronTools.mdl"

Node BoutonIAFUnit Implements NeurotransmitterIAFProducer, AvailableNeurotransmitterIAFProducer,
  CB1RIAFProducer, OutputProducer
{
  int neurotransmitterType;         // type of neurotransmitter
  
  SpikeInput [] spikeInput;         // input of spike
  double neurotransmitter;          // current output of neurotransmitter
  double availableNeurotransmitter; // amount of neurotransmitter available to be released
  double maxNeurotransmitter;       // maximum amount of neurotransmitter to recovery to
  
  eCBIAFInput [] eCBInput;          // input of endogenous cannabinoid
  double eCB;                       // Local copy of the eCB concentration to pass to the Goodwin model
  double CB1R;                      // CB1R total quantity
  double CB1Runbound;               // CB1R unbound quantity
  double CB1Rrise;                  // rise current of Cannabinoid receptor
  double CB1Rcurrent;               // fall current of Cannabinoid receptor

  GoodwinInput [] CB1Input;         // input of CB1R protein levels
  
  Shared
    {
      double [] neurotransmitterAdaptRate;  // Rate of surpression of neurotransmitter release
      double [] neurotransmitterRecoverTau; // Rate of recovery from suppression

      double CB1RriseTau;                // rise time constant of CB1R
      double CB1RfallTau;                // fall time constant of CB1R

      double deltaT;                     // in s

      string sharedDirectory;
      string [] sharedFilePrep;
      string [] sharedFileApp;
      string sharedFileExt;

      InitPhase initializeShared;

      // Flags
      bool op_saveIndexs;

      bool op_check_SpikeInput;
      unsigned expected_SpikeInputN;
      bool op_check_eCBIAFInput;
      unsigned expected_eCBIAFInputN;
      bool op_check_GoodwinInput;
      unsigned expected_GoodwinInputN;
    }

  InAttrPSet
    {
      string identifier;
      double weight;           // potentially for structural plasticity
    }

  InitPhase initialize();
  RuntimePhase update(neurotransmitter, availableNeurotransmitter, CB1R, CB1Runbound, CB1Rcurrent);

  NeurotransmitterIAFProducer.neurotransmitter << &neurotransmitter; // neurotransmitter output
  AvailableNeurotransmitterIAFProducer.availableNeurotransmitter << &availableNeurotransmitter; // available neurotransmitter
  CB1RIAFProducer.CB1R << &CB1R; // CB1R total quantity
  CB1RIAFProducer.CB1Runbound << &CB1Runbound; // CB1R unbound quantity
  CB1RIAFProducer.CB1Rcurrent << &CB1Rcurrent; // CB1R current
  OutputProducer.output << &eCB; // eCB concentration for Goodwin model  
  
  UserFunction setSpikeIndices;
  UserFunction seteCBIndices;

  Connection Pre Node (PSet.identifier=="inputSpikes") Expects SpikeProducer
  {
    SpikeProducer.spike >> spikeInput.spike;
    PSet.weight >> spikeInput.weight;
    setSpikeIndices();
  }

  Connection Pre Node (PSet.identifier=="eCBinput") Expects eCBIAFProducer
  {
    eCBIAFProducer.eCB >> eCBInput.eCB;
    PSet.weight >> eCBInput.weight;
    seteCBIndices();
  }
  
  Connection Pre Node (PSet.identifier=="CB1Input") Expects GoodwinProducer
  {
    GoodwinProducer.Y >> CB1Input.Y; // only care about the amount of CB1, i.e. Y
    PSet.weight >> CB1Input.weight;
    seteCBIndices();
  }
}

#endif
