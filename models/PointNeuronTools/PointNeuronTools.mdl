// =================================================================
// Licensed Materials - Property of IBM
//
// "Restricted Materials of IBM"
//
// BCM-YKT-07-18-2017
//
// (C) Copyright IBM Corp. 2005-2017  All rights reserved
//
// US Government Users Restricted Rights -
// Use, duplication or disclosure restricted by
// GSA ADP Schedule Contract with IBM Corp.
//
// =================================================================

#ifndef POINTNEURONTOOLS_MDL
#define POINTNEURONTOOLS_MDL

Interface ValueProducer {
  int *value;
}

Interface FloatProducer {
  float* value;
}

Interface OutputProducer {
  double* output;
}

Interface PlasticOutputProducer {
  double* output;
  double* P1;
  double* prePlastic;
}

Interface ExcitationProducer {
  float* value;
}

Interface InhibitionProducer {
  float* value;
}

Interface PermittivityProducer 
{
  float* value;
}

Interface SpikeProducer {
  bool* spike;
}

Interface PlasticSpikeProducer {
  bool* spike;
  double* P1;
}

Interface ThresholdProducer {
  double* threshold;
}

Interface LFPProducer
{
  double* LFP;
}

Interface NeurotransmitterIAFProducer
{
  double* neurotransmitter;
}

Interface AvailableNeurotransmitterIAFProducer
{
  double* availableNeurotransmitter;
}

Interface SynapticCurrentIAFProducer
{
  double* AMPAweight;
  double* AMPAcurrent;

  double* mGluR5current;

  double* NMDARopen;
  double* NMDARCacurrent;
}

Interface CaIAFProducer
{
  double* Ca;
}

Interface eCBIAFProducer
{
  double* eCB;
}

Interface CB1RIAFProducer
{
  double* CB1R;
  double* CB1Runbound;
  double* CB1Rcurrent;
}

Interface SORNSpikeProducer {
  bool* spikePrev;
  bool* spike;
}

Interface WaveProducer
{
  double* wave;
}

Interface FiringRateProducer {
  double* output;
}

Interface VoltageIAFProducer {
  float* voltage;
}

Interface MotoneuronSimpleProducer
{
  // Dendrite
  double* d_V_m_last;
  double* d_I_in;
  // Soma
  double* s_V_m;
  double* s_I_in;
  // IAS
  double* i_V_m;
  // Axon
  //  double* a_V_m_node_last;
}

Interface MotoneuronProducer {
  // Dendrite
  double* d_V_m_last;
  double* d_I_in;
  
  // Soma
  double* s_V_m;
  double* s_I_in;
  
  double* s_I_Naf;
  double* s_I_Kdr;
  double* s_I_CaN;
  double* s_I_CaL;
  double* s_I_KCa;
  double* s_I_leak;
  
  double* s_m_Naf;
  double* s_h_Naf;
  double* s_n_Kdr;
  double* s_m_CaN;
  double* s_h_CaN;
  double* s_p_CaL;

  double* s_Ca_i;
  double* s_E_Ca;

  // IAS
  double* i_V_m;

  double* i_I_Naf;
  double* i_I_Nap;
  double* i_I_Kdr;
  double* i_I_leak;
  
  double* i_m_Naf;
  double* i_h_Naf;
  double* i_p_Nap;
  double* i_n_Kdr;  

  /*
  // Axon
  double* a_V_m_node_last;

  double* a_I_Naf_last;
  double* a_I_Nap_last;
  double* a_I_Ks_last;
  double* a_I_leak_last;
  
  double* a_m_Naf_last;
  double* a_h_Naf_last;
  double* a_p_Nap_last;
  double* a_s_Ks_last;  
  */
}

Interface ReceptiveFieldProducer {
  double* output;
}

Interface GoodwinProducer 
{
  double* X;
  double* Y;
  double* Z;
}

Interface DataFeed {
  double * x1;
  double * x2;
  double * x3;
}

Struct Input {
  double* input;
  double weight;
  int row;
  int col;
}

Struct EpileptorInput{
  float* input;
  float weight;
}

Struct StructuralInput {
  double* input;
  double weight;
  bool synapse; // whether is "functional" or not
  int row;
  int col;
}

Struct PlasticInput {
  double* input;
  double* P1;
  double* prePlastic;
  double weight;
  int row;
  int col;
}

Struct SpikeInput {
  bool* spike;
  double weight;
  int row;
  int col;
}

Struct SynapseInput {
  bool* spike;
  double weight;
  bool synapse;
  int row;
  int col;
}

Struct SORNSynapseInput {
  bool* spikePrev;
  bool* spike;
  double weight;
  bool synapse;
  int row;
  int col;
}

Struct ModulatedSynapseInput {
  bool* spike;
  double weight;
  bool synapse; // whether is "functional" or not
  SpikeInput* modulator;
  int row;
  int col;
}

Struct GJInput {
  float* voltage; // float because voltage producer is float
  double conductance;
  int row;
  int col;
}

Struct PSPInput {
  bool* spike;
  double weight;
  double s_r;
  double s_f;
  int row;
  int col;
}

Struct PlasticPSPInput {
  bool* spike;
  double weight;
  double* P1;
  double s_r;
  double s_f;
  int row;
  int col;
}

Struct NeurotransmitterIAFInput
{
  double* neurotransmitter;
  double weight;
  int row;
  int col;
}

Struct SynapticCurrentIAFInput
{
  double* AMPAcurrent;
  double weight;
  int row;
  int col;
}

Struct eCBIAFInput
{
  double* eCB;
  double weight;
  int row;
  int col;
}

Struct WaveInput
{
  double* wave;
  double weight;
  int row;
  int col;
}

Struct VoltageIAFInput
{
  float* voltage;
  int row;
  int col;
}

Struct GoodwinInput
{
  double* X;
  double* Y;
  double* Z;
  double weight;
  int row;
  int col;
}

Constant PointNeuronStimulator Implements OutputProducer {
  double output;
  OutputProducer.output << &output;
}


#endif
