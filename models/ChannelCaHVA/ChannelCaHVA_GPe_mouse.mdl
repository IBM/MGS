#ifndef ChannelCaHVA_GPe_mouse_MDL
#define ChannelCaHVA_GPe_mouse_MDL

#include "../../nti/include/MaxComputeOrder.h"

#include "../std/std.mdl"
#include "../HodgkinHuxley/HodgkinHuxley.mdl"
#include "../BranchSolver/BranchSolver.mdl"
#// =================================================================
#//
#// (C) Copyright 2018 New Jersey Institute of Technology.
#//
#// =================================================================


// NOTE: This channel is modeled using HH formula; 
// and get data from 2 compartment variables: Voltage + Calcium
//   High-voltage activated
//  including Ca2+ Lv1.2, N, P/Q, R
Node ChannelCaHVA_GPe_mouse Implements 
    ConductanceArrayProducer, ReversalPotentialArrayProducer, //HH-based to Vm
    CaCurrentArrayProducer, //HH-based to Ca2+
    IOCurrentArrayProducer, //HH-based to I/O
    DimensionArrayProducer,
    BranchDataProducer 
{
//{{{
// Hodgkin-Huxley-based formula
  dyn_var_t [] g;
  dyn_var_t [] s; //activating gate
  dyn_var_t [] k; //inactivating gate
  //dyn_var_t [] l;
  dyn_var_t [] gbar;
  dyn_var_t [] E_Ca;
  dyn_var_t [] I_Ca;
  //dyn_var_t [] Iion; // [pA/um^2] - no need for double,  as only for I/O

  dyn_var_t []* V;
  dyn_var_t []* Ca_IC;
 
  BranchDataStruct* branchData; 
  DimensionStruct* []* dimensions;
  //data mainly used to dynamically assign different conductance on different location
  //NOTE: In SynParams.par file
  //    Use either gbar_dists or gbar_branch
  //      and combine with gbar_values
  float [] gbar_dists; // an array that indicate the threshold-distance (in micrometer)
  float [] gbar_branchorders;// an array that indicate the branch-order (zero-based integer)
  float [] gbar_values;// ... having the corresponding gbar conductance
  // Example:
  // CHANNEL_PARAMS 2
  // Cah 3
  // BRANCHTYPE MTYPE
  // 1 0 <gbar={0.00992}>
  // 4 0 <gbar_dists={380.0,480.0, 590}> 
  // 4 0 <gbar_values={0.000555,0.00555,0.000555}>
  // Nat 3 
  // BRANCHTYPE MTYPE
  // 1 0 <gbar={0.00992}>
  // 4 0 <gbar_branchorders={0, 1, 2}> 
  // 4 0 <gbar_values={0.0555,0.555,0.000555}>

  Shared {    
    dyn_var_t* Ca_EC;
    dyn_var_t* deltaT;
    dyn_var_t* T;
    dyn_var_t Tadj;  // [unitless] kinetics adjustment based on recorded data 
    InitPhase computeTadj; // [mV]
  }

  InitPhase initialize;
  RuntimePhase update;

  ConductanceArrayProducer.conductanceArray << &g;
  ReversalPotentialArrayProducer.reversalPotentials << &E_Ca;
  CaCurrentArrayProducer.currents << &I_Ca;
  IOCurrentArrayProducer.currents << &I_Ca;
  BranchDataProducer.branchData << branchData;
  DimensionArrayProducer.dimensionArray << dimensions;

  InAttrPSet {
    string identifier;
    int idx;  
  }

  Connection Pre Node (PSet.identifier=="compartment[Voltage]") Expects VoltageArrayProducer, 
        BranchDataProducer, DimensionArrayProducer {
    VoltageArrayProducer.voltageArray >> V;
    BranchDataProducer.branchData >> branchData;
    DimensionArrayProducer.dimensionArray >> dimensions;
  }


  Connection Pre Node (PSet.identifier=="IC[Calcium]") Expects CaConcentrationArrayProducer {
    CaConcentrationArrayProducer.CaConcentrations >> Ca_IC;
  }

  Connection Pre Constant (PSet.identifier=="EC") 
  Expects CaConcentrationProducer, TemperatureProducer {
    CaConcentrationProducer.Ca >> Shared.Ca_EC;
    TemperatureProducer.T >> Shared.T;
  }

  Connection Pre Constant (PSet.identifier=="dt") Expects TimeStepProducer {
    TimeStepProducer.deltaT >> Shared.deltaT;
  }
//}}}
}
#endif

